{"meta":{"title":"Let's Swift!","subtitle":"SangMin's study blog","description":"","author":"SangMin Jeon","url":"http://yoursite.com","root":"/"},"pages":[{"title":"about","date":"2019-11-12T10:28:48.000Z","updated":"2019-11-12T10:28:48.191Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":""},{"title":"categories","date":"2019-11-12T10:29:11.000Z","updated":"2019-11-12T10:30:20.095Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2019-11-12T10:28:56.000Z","updated":"2019-11-12T10:28:56.814Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Hello World","slug":"hello-world","date":"2019-11-12T09:33:40.184Z","updated":"2019-11-12T09:33:40.184Z","comments":true,"path":"2019/11/hello-world/","link":"","permalink":"http://yoursite.com/2019/11/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]},{"title":"11.11","slug":"19-11-11","date":"2019-11-11T06:45:50.000Z","updated":"2019-11-12T10:45:39.382Z","comments":true,"path":"2019/11/19-11-11/","link":"","permalink":"http://yoursite.com/2019/11/19-11-11/","excerpt":"","text":"if statement조건문이 true이면 출력, else는 false일 때 출력, else if는 다른 조건이 true일 때 출력 1234567891011// Logical And Operatorif (temperatureInFahrenheit &gt; 0) &amp;&amp; (temperatureInFahrenheit % 2 == 0) &#123;&#125;// Logical And Operatorif temperatureInFahrenheit &gt; 0, temperatureInFahrenheit % 2 == 0 &#123;&#125;// Logical Or Operatorif temperatureInFahrenheit &gt; 0 || temperatureInFahrenheit % 2 == 0 &#123;&#125; &amp;&amp; 연산자는 자주 사용하니 , 로 대체 가능하다 Q. if ~ else if / if 문을 2개 하는 것과 차이점?123456789var number = 9if number &lt; 10 &#123; print(\"10보다 작다\")&#125;if number &lt; 20 &#123; print(\"20보다 작다\")&#125;// if 문을 두번 사용 하면 위와 같은 경우 두 개 다 실행된다. if ~ else if 만 있을 때 else 없이 동일하게 처리하려면?12345678910var = 25if number &lt; 10 &#123; print(\"10보다 작다\")&#125; else if number &lt; 20 &#123; print(\"20보다 작다\")&#125; else if number &gt;= 20 &#123; print(\"20과 같거나 크다\")&#125;// else if에 해당하지 않는 모든 경우를 else가 들어갈 자리에 조건을 걸어줘야한다. Switch statement12345678910111213/* switch &lt;#value#&gt; &#123; case &lt;#value 1#&gt;: &lt;#respond to value 1#&gt; case &lt;#value 2#&gt;, &lt;#value 3#&gt;: &lt;#respond to value 2 or 3#&gt; default: &lt;#otherwise, do something else#&gt; &#125; - switch 문은 가능한 모든 사례를 반드시 다루어야 함 (Switch must be exhaustive) */ Q. 아래의 if - else if - else 문을 switch 문으로 바꿔보세요.1234567if temperatureInFahrenheit &lt;= 32 &#123; print(\"It's very cold. Consider wearing a scarf.\") &#125; else if temperatureInFahrenheit &gt;= 86 &#123; print(\"It's really warm. Don't forget to wear sunscreen.\") &#125; else &#123; print(\"It's not that cold. Wear a t-shirt.\") &#125; 12345678910var temp = 44switch temp &#123;case ...32 : print(\"It's very cold. Consider wearing a scarf.\")case 33...86 : print(\"It's really warm. Don't forget to wear sunscreen.\")default: print(\"It's not that cold. Wear a t-shirt.\")&#125; Compound case if문은 콤마(,)가 And(&amp;&amp;)연산인 것과 반대로 switch문은 콤마(,)가 Or(||) 연산 123456789let somePoint = (9, 0)switch somePoint &#123;case (let distance, 0), (0, let distance): print(\"On an axis, \\(distance) from the origin\")default: print(\"Not on an axis\")&#125;// x나 y 둘중 하나가 0이면 On an axis가 출력됨 where clause12345678910let anotherPoint = (1, -1)switch anotherPoint &#123;case let (x, y) where x == y: print(\"(\\(x), \\(y)) is on the line x == y\")case let (x, y) where x == -y: print(\"(\\(x), \\(y)) is on the line x == -y\")case let (x, y): print(\"(\\(x), \\(y)) is just some arbitrary point\")&#125; Q. 어떤 숫자가 주어졌을 때 짝수인지 홀수인지 출력 (switch의 where 절 이용)12345678var num = 89switch num &#123;case num where num % 2 == 0: print(\"짝수입니다.\")default: print(\"홀수입니다.\")&#125; Fallthrough 다른 언어들은 swith문이 계속 break를 써주어야 한다. 안쓰면 그 다음 구문도 실행됨 그런데 swift는 안넣어도 되는게 기본임 반대로 fallthrough를 넣어주어야 다음 구문도 실행 됨 1234567891011121314let integerToDescribe = 5var description = \"The number \\(integerToDescribe) is\"switch integerToDescribe &#123;case 2, 3, 5, 7, 11, 13, 17, 19: description += \" a prime number, and also\" fallthroughdefault: description += \" an integer.\"&#125;print(description)// 위 코드에서 fallthrough를 빼면 default 부분은 실행이 안됨 Guard statement 조건에 맞지 않으면 바로 종료 12345func update(age: Int) &#123; if 1...100 ~= age &#123; print(\"Update\") &#125;&#125; 1234func update(age: Int) &#123; guard 1...100 ~= age else &#123; return &#125; print(\"Update\")&#125; Tuple1234567891011121314let numbers = threeNumbersnumbersnumbers.0numbers.1// 위와 같이 매번 인덱스로 접근하고 싶지 않으면 아래와 같이 각각의 변수에 저장하는 것도 가능하다. let (first, second, third) = threeNumbersfirstsecond// wildcard patternlet (_, second1, third1) = threeNumberssecond1third1 Named Tuple1234567891011let iOS = (language: \"Swift\", version: \"4\")//let iOS: (language: String, version: String) = (language: \"Swift\", version: \"4\")//let iOS: (language: String, version: String) = (\"Swift\", \"4\")//let iOS = (language: \"Swift\", version: \"4\")iOS.0iOS.1iOS.languageiOS.version Comparison Operators Tuple 은 7개 미만 요소에 대한 비교 연산자가 포함되어 있음 7개 이상의 요소를 비교하기 위해서는 비교 연산자를 직접 구현해야 함 Q. 다음의 비교 결과는?123456789(1, \"zebra\") &lt; (2, \"apple\") // true(3, \"apple\") &gt; (3, \"bird\") // false(\"3.14\", 99) &gt; (\"1.99\", 1) // true(\"blue\", 1) &gt; (\"bluesky\", -1) // false(4, \"dog\") == (4, \"dog\") // true(\"일\", 1) &gt; (\"이\", 2.0)(1, \"zebra\") &lt; (\"2\", \"apple\") // 에러남 비교하는 값들의 타입이 다르기 때문(\"blue\", false) &lt; (\"purple\", true) // 에러남 불 값은 크기비교를 할 수 없어서 Loops for 문 while for문Q. for 문을 이용하여 3 의 10 제곱에 대한 결과값을 표현하는 코드 구현1234567let base = 3let power = 10var answer = 1for _ in 1...power &#123; answer *= base&#125;print(answer) Q. for 문을 이용하여 10부터 1까지 내림차순으로 출력하는 코드 구현12 While 문 조건이 거짓이 될 때까지 일련의 명령문 수행 첫 번째 반복이 시작되기 전에 반복 횟수를 알지 못할 때 많이 사용 while / repeat-while Q. 자연수 하나를 입력받아 1부터 해당 숫자 사이의 모든 숫자의 합을 구해 그 합을 반환하는 함수1234567891011121314151617181920212223func sumNumbers(max: Int) -&gt; Int &#123; var num = 1 var sum = 0 repeat &#123; sum += num // num += 1 &#125; while num &lt;= max return sum&#125;func totalNum(max: Int) -&gt; Int &#123; var num = 1 var sum = 0 while num &lt;= max &#123; sum += num num += 1 &#125; return sum&#125;print(totalNum(max: 3))print(sumNumbers(max: 10)) Control Transfer Statement continue - 현재 반복문의 작업을 중단하고 다음 반복 아이템에 대한 작업 수행 break - break가 포함된 해당 제어문의 흐름을 즉각 중단 (반복문, switch 문) fallthrough - switch 문에서 매칭된 case 의 실행이 종료된 후 그 다음의 case 까지 실행 return - 함수를 즉시 종료하고, return type에 해당하는 자료를 반환 Practice123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160// - 학점을 입력받아 각각의 등급을 반환해주는 함수 (4.5 = A+, 4.0 = A, 3.5 = B+ ...)func returnGrade (score : Float) -&gt; String &#123; if score &gt;= 4.5 &#123; return \"A+\" &#125; else if score &gt;= 4.0 &#123; return \"A\" &#125; else if score &gt;= 3.5 &#123; return \"B+\" &#125; else if score &gt;= 3.0 &#123; return \"B\" &#125; else if score &gt;= 2.5 &#123; return \"C+\" &#125; else if score &gt;= 2.0 &#123; return \"C\" &#125; else &#123; return \"F\" &#125;&#125;returnGrade(score: 4.3)// - 특정 달을 숫자로 입력 받아서 문자열로 반환하는 함수 (1 = \"Jan\" , 2 = \"Feb\", ...)func transMonth (month: Int) -&gt; String &#123; switch month &#123; case month where month == 1: return \"Jan\" case month where month == 2: return \"Feb\" case month where month == 3: return \"Mar\" case month where month == 4: return \"Apr\" case month where month == 5: return \"May\" case month where month == 6: return \"Jun\" case month where month == 7: return \"Jul\" case month where month == 8: return \"Aug\" case month where month == 9: return \"Sep\" case month where month == 10: return \"Oct\" case month where month == 11: return \"Nov\" case month where month == 12: return \"Dec\" default : return \"not month\" &#125;&#125;transMonth(month: 12)// - 세 수를 입력받아 세 수의 곱이 양수이면 true, 그렇지 않으면 false 를 반환하는 함수// (switch where clause 를 이용해 풀어볼 수 있으면 해보기)func num (a: Int, b: Int, c: Int) -&gt; Bool &#123; let mul = a * b * c switch mul &#123; case mul where mul &gt; 0: return true case mul where mul == 0: return false default : return false &#125;&#125;num(a: 2, b: 92, c: 0)/*: --- ## Loops --- */// 반복문(for , while , repeat - while)을 이용해 아래 문제들을 구현해보세요.// - 자연수 하나를 입력받아 그 수의 Factorial 을 구하는 함수// (Factorial 참고: 어떤 수가 주어졌을 때 그 수를 포함해 그 수보다 작은 모든 수를 곱한 것)// ex) 5! = 5 x 4 x 3 x 2 x 1 func factorial (a: Int) -&gt; Int &#123; var mul = 1 var num = 1 while num &lt;= a &#123; mul *= num num += 1 &#125; return mul &#125;factorial(a:10)// - 자연수 두 개를 입력받아 첫 번째 수를 두 번째 수만큼 제곱하여 반환하는 함수// (2, 5 를 입력한 경우 결과는 2의 5제곱)func squard (a: Int, b: Int) -&gt; Int &#123; var squ = 1 for _ in 0..&lt;b &#123; squ *= a &#125; return squ&#125;squard(a: 2, b: 3)// - 자연수 하나를 입력받아 각 자리수 숫자들의 합을 반환해주는 함수// (1234 인 경우 각 자리 숫자를 합치면 10)func sumSeat (a: Int) -&gt; Int &#123; let str = String(a) var sum: [Character] = [] var total = 0 for char in str &#123; sum.append(char) &#125; for i in 1...sum.count &#123; total += i &#125; return total&#125;print(sumSeat(a: 21347))/*: --- ## Control Transfer --- */// - 자연수 하나를 입력받아 1부터 해당 숫자 사이의 모든 숫자의 합을 구해 반환하는 함수를 만들되,// 그 합이 2000 을 넘는 순간 더하기를 멈추고 바로 반환하는 함수 func sum (a: Int) -&gt; Int &#123; var sum = 0 var num = 1 while num &lt;= a &#123; if sum &lt;= 2000 &#123; sum += num num += 1 &#125; else &#123; break &#125; &#125; return sum &#125;sum(a: 67)// - 1 ~ 50 사이의 숫자 중에서 20 ~ 30 사이의 숫자만 제외하고 그 나머지를 모두 더해 출력하는 함수func remainSum() -&gt; Int &#123; var sum = 0 for i in 1...50 &#123; if i &gt;= 20 &amp;&amp; i &lt;= 30 &#123; continue &#125; else &#123; sum += i &#125; &#125; return sum&#125;print(remainSum())","categories":[],"tags":[{"name":"swift, iOS","slug":"swift-iOS","permalink":"http://yoursite.com/tags/swift-iOS/"}]}]}