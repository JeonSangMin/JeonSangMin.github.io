<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>TableView 과제</title>
    <url>/2019/12/homework_1218/</url>
    <content><![CDATA[<h1 id="Table-View-Multiple-Selection"><a href="#Table-View-Multiple-Selection" class="headerlink" title="Table View Multiple Selection"></a>Table View Multiple Selection</h1><h2 id="수행-과제"><a href="#수행-과제" class="headerlink" title="수행 과제"></a>수행 과제</h2><ul>
<li>첫 목록은 1부터 지정한 숫자까지 테이블뷰로 출력</li>
<li>갱신(Refresh)할 때 마다 지정한 수의 +50 사이의 숫자로 지정한 수 만큼만 무작위로 출력</li>
<li>출력 되는 숫자들은 중복 값이 있으면 안됨</li>
<li>특정 Cell을 선택하고, 갱신하면 선택 된 숫자만 남기고, 나머지 숫자들만 다시 무작위로 출력</li>
<li>특정 Cell 복수 선택 가능</li>
<li>단, 7보다 낮은 수는 선택 할 수 없도록 처리할 것</li>
</ul><a id="more"></a>
<h2 id="시연-화면"><a href="#시연-화면" class="headerlink" title="시연 화면"></a>시연 화면</h2><ul>
<li>선택 한 값들이 맨 위에 남는지 주목</li>
</ul>
<div class="video-container"><iframe src="//www.youtube.com/embed/3RM965GcBwI" frameborder="0" allowfullscreen></iframe></div>]]></content>
      <categories>
        <category>Homework</category>
      </categories>
      <tags>
        <tag>Swift,</tag>
        <tag>iOS,</tag>
        <tag>TableView</tag>
      </tags>
  </entry>
  <entry>
    <title>UITable View</title>
    <url>/2019/12/17/</url>
    <content><![CDATA[<h1 id="UITable-View"><a href="#UITable-View" class="headerlink" title="UITable View"></a>UITable View</h1><p>테이블 뷰도 여러 스타일이 있음</p><ul>
<li>기본 스타일 <ul>
<li>하나 이상의 행을 가짐</li>
</ul>
</li>
<li>Grouped Table Views<ul>
<li>관련 된 아이템들을 하나의 그룹으로 그룹핑</li>
</ul>
</li>
</ul><h2 id="Life-Cycle"><a href="#Life-Cycle" class="headerlink" title="Life Cycle"></a>Life Cycle</h2><p>보이기 직전에 셀 객체가 재사용 되고, 이미 보였었는데 가려져서 안보이게 되는 경우엔 일시적으로 사라진다</p>]]></content>
      <categories>
        <category>TIL</category>
      </categories>
      <tags>
        <tag>Swift</tag>
        <tag>iOS,</tag>
      </tags>
  </entry>
  <entry>
    <title>로그인 화면 구현하기</title>
    <url>/2019/12/homework-1214/</url>
    <content><![CDATA[<h1 id="Login-Practice"><a href="#Login-Practice" class="headerlink" title="Login Practice"></a>Login Practice</h1><div class="video-container"><iframe src="//www.youtube.com/embed/MJ4aPq1vnog" frameborder="0" allowfullscreen></iframe></div><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">[ 필수 구현 기능 ]</span><br><span class="line"><span class="comment">// 스토리보드, 코드 자유</span></span><br><span class="line"><span class="number">1</span>. 별도 첨부한 이미지와 같이 <span class="type">UI</span> 구현. 원하는 형식으로 바꿔도 무관</span><br><span class="line"><span class="number">2</span>. 텍스트 필드는 <span class="type">UITextFieldDelegate</span> 이용</span><br><span class="line"><span class="number">3</span>. 키보드에 의해 아이디와 비밀번호 textField가 가릴 수 있으므로 </span><br><span class="line">   키보드가 나타날 때는 텍스트필드 위로 끌어올리고 내려갈 때는 같이 내려가기</span><br><span class="line"><span class="number">4</span>. 미리 설정해둔 아이디와 비밀번호가 동일할 경우 로그인이 완료된 메인 화면으로 이동 </span><br><span class="line"><span class="number">5</span>. 메인 화면에서는 입력받은 아이디를 출력하는 <span class="type">Label</span>을 띄우고 </span><br><span class="line">   다시 로그인 화면으로 돌아갈 수 있는 <span class="type">Sign</span> <span class="type">Out</span> 버튼 구성</span><br><span class="line">   </span><br><span class="line">[ 추가 기능 (<span class="number">1</span>) ]</span><br><span class="line"><span class="number">1</span>. 미리 설정해둔 아이디와 비밀번호가 다를 경우 텍스트필드의 바탕화면을 일시적으로 빨갛게 만들었다가 원상 복구하기</span><br><span class="line"><span class="number">2</span>. 텍스트필드에 입력할 수 있는 최대 글자 수는 <span class="number">16</span>자까지</span><br><span class="line"><span class="comment">/*3. 아이디와 비밀번호는 모두 4 ~ 16자 사이여야 함*/</span></span><br><span class="line"></span><br><span class="line">[ 추가 기능 (<span class="number">2</span>) ]</span><br><span class="line"><span class="number">1</span>. 자동 로그인</span><br><span class="line">한 번 로그인에 성공했으면 <span class="type">Sign</span> <span class="type">Out</span>을 하기 전에는 앱을 껏다 켜도 자동 로그인된 상태로 메인 화면으로 진입</span><br><span class="line"><span class="comment">/*2. 회원 가입 페이지</span></span><br><span class="line"><span class="comment">회원가입 페이지를 만든 뒤 회원 가입한 유저의 아이디와 비밀번호를 추가하고</span></span><br><span class="line"><span class="comment">그것으로도 로그인 할 수 있도록 구현하기*/</span></span><br></pre></td></tr></table></figure><a id="more"></a>



<ul>
<li><p>비밀번호 치는 부분은 키보드와 TextField 부분은 녹화 안됨. (보안 때문에 애초에 영상 녹화 할 때 안보이게 처리하는 듯)</p>
</li>
<li><p>오토레이아웃, 위에서 주석 처리 된 부분 구현 안함</p>
</li>
</ul>
<ul>
<li>SceneDelegate</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SceneDelegate</span>: <span class="title">UIResponder</span>, <span class="title">UIWindowSceneDelegate</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> window: <span class="type">UIWindow?</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// MARK: - 로그인 상태 여부에 따라 첫 화면 바꾸기</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">scene</span><span class="params">(<span class="number">_</span> scene: UIScene, willConnectTo session: UISceneSession, options connectionOptions: UIScene.ConnectionOptions)</span></span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> <span class="number">_</span> = (scene <span class="keyword">as</span>? <span class="type">UIWindowScene</span>) <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">        <span class="keyword">let</span> vcText: <span class="type">String</span></span><br><span class="line">        <span class="keyword">let</span> board = <span class="type">UIStoryboard</span>(name: <span class="string">"Main"</span>, bundle: <span class="literal">nil</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (<span class="type">UserDefaults</span>.standard.string(forKey: <span class="string">"id"</span>) == <span class="literal">nil</span>) &#123;</span><br><span class="line">            vcText = <span class="string">"FirstVC"</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="type">UserDefaults</span>.standard.string(forKey: <span class="string">"id"</span>))</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            vcText = <span class="string">"MainVC"</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> vc = board.instantiateViewController(withIdentifier: vcText)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> windowScene = <span class="type">UIApplication</span>.shared.connectedScenes.first <span class="keyword">as</span>? <span class="type">UIWindowScene</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> sceneDelegate = windowScene.delegate <span class="keyword">as</span>? <span class="type">SceneDelegate</span></span><br><span class="line">            window?.rootViewController = vc</span><br><span class="line">            sceneDelegate?.window = window</span><br><span class="line">            window?.makeKeyAndVisible()</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li>ViewController</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  ViewController.swift</span></span><br><span class="line"><span class="comment">//  LoginPractice</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by MyMac on 2019/12/13.</span></span><br><span class="line"><span class="comment">//  Copyright © 2019 sandMan. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 로고 부분</span></span><br><span class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> viewPackage: <span class="type">UIView!</span></span><br><span class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> redView3: <span class="type">UIView!</span></span><br><span class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> redView2: <span class="type">UIView!</span></span><br><span class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> redView1: <span class="type">UIView!</span></span><br><span class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> signInBtn: <span class="type">UIButton!</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 화면 하단 입력부분</span></span><br><span class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> viewPack: <span class="type">UIView!</span></span><br><span class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> emailImage: <span class="type">UIImageView!</span></span><br><span class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> emailTf: <span class="type">UITextField!</span></span><br><span class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> emailUnderLIne: <span class="type">UIView!</span></span><br><span class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> pwImage: <span class="type">UIImageView!</span></span><br><span class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> pwTf: <span class="type">UITextField!</span></span><br><span class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> pwUnderLine: <span class="type">UIView!</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 개인정보</span></span><br><span class="line">    <span class="keyword">let</span> account = [<span class="string">"qqqq"</span> : <span class="string">"qqqq"</span>,</span><br><span class="line">                   <span class="string">"min77@gmail.com"</span> : <span class="string">"1234"</span></span><br><span class="line">    ]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">        setUIViews()</span><br><span class="line">        emailTf.delegate = <span class="keyword">self</span></span><br><span class="line">        pwTf.delegate = <span class="keyword">self</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidAppear</span><span class="params">(<span class="number">_</span> animated: Bool)</span></span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.emailTf.becomeFirstResponder()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"---로그인화면---"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">setUIViews</span><span class="params">()</span></span> &#123;</span><br><span class="line">        viewPackage.layer.cornerRadius = viewPackage.frame.width / <span class="number">4</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 뒤로가기 및 로그아웃</span></span><br><span class="line">    <span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">unwindToFirstView</span><span class="params">(<span class="number">_</span> unwindSegue: UIStoryboardSegue)</span></span> &#123;</span><br><span class="line">        <span class="type">UserDefaults</span>.standard.removeObject(forKey: <span class="string">"id"</span>)</span><br><span class="line">        emailTf.text = <span class="string">""</span></span><br><span class="line">        pwTf.text = <span class="string">""</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">unwindFromSignUp</span><span class="params">(<span class="number">_</span> unwindSegue: UIStoryboardSegue)</span></span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// MARK: - 로그인 구현</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">shouldPerformSegue</span><span class="params">(withIdentifier identifier: String, sender: <span class="keyword">Any</span>?)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> id = emailTf.text, <span class="keyword">let</span> pw = pwTf.text <span class="keyword">else</span> &#123;<span class="keyword">return</span> <span class="literal">false</span>&#125;</span><br><span class="line">        <span class="keyword">if</span> account[id] == pw&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 아이디, 비번 틀리면 로그인 안되고 텍스트 필드 빨갛게 반짝</span></span><br><span class="line">            <span class="type">UIView</span>.animate(withDuration: <span class="number">0.3</span>, animations: (&#123;</span><br><span class="line">                <span class="keyword">self</span>.emailTf.backgroundColor = .red</span><br><span class="line">                <span class="keyword">self</span>.emailTf.backgroundColor = .<span class="keyword">none</span></span><br><span class="line">                </span><br><span class="line">                <span class="keyword">self</span>.pwTf.backgroundColor = .red</span><br><span class="line">                <span class="keyword">self</span>.pwTf.backgroundColor = .<span class="keyword">none</span></span><br><span class="line">            &#125;))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">prepare</span><span class="params">(<span class="keyword">for</span> segue: UIStoryboardSegue, sender: <span class="keyword">Any</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> mainVC = segue.destination <span class="keyword">as</span>? <span class="type">MainViewController</span><span class="comment">//, let id = emailTf.text</span></span><br><span class="line">            <span class="keyword">else</span> &#123;<span class="keyword">return</span>&#125;</span><br><span class="line">        mainVC.email = <span class="type">UserDefaults</span>.standard.string(forKey: <span class="string">"id"</span>) ?? <span class="string">"nil"</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// MARK: - transform 올리기, 내리기</span></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">ViewController</span>:<span class="title">UITextFieldDelegate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">textFieldDidBeginEditing</span><span class="params">(<span class="number">_</span> textField: UITextField)</span></span> &#123;</span><br><span class="line">        <span class="type">UIView</span>.animate(withDuration: <span class="number">0.25</span>, animations: (&#123;</span><br><span class="line">            <span class="keyword">self</span>.viewPack.transform = <span class="type">CGAffineTransform</span>(translationX: <span class="number">0</span>, y: -<span class="number">130</span>)</span><br><span class="line">        &#125;))</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// didEndEditing은 어떤 식이든 수정이 끝나서 텍스트필드에서 포커싱이 해제 된 이후 실행된다.</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 리턴 버튼으로 키보드 내리기</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">textFieldShouldReturn</span><span class="params">(<span class="number">_</span> textField: UITextField)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        textField.resignFirstResponder()</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 다른 곳 터치하면 키보드 내리기</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">touchesBegan</span><span class="params">(<span class="number">_</span> touches: Set&lt;UITouch&gt;, with event: UIEvent?)</span></span>&#123;</span><br><span class="line">        <span class="keyword">self</span>.view.endEditing(<span class="literal">true</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 수정 끝나면 transform 내리기</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">textFieldDidEndEditing</span><span class="params">(<span class="number">_</span> textField: UITextField)</span></span> &#123;</span><br><span class="line">        <span class="type">UserDefaults</span>.standard.<span class="keyword">set</span>(emailTf.text, forKey: <span class="string">"id"</span>)</span><br><span class="line">        <span class="type">UIView</span>.animate(withDuration: <span class="number">0.25</span>, animations: (&#123;</span><br><span class="line">            <span class="keyword">self</span>.viewPack.transform = .identity</span><br><span class="line">        &#125;))</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 글자수 제한 =&gt; 16자 이상이면 아예 안써짐</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">textField</span><span class="params">(<span class="number">_</span> textField: UITextField, shouldChangeCharactersIn range: NSRange, replacementString string: String)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> currentText = textField.text ?? <span class="string">""</span></span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> stringRange = <span class="type">Range</span>(range, <span class="keyword">in</span>: currentText) <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="literal">false</span> &#125;</span><br><span class="line">        <span class="keyword">let</span> updatedText = currentText.replacingCharacters(<span class="keyword">in</span>: stringRange, with: string)</span><br><span class="line">        <span class="keyword">return</span> updatedText.<span class="built_in">count</span> &lt;= <span class="number">16</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li>MainViewController</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  MainViewController.swift</span></span><br><span class="line"><span class="comment">//  LoginPractice</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by MyMac on 2019/12/13.</span></span><br><span class="line"><span class="comment">//  Copyright © 2019 sandMan. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainViewController</span>: <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> emailIndicator: <span class="type">UILabel!</span></span><br><span class="line">    <span class="keyword">var</span> email = <span class="string">""</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">        emailIndicator.text = <span class="type">UserDefaults</span>.standard.string(forKey: <span class="string">"id"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">signOutBtn</span><span class="params">(<span class="number">_</span> sender: UIButton)</span></span> &#123;</span><br><span class="line">      <span class="comment">// SignOut 버튼 누르면 rootViewController 교체</span></span><br><span class="line">        <span class="keyword">let</span> board = <span class="type">UIStoryboard</span>(name: <span class="string">"Main"</span>, bundle: <span class="literal">nil</span>)</span><br><span class="line">         <span class="keyword">let</span> vc = board.instantiateViewController(withIdentifier:<span class="string">"FirstVC"</span>)</span><br><span class="line">        <span class="keyword">if</span> #available(iOS <span class="number">13.0</span>, *) &#123;</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> windowScene = <span class="type">UIApplication</span>.shared.connectedScenes.first <span class="keyword">as</span>? <span class="type">UIWindowScene</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> window = <span class="type">UIWindow</span>(windowScene: windowScene)</span><br><span class="line">                <span class="keyword">let</span> sceneDelegate = windowScene.delegate <span class="keyword">as</span>? <span class="type">SceneDelegate</span></span><br><span class="line">                window.rootViewController = vc</span><br><span class="line">                sceneDelegate?.window = window</span><br><span class="line">                window.makeKeyAndVisible()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidAppear</span><span class="params">(<span class="number">_</span> animated: Bool)</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"---메인화면---"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">removeAndgoFirst</span><span class="params">(<span class="number">_</span> sender: UIButton)</span></span> &#123;</span><br><span class="line">        <span class="type">UserDefaults</span>.standard.removeObject(forKey: <span class="string">"id"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Homework</category>
      </categories>
      <tags>
        <tag>Swift</tag>
        <tag>iOS,</tag>
      </tags>
  </entry>
  <entry>
    <title>StackView</title>
    <url>/2019/12/homework-1216/</url>
    <content><![CDATA[<h1 id="AutoLayout-StackView"><a href="#AutoLayout-StackView" class="headerlink" title="AutoLayout_StackView"></a>AutoLayout_StackView</h1><p><img src="https://user-images.githubusercontent.com/15086391/70906298-60fb3a00-2049-11ea-8a9d-9f2e079fe203.png" alt="스크린샷 2019-12-16 오후 8 54 56"></p>]]></content>
      <categories>
        <category>Homework</category>
      </categories>
      <tags>
        <tag>Swift</tag>
        <tag>iOS,</tag>
      </tags>
  </entry>
  <entry>
    <title>AutoLayout</title>
    <url>/2019/12/16/</url>
    <content><![CDATA[<h1 id="AutoLayout-2nd"><a href="#AutoLayout-2nd" class="headerlink" title="AutoLayout (2nd)"></a>AutoLayout (2nd)</h1><h2 id="Intrinsic-Content-Size"><a href="#Intrinsic-Content-Size" class="headerlink" title="Intrinsic Content Size"></a>Intrinsic Content Size</h2><ul>
<li>UIView는 위치와 크기를 정해주어야 함 (위치, 크기)</li>
</ul><p>Leading, trailing 을 이용해서 사이즈를 정해주던지, 직접 width height를 정해주던지</p><ul>
<li>UILable은 UIView와는 다르게 top과 leading만 맞춰줘도 충분함. 왜?</li>
</ul><a id="more"></a>


<p>label은 어떠한 정해진 크기를 이미 가지고 있음 (font size, text 등으로 label의 크기가 결정 됨)</p>
<p>단 label은 trailing 값이 정해지면, 크기가 오른쪽으로 늘어나지 않고 왼쪽으로 늘어남</p>
<p>UIView도 크기가 정해지면 leading과 top만 잡아줘도 위치는 정해짐 </p>
<ul>
<li>UIButton도 Label처럼 잡아주면 된다.</li>
</ul>
<p>고유의 컨텐츠 사이즈(Intrinsic Content Size) 가 정해짐</p>
<ul>
<li>UIImage는 두 가지 경우가 있음 (이미지가 있을 때, 없을 때)</li>
</ul>
<p>없을 때는 UIVIew와 같은 상태</p>
<p>이미지가 있을 때는 이미지 뷰의 크기를 알 방법이 없었지만, </p>
<p>이미지가 들어가는 순간 이미지의 사이즈가 UIImageView의 크기가 됨</p>
<ul>
<li><p>UISilder는 위치와 width 값만 잡아줘도 됨</p>
</li>
<li><p>datePicker는 위치만 잡아줘도 됨</p>
</li>
</ul>
<h2 id="CH-CR"><a href="#CH-CR" class="headerlink" title="CH / CR"></a>CH / CR</h2><ul>
<li><p>Content hugging : 텍스트를 예로 들면, hugging이 정해지면, 크기가 제한되기 때문에 글이 길어져도 안커진다</p>
<ul>
<li>줄어들 때와 관련이 있음</li>
</ul>
</li>
<li><p>Content Compression Resistance Priority :</p>
<ul>
<li>늘어날 때와 관련이 있음</li>
</ul>
</li>
</ul>
<h2 id="Priority-우선-순위"><a href="#Priority-우선-순위" class="headerlink" title="Priority (우선 순위)"></a>Priority (우선 순위)</h2><p>예를 들면 한 UIVIew에 top이 두 개임, 하나는 100만큼, 하나는 150임 =&gt; 두 가지 제약 조건이 충돌이 남</p>
<ul>
<li><p>이 때 100짜리에 우선 순위를 좀 더 높게 주면, 150 짜리는 일단 무시 됨</p>
</li>
<li><p>우선 순위를 코드로 지정 할 때는 아래와 같이 사용할 수 있음</p>
</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">UIVIew</span>.<span class="keyword">required</span></span><br><span class="line"><span class="type">UIView</span>.high</span><br></pre></td></tr></table></figure>





<h1 id="Dynamic-AutoLayout-Example"><a href="#Dynamic-AutoLayout-Example" class="headerlink" title="Dynamic AutoLayout Example"></a>Dynamic AutoLayout Example</h1><p>제약 조건 자체를 IBOutlet으로 연결한 후, 여러 방법으로 컨트롤하여 위치를 동적으로 변경 할 수 있다.</p>
<ol>
<li><strong>constant 변경, multiplier변경</strong></li>
</ol>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// center horizentally 제약조건</span></span><br><span class="line"><span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> centerXConstraint: <span class="type">NSLayoutConstraint!</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidAppear</span><span class="params">(<span class="number">_</span> animated: Bool)</span></span> &#123;</span><br><span class="line">        centerXConstraint.constant = -<span class="number">100</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<ol start="2">
<li><strong>우선순위 변경</strong></li>
</ol>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">centerXConstraint.priority = .defaultHigh <span class="comment">// 750</span></span><br></pre></td></tr></table></figure>



<ol start="3">
<li><strong>isActive</strong></li>
</ol>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="meta">@IBOutlet</span> <span class="keyword">var</span> centerXConstraint: <span class="type">NSLayoutConstraint!</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidAppear</span><span class="params">(<span class="number">_</span> animated: Bool)</span></span> &#123;</span><br><span class="line">  </span><br><span class="line">   <span class="comment">// isActive를 false로 꺼놓으면 제약조건을 지운 것과 같은 상태</span></span><br><span class="line">   <span class="comment">// (weak일 때)false로 한번이라도 설정이 되면 RC가 0이 되어서 다시 true로 켜도 안됨</span></span><br><span class="line">   <span class="comment">// weak을 지우면 false로 했더라도 다시 true로 바꿀 수 있음</span></span><br><span class="line">	centerXConstraint.isActive = <span class="literal">false</span></span><br><span class="line">       </span><br><span class="line">	centerXConstraint.constant = <span class="number">200</span></span><br><span class="line">	centerXConstraint.isActive = <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>















]]></content>
      <categories>
        <category>TIL</category>
      </categories>
      <tags>
        <tag>Swift</tag>
        <tag>iOS,</tag>
      </tags>
  </entry>
  <entry>
    <title>Animation</title>
    <url>/2019/12/13/</url>
    <content><![CDATA[<h1 id="Animation"><a href="#Animation" class="headerlink" title="Animation"></a>Animation</h1><ul>
<li><p>UIWindow - login - main 순으로 실행될 건데, 로그인을 한번 한 이후 자동로그인이 되어서 UIWindow - Main으로 이어지게 되려면?</p>
</li>
<li><p>순서를 바꿔서 UIWindow - main - login인데 로그인이 되어있는 상태라면 main까지만 실행되게해도 됨</p>
</li>
<li><p>present로 뷰를 넘기지 말고, 아예 window를 바꿔버리는 경우도 많음 (RC없어짐)</p>
</li>
</ul><a id="more"></a>
<ul>
<li>SecondView를 window로 바꾸기 (iOS13 이상 버전에서 사용)</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="meta">@IBAction</span> <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">didTapButton</span><span class="params">(<span class="number">_</span> sender:UIButton)</span></span> &#123;</span><br><span class="line">  <span class="keyword">if</span> #available(iOS <span class="number">13.0</span>. *) &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> windowScene = <span class="type">UIApplication</span>.shared.connectedScenes.first <span class="keyword">as</span>? <span class="type">UIWindowScene</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> window = <span class="type">UIWibdow</span>(windowScene: windowScene)</span><br><span class="line">      window = rootViewController = <span class="type">SecondViewController</span>()</span><br><span class="line"></span><br><span class="line">      <span class="keyword">let</span> sceneDelegate = windowScene.delegate <span class="keyword">as</span>? <span class="type">SceneDelegate</span></span><br><span class="line">      sceneDelegate?.window = window</span><br><span class="line">      window.makeKeyAndVisible()	</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="type">UIApplication</span>.shared.delegate <span class="keyword">as</span>? <span class="type">AppDelegate</span> <span class="keyword">as</span>! <span class="type">AppDelegate</span></span><br><span class="line">      appDelegate.window = <span class="type">UIWindow</span>(frame:<span class="type">UIScreen</span>.main.bounds)</span><br><span class="line">      window.rootViewCOntroller = <span class="type">ScondViewController</span>()</span><br><span class="line">      window.makeKaeyAndVisible()</span><br><span class="line">      appDelegate.window = window</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> 자동로그인 on &#123;</span><br><span class="line">	메인</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  로그인</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>TIL</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>Swift,</tag>
      </tags>
  </entry>
  <entry>
    <title>AutoLayout</title>
    <url>/2019/12/12/</url>
    <content><![CDATA[<h1 id="AutoLayout"><a href="#AutoLayout" class="headerlink" title="AutoLayout"></a>AutoLayout</h1><p><strong>[프레임 기반]</strong></p><ul>
<li><p>원점의 위치와 크기를 통해 그릴 영역 계산</p>
</li>
<li><p>가장 유연, 빠른 성능</p>
</li>
<li><p>동적인 변화에 대한 설계 및 디버그, 유지관리에 많은 노력 필요</p>
</li>
</ul><h2 id="Auto-Resizing"><a href="#Auto-Resizing" class="headerlink" title="Auto Resizing"></a><strong>Auto Resizing</strong></h2><p><img src="https://user-images.githubusercontent.com/15086391/70682741-24df7680-1ce3-11ea-83f4-6a0414c1163c.png" alt="스크린샷 2019-12-12 오후 1 27 02"></p><p>안에있는 화살표를 체크하면 width, height 값에 영향, </p><p>바깥 화살표를 선택하면 바깥의 view와의 margin에 영향</p><a id="more"></a>




<p><u>설정을 했을 때 슈퍼뷰의 크기가 변할 때 서브뷰가 어떻게 반응할 것인가 설정해주는것</u></p>
<h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul>
<li>제약조건을 이용해 유저 인터페이스 정의</li>
<li>뷰 간의 관계 설정을 통한 크기와 위치 계산</li>
<li>내/외부 변경 사항에 동적으로 반응</li>
<li>모든 뷰에 다 설정을 해주어야함, 일부만 제약설정을 해주면 오히려 잘 되던것도 안됨 (뷰끼리 관계를 맺어줬을 때)</li>
<li>뷰 간 관계가 설정되어있지 않다면 일부만 설정해도 상관없음</li>
</ul>
]]></content>
      <categories>
        <category>TIL</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>Swift,</tag>
      </tags>
  </entry>
  <entry>
    <title>Delegate</title>
    <url>/2019/12/10/</url>
    <content><![CDATA[<p>[13:00 ~ 14:00]  - <strong>DelegateExample</strong></p><p>커스텀뷰를 만들어서 UIView의 클래스를 CustomView로 바꾸고, </p><p>커스텀뷰에서는 배경색이 바뀔 때마다, 해당 색을 출력하는 기능을 만듦 </p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomView</span>: <span class="title">UIView</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 내가 어떤 뷰를 정의해서 쓰려고 하는 거</span></span><br><span class="line">    <span class="comment">// 맨처음에 스토리보드에 만든 뷰를 커스텀뷰 class로 변경!(identity inspector)</span></span><br><span class="line">    <span class="comment">// 값이 변경될 때마다 해당 값 출력하려면? (프로퍼티 옵저버 못씀)</span></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">var</span> backgroundColor: <span class="type">UIColor?</span> &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">super</span>.backgroundColor &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123;</span><br><span class="line">            <span class="comment">// 이거 super 생략하면, self인데 그렇게 되면 위에 background 컬러에 set 됨, 무한 재귀</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 배경색이 nil이면 black아니면 newValue</span></span><br><span class="line">            <span class="keyword">super</span>.backgroundColor = newValue ?? .black</span><br><span class="line">            <span class="keyword">if</span> newValue == .red &#123;</span><br><span class="line">                <span class="keyword">super</span>.backgroundColor = .blue</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"새로 변경 될 배경색은 : "</span>, <span class="keyword">self</span>.backgroundColor!)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a>




<p>그런데 ViewController에서는 이렇게 red를 blue로 바꿔주는 기능, nil을 black으로 바꿔주는 기능이 구현되어있는 </p>
<p>CustomView 객체를 사용하는데,</p>
<p><u>NextViewController에서는 같은 CustomView를 사용하는데, 일부 기능만 바꿔서 쓰고, print 메소드는 그대로 사용하고 싶음</u></p>
<p>이럴 때 사용하는 것이 <strong>Delegate</strong> </p>
<h1 id="Delegate"><a href="#Delegate" class="headerlink" title="Delegate"></a>Delegate</h1><ul>
<li>특정 로직을 내가 아닌 다른 객체가 대신 구현하도록 위임하는 형태의 디자인 패턴</li>
</ul>
<p>AppDelegate도 똑같은 거임.</p>
<p>[오후]</p>
]]></content>
      <categories>
        <category>TIL</category>
      </categories>
      <tags>
        <tag>Swift</tag>
        <tag>iOS,</tag>
      </tags>
  </entry>
  <entry>
    <title>Struct, ARC</title>
    <url>/2019/12/9/</url>
    <content><![CDATA[<h1 id="Struct"><a href="#Struct" class="headerlink" title="Struct"></a>Struct</h1><h2 id="구조체와-클래스-비교"><a href="#구조체와-클래스-비교" class="headerlink" title="구조체와 클래스 비교"></a>구조체와 클래스 비교</h2><ul>
<li>공통점<ul>
<li>값을 저장하기 위한 프로퍼티</li>
<li>기능을 제공하기 위한 메서드</li>
<li>초기 상태를 설정하기 위한 생성자</li>
<li>기본 구현에서 기능을 추가하기 위한 확장(Extension)</li>
<li>특정 값에 접근할 수 있는 첨자(Subscript)</li>
<li>특정한 기능을 수행하기 위한 프로토콜 채택</li>
<li>Upper Camel Case 사용</li>
</ul>
</li>
</ul><a id="more"></a>
<ul>
<li>[클래스만 제공하는 기능]<ul>
<li>상속 -&gt; 구조체는 상속 안됨</li>
<li>소멸자 (Deinitializer)</li>
<li>참조 카운트 (ARC와 관련 있을 듯)</li>
</ul>
</li>
</ul>
<h2 id="값-타입-vs-참조-타입"><a href="#값-타입-vs-참조-타입" class="headerlink" title="값 타입 vs 참조 타입"></a>값 타입 vs 참조 타입</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> name = <span class="string">"토리"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Cat</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> name = <span class="string">"릴리"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> dog = <span class="type">Dog</span>() <span class="comment">// 0x1234 -&gt; Dog() // let dog는 Dog클래스를 가리키는 주소값이 고정된 것임</span></span><br><span class="line"><span class="keyword">let</span> cat = <span class="type">Cat</span>() <span class="comment">// Cat() 요게 stack에 직접 들어감 그래서 밑에서 name = '릴리'를 '토리'로 바꾸는게 안되는 거임 상수는 변경할 수 없는 것 처럼</span></span><br><span class="line"></span><br><span class="line">dog.name = <span class="string">"릴리"</span> <span class="comment">// 토리 -&gt; 릴리로 변경 시도</span></span><br><span class="line">cat.name = <span class="string">"토리"</span> <span class="comment">// 릴리 -&gt; 토리로 변경 시도 (X)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 값은 스텍에 저장되고,</span></span><br><span class="line"><span class="comment">// 참조타입은 힙 영역에 포인터가 저장됨</span></span><br></pre></td></tr></table></figure>















<h1 id="ARC"><a href="#ARC" class="headerlink" title="ARC"></a>ARC</h1><ul>
<li>다른 언어의 가비지 컬렉터는 정기적으로 동작하여 런타임 중에 더 이상 사용되지 않는 메모리를 반환하는 방식</li>
<li>레퍼런스 카운트가 0이면 메모리에서 해제되고, 아니면 해제 되지 않음</li>
</ul>
<h2 id="RC-Reference-Counting"><a href="#RC-Reference-Counting" class="headerlink" title="RC (Reference Counting)"></a>RC (Reference Counting)</h2><p>변수가 생성되는 순간 카운트 + 1</p>
<p>참조 되는 순간마다  + 1</p>
<p>릴리즈 되는 순간  - 1</p>
<p>0이 되는 순간 메모리에서 제거 됨</p>
<p>-&gt; 이 과정을 ARC는 자동으로 해주는 것임 Auto!</p>
<h2 id="Leak-vs-Dangling-Pointer"><a href="#Leak-vs-Dangling-Pointer" class="headerlink" title="Leak vs Dangling Pointer"></a>Leak vs Dangling Pointer</h2><p>Alloc, init (할당)</p>
<p>release (해제)</p>
<ul>
<li><p>할당과 해제는 균형이 많아야 함</p>
</li>
<li><p>할당이 많으면 메모리가 낭비되고, 해제가 많으면 허상이 발생함</p>
</li>
<li><p>근데 이것을 수동으로 직접 코드를 입력하여 관리를 해줘야 했음 (빡셈)</p>
</li>
<li><p>수동으로 하기에는 너무 어려워서 초보자들에게 허들이 높았고, 숙련자들에게도 쉽지 않았음</p>
</li>
<li><p>기능에 대한 코드외에 메모리 관리에 대한 코드까지 추가되어서 관리도 어려움</p>
</li>
</ul>
<h2 id="ARC-1"><a href="#ARC-1" class="headerlink" title="ARC"></a>ARC</h2><p>위에 나열한 어려움 등 때문에 Auto Reference Counting이 발표 됨 (2011년)</p>
<ul>
<li>RC 자동 관리 방식 (wwdc 2011 발표)</li>
<li>컴파일러가 개발자를 대신하여 메모리 관리 코드를 적절한 위치에 자동으로 삽입</li>
<li>GC (Garbage Collector) 처럼 런타임이 아닌 컴파일 단에서 처리함 (Heap 스캔이 필요없음, 앱 일시 정지 현상 없음)</li>
<li>메모리 관리 이슈 줄고, 코딩자체에 집중!</li>
<li>클래스의 인스턴스에만 적용 (참조 타입)</li>
<li>활성화 된 참조 카운트가 하나라도 있을 경우 메모리에서 해제 되지 않음<ul>
<li>강한 참조 (Strong) : 기본값 참조 될 때마다 카운트 1 증가</li>
<li>약한 참조, 미소유 참조 : 참조 카운트 증가 X</li>
</ul>
</li>
</ul>
<h2 id="ARC-in-Struct"><a href="#ARC-in-Struct" class="headerlink" title="ARC in Struct"></a>ARC in Struct</h2><ul>
<li>(초기화 했을 때) 스텍 영역에 직접 값이 들어감</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> x, y: <span class="type">Double</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> point1 = <span class="type">Point</span>(x: <span class="number">0</span>, y: <span class="number">0</span>)</span><br><span class="line"><span class="keyword">let</span> point2 = point1</span><br><span class="line"><span class="type">Point2</span>.x = <span class="number">5</span></span><br></pre></td></tr></table></figure>

<p>이 때 참조 타입은 point1의 값도 같이 바뀐다. 왜? 실제 값은 힙에 저장되어있고, 스텍에 저장되어있는 포인터는 같은 위치를 가리키니깐.</p>
<p>그런데 구조체에서는 point2의 x값과 point1의 x 값은 서로 다르다. x 값이 스텍에 직접 저장되어 있기 때문이다.</p>
<p>클래스에서 x 값은 힙에 저장되어 있음</p>
<h2 id="Strong-Reference-Cycle"><a href="#Strong-Reference-Cycle" class="headerlink" title="Strong Reference Cycle"></a>Strong Reference Cycle</h2><ul>
<li>RC가 0이 되지 않게 만들어버리는 상황! (주의해야함)</li>
<li>객체에 접근 가능한 모든 연결을 끊었는데도 순환참조로 인해 메모리에 계속 쌓이는 상황, 오동작이나 오류를 발생시킬 수 있음</li>
</ul>
<p>순환참조!</p>
<p>(정리해줄것)</p>
<h2 id="Weak-Reference"><a href="#Weak-Reference" class="headerlink" title="Weak Reference"></a>Weak Reference</h2><p>순환참조에 빠지지 않도록 weak을 선언하면 RC가 올라가지 않으므로 하나가 해제되면 자연스레 0이되어서 순환참조에 빠지는 것을 예방할 수 있음</p>
<p>강사님 수업자료 애니메이션으로 순서 파악해야함. </p>
]]></content>
      <categories>
        <category>TIL</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title>Sigleton, User Defaluts</title>
    <url>/2019/12/6/</url>
    <content><![CDATA[<h1 id="Sigleton"><a href="#Sigleton" class="headerlink" title="Sigleton"></a>Sigleton</h1><ul>
<li>특정 클래스의 인스턴스에 접근할 때 항상 동일한 인스턴스만을 반환하도록 하는 설계 패턴</li>
<li>한 번 생성된 이후에는 프로그램이 종료될 때까지 항상 메모리에 상주</li>
<li>어플리케이션에서 유일하게 하나만 필요한 객체에 사용</li>
<li>UIApplication, AppDelegate 등</li>
</ul><a id="more"></a>
<p><strong>자기 타입을 생성하여 상수에 받아놓고 static! 그리고 접근제어자 private로 외부에서 생성자를 호출하지 못하게 막아놓는거!</strong></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NormalClass</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> x = <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> someObject1 = <span class="type">NormalClass</span>()</span><br><span class="line">someObject1.x = <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> someObject2 = <span class="type">NormalClass</span>()</span><br><span class="line">someObject2.x = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> someObject3 = <span class="type">NormalClass</span>()</span><br><span class="line">someObject3.x = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">someObject1.x <span class="comment">// 5</span></span><br><span class="line">someObject2.x <span class="comment">// 1</span></span><br><span class="line">someObject3.x <span class="comment">// 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 각기 다른 객체임! 객체가 여러개야!</span></span><br></pre></td></tr></table></figure>



<ul>
<li>static var, static let은 타입 프로퍼티이다!</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingletonClass</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 자기 자신 클래스의 생성자를 타입 프로퍼티에 할당</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">let</span> shared = <span class="type">SingletonClass</span>() <span class="comment">//</span></span><br><span class="line">  <span class="keyword">var</span> x = <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// shared를 호출하면 생성자를 호출한 것과 같은 결과</span></span><br><span class="line"><span class="keyword">let</span> singleton1 = <span class="type">SingletonClass</span>.shared</span><br><span class="line">singleton1.x = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> singleton2 = <span class="type">SingletonClass</span>.shared</span><br><span class="line">singleton2.x = <span class="number">20</span></span><br><span class="line"></span><br><span class="line">singleton1.x   <span class="comment">// 20</span></span><br><span class="line">singleton2.x   <span class="comment">// 20</span></span><br></pre></td></tr></table></figure>

<p>위의 싱글턴 패턴은</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="type">Normal</span> &#123;</span><br><span class="line"> <span class="keyword">let</span> name = <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 아래와 같은 의미!</span></span><br><span class="line"><span class="keyword">let</span> nor1 = <span class="type">Normal</span>()</span><br><span class="line"><span class="keyword">let</span> nor2 = nor1</span><br></pre></td></tr></table></figure>



<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 이 객체는 프로퍼티에 담지 않았기 때문에 생성되자마자 사라짐</span></span><br><span class="line"><span class="type">SingletonClass</span>().x = <span class="number">99</span></span><br><span class="line"><span class="comment">// 얘는 그래서 새로 생긴거고, shared를 통해서 만들지 않았음</span></span><br><span class="line"><span class="type">SingletonClass</span>().x   <span class="comment">//</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 싱글턴 이기 때문에 위에서 저장한 30이 출력됨</span></span><br><span class="line">singleton1.x  <span class="comment">//</span></span><br><span class="line">singleton2.x  <span class="comment">//</span></span><br></pre></td></tr></table></figure>



<h1 id="User-Defaults"><a href="#User-Defaults" class="headerlink" title="User Defaults"></a>User Defaults</h1><ul>
<li><p>iOS 에서 데이터를 파일에 저장하기 위해 사용하는 대표적인 클래스 중 하나</p>
</li>
<li><p>간단한 정보를 저장하고 불러올 때 사용하며 내부적으로 pList 파일로 저장</p>
</li>
<li><p>메모리에 저장하면 껐다키면 없어져있음! 휘발성임 </p>
</li>
<li><p>비교적 느리다. (상대적으로)</p>
</li>
</ul>
]]></content>
      <categories>
        <category>TIL</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title>4</title>
    <url>/2019/12/4/</url>
    <content><![CDATA[<h1 id="타입-캐스팅-Type-Casting"><a href="#타입-캐스팅-Type-Casting" class="headerlink" title="타입 캐스팅 (Type Casting)"></a>타입 캐스팅 (Type Casting)</h1><p>Super Class 로 부터 상속 된 Sub Class는 자기 자신의 타입이기도 하면서, 동시에 SuperClass의 타입이기도 하다.</p><p>super의 특성을 물려받기 때문이다. </p><p>상속을 거듭해 갈 수록 sub는 보다 구체화 되어간다. </p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Super Class </span></span><br><span class="line"><span class="type">Class</span> <span class="type">Vehicle</span> &#123;</span><br><span class="line">	<span class="keyword">var</span> currentSpeed = <span class="number">0.0</span></span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">func</span> <span class="title">accelerate</span><span class="params">()</span></span> &#123;</span><br><span class="line">		<span class="keyword">self</span>.currentSpeed += <span class="number">1</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Sub Class</span></span><br><span class="line"><span class="type">Class</span> <span class="type">Car</span>: <span class="type">Vehicle</span> &#123;</span><br><span class="line">	<span class="keyword">var</span> gear: <span class="type">Int</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="type">Int</span>(<span class="keyword">self</span>.currentSpeed / <span class="number">20</span>) + <span class="number">1</span></span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">func</span> <span class="title">wiper</span><span class="params">()</span></span> &#123;</span><br><span class="line">		<span class="built_in">print</span>(<span class="string">"창을 닦는다"</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> trans: <span class="type">Vehicle</span> = <span class="type">Car</span>()</span><br></pre></td></tr></table></figure><a id="more"></a>




<p>sub인 Car 클래스는 super의 속성을 전부 가지고 있으면서 추가로 gear 변수와 wiper 메소드를 가지고 있다.(보다 구체화)</p>
<p>이러한 이유로 <strong>SubClass는 SuperClass 타입이 될 수 있지만 SuperClass는 SubClass 타입이 될 수 없다</strong></p>
<p><em>상속은 받았지만 기능이 더해지지 않은 sub 클래스여도 super는 sub 타입이 될 수 없다</em></p>
<ul>
<li>Q. 상위 클래스 타입으로 선언하여 객체를 초기화 한다면, 사용할 수 있는 프로퍼티나 메소드의 범위가 줄어드는 것이나 마찬가지인데, 굳이 상위 타입으로 선언해서 사용하는 이유가 뭔가요?</li>
</ul>
<p>그 반대이다 오히려 넓어진다. 예를 들어 Vehicle -&gt; Car -&gt; SUV 순으로 상속이 된다고 가정을 해보면,</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">move</span><span class="params">(param: SUV)</span></span> &#123;</span><br><span class="line">	param.accelerate()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">move</span><span class="params">(param: Vehicle)</span></span> &#123;</span><br><span class="line">	param.accelerate()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 위의 move에서는 SUV 클래스의 인스턴스만 인자값으로 받을 수 있지만, 아래의 move는 Vehicle 클래스나 이를 상속받은 모든 클래스를 다 사용할 수 있다.</p>
<ul>
<li>내가 바보 3대를 노예로 부려먹으려 한다! 근데 아들만 제압하고 아버지, 할아버지를 제압하지 못하면 아들 밖에 못부려먹지만, 할아버지를 제압하면 할아버지, 아버지, 아들까지 다 부려 먹을 수 있음 (인성 ㅎㄷㄷ)</li>
</ul>
<p>배열, 딕셔너리도 마찬가지</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> list: [<span class="type">Vehicle</span>]()</span><br><span class="line"></span><br><span class="line">list.append(<span class="type">Vehicle</span>())</span><br><span class="line">list.append(<span class="type">Car</span>())</span><br><span class="line">list.append(<span class="type">SUV</span>())</span><br></pre></td></tr></table></figure>



<h2 id="타입-비교"><a href="#타입-비교" class="headerlink" title="타입 비교"></a>타입 비교</h2><ul>
<li>스위프트는 타입비교 연산자 is를 지원한다 is 왼쪽에는 인스턴스, 오른쪽에는 타입을 명시하여 타입을 비교한다.</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">SUV</span>() <span class="keyword">is</span> <span class="type">SUV</span> <span class="comment">// true</span></span><br><span class="line"><span class="type">SUV</span>() <span class="keyword">is</span> <span class="type">Car</span> <span class="comment">// true</span></span><br><span class="line"><span class="type">SUV</span>() <span class="keyword">is</span> <span class="type">Vehicle</span> <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="type">Car</span>() <span class="keyword">is</span> <span class="type">SUV</span> <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<p>인스턴스를 할당 받을 수 있는 타입이면 true, 아니면 false이다.  </p>
<p>SUV 객체는 SUV 타입, Car타입, Vehicle 타입이 될 수 있으므로 true, Car 객체는 SUV보다 상위 타입이기 때문에 false</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 그런데 타입이 하나로 명확하게 정해지지 않은 경우?</span></span><br><span class="line"><span class="comment">// is를 이용하여 이런경우에는 이렇게, 저런경우에는 저렇게!</span></span><br><span class="line"><span class="keyword">let</span> someAnyArr: [<span class="type">Any</span>] = [<span class="number">1</span>, <span class="number">2.0</span>, <span class="string">"3"</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> someAnyArr &#123;</span><br><span class="line">  <span class="keyword">if</span> data <span class="keyword">is</span> <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Int type data :"</span>, data)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> data <span class="keyword">is</span> <span class="type">Double</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Double type data : "</span>, data)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"String type data : "</span>, data)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> human: <span class="type">Human</span> = <span class="type">Student</span>()</span><br><span class="line">type(of: human)</span><br><span class="line"><span class="comment">// 해당 변수의 타입 human vs 실제 데이터의 타입 student</span></span><br><span class="line"><span class="comment">// 컴파일 과정에서는 human 타입으로 인식하지만, 런타임 과정에서는(실제 앱을 실행할 때) student인 것</span></span><br></pre></td></tr></table></figure>



<h2 id="Type-Check-타입-확인"><a href="#Type-Check-타입-확인" class="headerlink" title="Type Check (타입 확인)"></a>Type Check (타입 확인)</h2><p>제네릭 : 값이 들어오는 순간 결정 되는 거</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Generic</span></span><br><span class="line"><span class="comment">// 받는 인자의 타입에 따라 타입이 결정됨, 미리 타입을 선언하는 방식 아님</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printGenericInfo</span>&lt;T&gt;<span class="params">(<span class="number">_</span> value: T)</span></span> &#123;</span><br><span class="line">  <span class="keyword">let</span> types = type(of: value)</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"'\(value)' of type '\(types)'"</span>)</span><br><span class="line">&#125;</span><br><span class="line">printGenericInfo(<span class="number">1</span>)</span><br><span class="line">printGenericInfo(<span class="number">2.0</span>)</span><br><span class="line">printGenericInfo(<span class="string">"3"</span>)</span><br></pre></td></tr></table></figure>



<h2 id="Type-Casting"><a href="#Type-Casting" class="headerlink" title="Type Casting"></a>Type Casting</h2><ul>
<li>as : 타입 변환이 확실하게 가능한 경우(업캐스팅, 자기 자신 등) 에만 사용 가능. 그 외에는 컴파일 에러</li>
<li>as? : 강제 타입 변환 시도. 변환이 성공하면 Optional 값을 가지며, 실패 시에는 nil 반환</li>
<li>as! : 강제 타입 변환 시도. 성공 시 언래핑 된 값을 가지며, 실패 시 런타임 에러 발생</li>
</ul>
<ul>
<li><p>업 캐스팅</p>
<ul>
<li><p>상속 관계에 있는 <strong>자식 클래스가 부모 클래스</strong>로 형변환하는 것</p>
</li>
<li><p>업캐스팅은 항상 성공하며 as 키워드를 사용  (자기 자신에 대한 타입 캐스팅도 항상 성공하므로 as 키워드 사용)</p>
</li>
</ul>
</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> color = <span class="type">UIColor</span>.black</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">draw</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"draw shape"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span>: <span class="title">Shape</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> cornerRadius = <span class="number">0.0</span></span><br><span class="line">  <span class="keyword">override</span> <span class="keyword">var</span> color: <span class="type">UIColor</span> &#123;</span><br><span class="line">    <span class="keyword">get</span> &#123; <span class="keyword">return</span> .white &#125;</span><br><span class="line">    <span class="keyword">set</span> &#123; &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">draw</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"draw rect"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> rect = <span class="type">Rectangle</span>()</span><br><span class="line">rect.color</span><br><span class="line">rect.cornerRadius</span><br><span class="line"></span><br><span class="line"><span class="comment">//(rect as Shape).color</span></span><br><span class="line"><span class="comment">//(rect as Shape).cornerRadius -&gt; Shape는 conerRadius 값을 가지고 있지 않아서 오류!</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//(rect as Rectangle).color -&gt; white</span></span><br><span class="line"><span class="comment">//(rect as Rectangle).cornerRadius -&gt; 0.0</span></span><br></pre></td></tr></table></figure>



<ul>
<li>다운 캐스팅<ul>
<li>형제 클래스나 다른 서브 클래스 등 수퍼 클래스에서 파생된 각종 서브 클래스로의 타입 변환 의미</li>
<li>반드시 성공한다는 보장이 없으므로 옵셔널. as? 또는 as! 를 사용</li>
</ul>
</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> shapeRect: <span class="type">Shape</span> = <span class="type">Rectangle</span>()</span><br><span class="line"><span class="keyword">var</span> downcastedRect = <span class="type">Rectangle</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">//downcastedRect = shapeRect //</span></span><br><span class="line"><span class="comment">//downcastedRect = shapeRect as Rectangle // 반드시 성공한다는 보장이 없음 그래서 에러! 부모 -&gt; 자식</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//downcastedRect: Rectangle = shapeRect as? Rectangle  //</span></span><br><span class="line"><span class="comment">//downcastedRect = shapeRect as! Rectangle  //</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//as? : 강제 타입 변환 시도. 변환이 성공하면 Optional 값을 가지며, 실패 시에는 nil 반환</span></span><br><span class="line"><span class="comment">//as! : 강제 타입 변환 시도. 성공 시 언래핑 된 값을 가지며, 실패 시 런타임 에러 발생</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//Q. 아래 value 에 대한 Casting 결과는?</span></span><br><span class="line"><span class="keyword">let</span> value = <span class="number">1</span></span><br><span class="line"><span class="comment">//(value as Float) is Float   // int와 float은 서로 관계 없는 타입</span></span><br><span class="line"><span class="comment">//(value as? Float) is Float  // nil is Float와 같은 결과임 false</span></span><br><span class="line"><span class="comment">//(value as! Float) is Float  // 런타임 오류 (value를 Float으로 강제로 변환을 했는데 is Float으로 체크 하는 순간 런타임 오류)</span></span><br></pre></td></tr></table></figure>





<h1 id="생성자-Initializer"><a href="#생성자-Initializer" class="headerlink" title="생성자 (Initializer)"></a>생성자 (Initializer)</h1><ul>
<li>Swift 의 객체는 사용하기 전 모든 <strong>저장 프로퍼티에 대해 초기화 필수</strong> 다음 3 가지 중 하나를 택해 초기화<ul>
<li>초기값 지정</li>
<li>옵셔널 타입 - nil 값으로 초기화</li>
<li>초기값이 없고, 옵셔널 타입이 아닌 프로퍼티에 대해서는 초기화 메서드에서 설정</li>
</ul>
</li>
</ul>
<h2 id="Designated-Initializer"><a href="#Designated-Initializer" class="headerlink" title="Designated Initializer"></a>Designated Initializer</h2><ul>
<li>클래스에 반드시 1개 이상 필요</li>
<li>초기화가 필요한 모든 프로퍼티를 단독으로 초기화 가능한 Initializer</li>
<li>위에서 사용한 init(), init(height: Int, xPosition: Int) 가 여기에 해당</li>
<li>초기화 과정에서 반드시 한 번은 호출</li>
</ul>
<ul>
<li>Q. 없는 경우도 있던데?<ul>
<li>init()이 있는건데 필요없으면 생략되어있는 거임 실제로는 있음</li>
</ul>
</li>
</ul>
<h2 id="Convenience-Initializer"><a href="#Convenience-Initializer" class="headerlink" title="Convenience Initializer"></a>Convenience Initializer</h2><ul>
<li><p>단독으로 모두 초기화할 수 없고 일부만 처리한 뒤 다른 생성자에게 나머지 부분 위임</p>
</li>
<li><p>중복되는 초기화 코드를 줄이기 위해 사용</p>
</li>
</ul>
<p>// 필기..</p>
<h2 id="Failable-Initializer"><a href="#Failable-Initializer" class="headerlink" title="Failable Initializer"></a>Failable Initializer</h2><p>인스턴스 생성시 특정 조건을 만족하지 않으면 객체를 생성하지 않는 것</p>
<p>생성이 되면 옵셔널 타입을 반환하게 되며, 생성 실패시에는 nil 반환</p>
<h2 id="Super-Class-Initializing"><a href="#Super-Class-Initializing" class="headerlink" title="Super Class Initializing"></a>Super Class Initializing</h2><ul>
<li>서브 클래스는 자기 자신 이외에 수퍼 클래스의 저장 프로퍼티까지 초기화 해야함</li>
<li>서브 클래스는 수퍼 클래스의 지정 생성자(Designated Initializer) 호출 필요 (Convenience는 호출 불가)</li>
<li>수퍼 클래스의 지정 생성자가 기본 init 함수 하나만 있을 경우는 별도로 작성하지 않아도 자동으로 super.init() 메서드 호출</li>
<li>생성자가 여러 개인 경우, 어떤 초기화 메서드를 선택해야 할지 알 수 없으므로 선택해주지 않으면 오류, 이 때는 서브 클래스에서 수퍼 클래스의 생성자를 명시적으로 선택해주어야 함. 편의 생성자(Convenience Initializer)는 무관</li>
</ul>
]]></content>
      <categories>
        <category>TIL</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>Swift</tag>
        <tag>타입캐스팅</tag>
        <tag>typeCasting</tag>
      </tags>
  </entry>
  <entry>
    <title>강아지, 새, 고양이</title>
    <url>/2019/12/homework-1203/</url>
    <content><![CDATA[<div class="video-container"><iframe src="//www.youtube.com/embed/idXDB5rUQOE" frameborder="0" allowfullscreen></iframe></div><h1 id="버튼-눌러서-뷰끼리-값-전달하기-StoryBoard-ver"><a href="#버튼-눌러서-뷰끼리-값-전달하기-StoryBoard-ver" class="headerlink" title="버튼 눌러서 뷰끼리 값 전달하기 (StoryBoard ver.)"></a>버튼 눌러서 뷰끼리 값 전달하기 (StoryBoard ver.)</h1><ul>
<li>FirstVC 에 Dog, Cat, Bird 라는 이름의 Button을 3개 만들고 숫자를 표시하기 위한 Label 하나 생성</li>
<li>SecondVC 에 UIImageView 하나와 Dismiss 를 위한 버튼 하나 생성</li>
<li>FirstVC에 있는 버튼 3개 중 하나를 누르면 그 타이틀에 맞는 이미지를 SecondVC의 ImageView 에 넣기<br>(이미지는 구글링 등을 통해 활용)</li>
<li>각 버튼별로 전환 횟수를 세서 개는 3회, 고양이는 5회, 새는 7회가 초과되면 화면이 전환되지 않도록 막기<br>(전환 횟수가 초과된 버튼은 그것만 막고, 횟수가 초과되지 않은 버튼으로는 전환 가능)</li>
<li>SecondVC에 추가로 UIButton 을 하나 생성하여 그 버튼을 누를 때 마다 개와 고양이, 새 모두에 대해 전환 횟수가 각각 1회씩 추가되도록 구현.</li>
<li>단, 각 버튼의 전환 횟수 제한에 도달하면 더 이상 추가 되지 않음</li>
</ul><a id="more"></a>




<p><strong>FirstViewController</strong></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FirstViewController</span>: <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 전환 횟수 레이블, 변수</span></span><br><span class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> lblCnt: <span class="type">UILabel!</span></span><br><span class="line">    <span class="keyword">var</span> dogCnt = <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> catCnt = <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> birdCnt = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 레이블 표기 시점 (viewWillAppear)</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewWillAppear</span><span class="params">(<span class="number">_</span> animated: Bool)</span></span> &#123;</span><br><span class="line">        lblCnt.text = <span class="type">String</span>(<span class="string">"🐶 : \(dogCnt) | 🐱 : \(catCnt) | 🐧 : \(birdCnt)"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 세그로 값 넘기기</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">prepare</span><span class="params">(<span class="keyword">for</span> segue: UIStoryboardSegue, sender: <span class="keyword">Any</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.prepare(<span class="keyword">for</span>: segue, sender: sender)</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> <span class="type">SecondVC</span> = segue.destination <span class="keyword">as</span>? <span class="type">SecondViewController</span> <span class="keyword">else</span> &#123;<span class="keyword">return</span>&#125;</span><br><span class="line">        <span class="keyword">if</span> segue.identifier == <span class="string">"dog"</span> &#123;</span><br><span class="line">            <span class="type">SecondVC</span>.text = <span class="string">"강아지"</span></span><br><span class="line">            <span class="type">SecondVC</span>.imageURL = <span class="string">"dog.jpg"</span></span><br><span class="line">            dogCnt += <span class="number">1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> segue.identifier == <span class="string">"cat"</span> &#123;</span><br><span class="line">            <span class="type">SecondVC</span>.text = <span class="string">"고양이"</span></span><br><span class="line">            <span class="type">SecondVC</span>.imageURL = <span class="string">"cat.jpg"</span></span><br><span class="line">            catCnt += <span class="number">1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">SecondVC</span>.text = <span class="string">"새"</span></span><br><span class="line">            <span class="type">SecondVC</span>.imageURL = <span class="string">"bird.jpg"</span></span><br><span class="line">            birdCnt += <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 화면 전환 횟수 제약 걸기</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">shouldPerformSegue</span><span class="params">(withIdentifier identifier: String, sender: <span class="keyword">Any</span>?)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> identifier == <span class="string">"dog"</span> &amp;&amp; dogCnt &gt;= <span class="number">3</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> identifier == <span class="string">"cat"</span> &amp;&amp; catCnt &gt;= <span class="number">5</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> identifier == <span class="string">"bird"</span> &amp;&amp; birdCnt &gt;= <span class="number">7</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">unwindToFirtVC</span><span class="params">(<span class="number">_</span> unwindSegue: UIStoryboardSegue)</span></span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>SecondVIewController</strong></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SecondViewController</span>: <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> lblAnimal: <span class="type">UILabel!</span></span><br><span class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> image: <span class="type">UIImageView!</span></span><br><span class="line">    <span class="keyword">var</span> text = <span class="string">""</span></span><br><span class="line">    <span class="keyword">var</span> imageURL = <span class="string">""</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">        lblAnimal.text = text</span><br><span class="line">        image.image = <span class="type">UIImage</span>(named: imageURL)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">plusCnts</span><span class="params">(<span class="number">_</span> sender: UIButton)</span></span> &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> vc = presentingViewController <span class="keyword">as</span>? <span class="type">FirstViewController</span> <span class="keyword">else</span> &#123;<span class="keyword">return</span>&#125;</span><br><span class="line">        vc.dogCnt &lt; <span class="number">3</span> ? vc.dogCnt += <span class="number">1</span> : ()</span><br><span class="line">        vc.catCnt &lt; <span class="number">5</span> ? vc.catCnt += <span class="number">1</span> : ()</span><br><span class="line">        vc.birdCnt &lt; <span class="number">7</span> ? vc.birdCnt += <span class="number">1</span> : ()</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<p><strong>StoryBoard</strong></p>
<p><img src="https://user-images.githubusercontent.com/15086391/70118397-33a6a780-16ab-11ea-88f2-bdc844384a3e.png" alt="스크린샷 2019-12-04 오후 3 31 34"></p>
]]></content>
      <categories>
        <category>Homework</category>
      </categories>
      <tags>
        <tag>Swift</tag>
        <tag>iOS,</tag>
      </tags>
  </entry>
  <entry>
    <title>StoryBoard</title>
    <url>/2019/12/3/</url>
    <content><![CDATA[<h1 id="StoryBoard"><a href="#StoryBoard" class="headerlink" title="StoryBoard"></a>StoryBoard</h1><ul>
<li><p>Segueway</p>
<ul>
<li>뷰 컨트롤러 하나 더 생성, ctrl 누른채로 새로 만든 뷰 컨트롤러로 드래그! 세그웨이</li>
<li>오늘은 present Modally 선택</li>
<li>(세그웨이 선 선택하고 어트리뷰트 인스펙터)스토리보드 세그, kind 에서 액션을 변경할 수 있다</li>
</ul>
</li>
<li><p>다시 돌아갈 땐? dismiss</p>
<ul>
<li>버튼 선택하고 똑같이 ctrl로 이전 뷰 드래그??</li>
<li>이러면 dismiss가 아니라  present</li>
</ul>
</li>
<li><p>일단 ViewController를 First로 바꾸고, 새로 SecondViewController를 만들자!</p>
</li>
</ul><a id="more"></a>
<p><img src="https://user-images.githubusercontent.com/15086391/70020504-32547c80-15d0-11ea-9d27-7877d653108b.png" alt="스크린샷 2019-12-03 오후 1 23 26"></p>
<ul>
<li><p>연결까지 다 되었으면, </p>
<ul>
<li>FirstVC에 unwind 메소드!</li>
</ul>
</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">unwindToFirstVC</span><span class="params">(<span class="number">_</span> unwindSegue: UIStoryboardSegue)</span></span> &#123;</span><br><span class="line">       <span class="keyword">let</span> sourceViewController = unwindSegue.source</span><br><span class="line">       <span class="comment">// Use data from the view controller which initiated the unwind segue</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>


<ul>
<li>스토리보드로 가서 dismiss 버튼 ctrl 누르고 위에 exit로 드래그! 하면 뭔가 말풍선이 생김! (unwind) 선택하면 끝</li>
</ul>
<h2 id="각자-실습"><a href="#각자-실습" class="headerlink" title="각자 실습"></a>각자 실습</h2><ul>
<li>뷰컨트롤러 하나 더 만들고 A,B,C 왔다갔다 하는거 해보셈</li>
</ul>
<p><img src="https://user-images.githubusercontent.com/15086391/70021073-aee85a80-15d2-11ea-8394-8955596d4394.png" alt="스크린샷 2019-12-03 오후 1 41 51"></p>
<ul>
<li>First -&gt; Second (present)</li>
<li>First -&gt; Third (present)</li>
</ul>
<ul>
<li>Second -&gt; First (dismiss)</li>
<li>Second -&gt; Third (present)</li>
</ul>
<ul>
<li>Third -&gt; First (dismiss)</li>
<li>Third -&gt; Second (Second에서 Third 로 넘어온 경우만 dismiss로 가능)<ul>
<li>곧바로 First에서 Third로 넘어온 경우는 Second 못감 </li>
</ul>
</li>
</ul>
<h2 id="뷰끼리-데이터-전송하기"><a href="#뷰끼리-데이터-전송하기" class="headerlink" title="뷰끼리 데이터 전송하기"></a>뷰끼리 데이터 전송하기</h2><ul>
<li>B로 넘어가는 세그웨이를 하나 더 만들고 fullscreen 말고 card 로 내비두자 (구분하기 위함)</li>
<li>각 세그웨이의 idetifier를 지정해줌 fullscreen, card 세그웨이 별로!</li>
<li>B화면에 각 세그웨이별로 접근 했을 때 변경값을 전달해줄 레이블 생성하고 outlet 생성<ul>
<li>card 세그로 오면 레이블이 card 로 변하고, fullscreen으로 오면 레이블이 FullScreen으로 변할것</li>
</ul>
</li>
</ul>
<p><img src="https://user-images.githubusercontent.com/15086391/70021647-bd377600-15d4-11ea-8e4f-1fa8d39abf49.png" alt="스크린샷 2019-12-03 오후 1 56 28"></p>
<ul>
<li>헷갈리니 ThirdViewController 일단 지우자</li>
</ul>
<h2 id="Practice"><a href="#Practice" class="headerlink" title="Practice"></a>Practice</h2><ul>
<li>각각 +1 버튼, +10 버튼을 만들고 버튼을 누르면 레이블에 해당 값 만큼 더해지 되, 40이 넘으면 다음 화면이 출력 되지 않게끔 해보자</li>
</ul>
<h1 id="Manual-segway"><a href="#Manual-segway" class="headerlink" title="Manual segway"></a>Manual segway</h1><ul>
<li>일단 +5 버튼을 하나 만든다. </li>
<li>이번에는 버튼에서 다음 뷰로 드래그가 아니라, 뷰의 맨 위에 세 가지 버튼 중에서 첫 번째 버튼으로 드래그 하면</li>
</ul>
<p><img src="https://user-images.githubusercontent.com/15086391/70029156-c979fe00-15e9-11ea-9207-d21ad93283fa.png" alt="스크린샷 2019-12-03 오후 4 26 58"></p>
<p>요렇게 </p>
<p>manual segue 버튼이 생김 </p>
<ul>
<li>이담에 segue의 identifier를 설정해줌 (plusFive)</li>
<li>segue 끝!</li>
<li>이번엔 버튼의 action을 설정해 주자 </li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">didTapFiveBtn</span><span class="params">(<span class="number">_</span> sender: UIButton)</span></span> &#123;</span><br><span class="line">       performSegue(withIdentifier: <span class="string">"plusFive"</span>, sender: sender)</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>내부에 performSegue에서 identifier 설정을 해주면 버튼에 segue 할당 끝! 이제 +5 버튼을 누르면 이동한다!</p>
]]></content>
      <categories>
        <category>TIL</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title>1차 Test Review</title>
    <url>/2019/12/2/</url>
    <content><![CDATA[<h1 id="이론"><a href="#이론" class="headerlink" title="이론"></a>이론</h1><h2 id="1-Array-Set-Dictionary의-차이점에-대해-설명하고-예시-코드-작성"><a href="#1-Array-Set-Dictionary의-차이점에-대해-설명하고-예시-코드-작성" class="headerlink" title="1. Array, Set, Dictionary의 차이점에 대해 설명하고, 예시 코드 작성"></a>1. Array, Set, Dictionary의 차이점에 대해 설명하고, 예시 코드 작성</h2><ul>
<li>*<em>array *</em>: index를 기반으로, 값이 저장 된 순서가 있음. (0부터 시작), 중복 값 허용 됨, 하나의 타입</li>
<li><strong>Set</strong>: 순서가 정렬되지 않음, 하나의 타입, 중복 비허용(고유 값)</li>
<li><strong>Dictionary</strong>:  키와 값의 쌍으로 이뤄져있음, key는 고유 값, value는 중복 허용, 순서 정렬되지 않음</li>
</ul><a id="more"></a>
<h2 id="2-Value-Type-Reference-Type의-차이점"><a href="#2-Value-Type-Reference-Type의-차이점" class="headerlink" title="2.Value Type, Reference Type의 차이점?"></a>2.Value Type, Reference Type의 차이점?</h2><ul>
<li><p>value type</p>
<ul>
<li>Struct, enum, tuple에 사용</li>
<li>각 객체는 각자 고유한 사본을 가지고 있음</li>
<li>메모리의 stack 영역에 데이터 저장</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">Struct</span> <span class="type">S</span>&#123;<span class="keyword">var</span> num = <span class="number">10</span>&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="type">S</span>()</span><br><span class="line"><span class="keyword">var</span> b = a</span><br><span class="line">a.num = <span class="number">20</span>	</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"\(a.num), \(b.num)"</span>) <span class="comment">// 20, 10 -&gt; 각자 고유한 사본을 가지고 있어서 값이 똑같이 공유되지 않음</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Reference type</p>
<ul>
<li>class</li>
<li>객체들이 하나의 사본을 공유함</li>
<li>메모리의 stack 영역에는 pointer가 저장되고, heap 영역에 실제 데이터 저장</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="type">C</span>&#123;<span class="keyword">var</span> num = <span class="number">10</span>&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="type">C</span>()</span><br><span class="line"><span class="keyword">var</span> b = a</span><br><span class="line">a.num = <span class="number">20</span>	</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"\(a.num), \(b.num)"</span>) <span class="comment">// 20, 20 -&gt; 하나의 사본을 객체끼리 공유하기 때문에 값이 똑같음</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
<h2 id="3-Application의-Life-Cycle의-각-상태에-대해-설명하라"><a href="#3-Application의-Life-Cycle의-각-상태에-대해-설명하라" class="headerlink" title="3. Application의 Life Cycle의 각 상태에 대해 설명하라"></a>3. Application의 Life Cycle의 각 상태에 대해 설명하라</h2><ul>
<li>Not running : 아직 실행하지 않은 상태, 시스템 혹은 유저에 의해 앱이 종료 된 상태</li>
<li>Inactive : 포그라운드에서 앱이 실행중이지만 앱 상태 전환 등의 이유로 이벤트를 일시적으로 받지 못하는 상태, Active 상태로 전환되기 전 잠시 거치는 단계</li>
<li>Active : 포그라운드에서 앱이 실행 중이며 이벤트를 정상적으로 수신받을 수 있는 상태</li>
<li>Background : 백그라운드에서 앱이 실행 중인 상태 또는 Suspended 상태로 넘어가기 직전 잠시 머무는 단</li>
<li>Suspended : 앱이 백그라운드에 있으며 메모리에는 남아있지만 어떤 코드도 수행하지 않고 있는 상태, 메모리가 부족해지면 시스템에 의해 강제 종료될 수 있음</li>
</ul>
<h2 id="4-View-Life-Cycle의-각-상태에-대해-설명"><a href="#4-View-Life-Cycle의-각-상태에-대해-설명" class="headerlink" title="4. View Life Cycle의 각 상태에 대해 설명"></a>4. View Life Cycle의 각 상태에 대해 설명</h2><ul>
<li><p>viewDidLoad - view에 대한 로드가 완료된 시점(메모리상에 저장됨)에 호출</p>
</li>
<li><p>viewWillAppear - view를 화면에 나타내기 직전 호출</p>
</li>
<li><p>viewDidAppear - view를 화면에 나타낸 직후 호출</p>
</li>
<li><p>viewWillDisappear - view가 화면에서 사라지기 직전 호출</p>
</li>
<li><p>viewDidDisappear - view가 화면에서 사라진 직후 호출</p>
</li>
</ul>
<h2 id="5-다음-4개의-키워드가-쓰이는-위치-역할-설명"><a href="#5-다음-4개의-키워드가-쓰이는-위치-역할-설명" class="headerlink" title="5. 다음 4개의 키워드가 쓰이는 위치, 역할 설명"></a>5. 다음 4개의 키워드가 쓰이는 위치, 역할 설명</h2><ul>
<li>continue<ul>
<li><em>반복문</em> 내에서 사용</li>
<li>현재 수행하던 작업을 중단하고 반복문의 다음 반복자를 수행</li>
</ul>
</li>
</ul>
<ul>
<li>break<ul>
<li><em>반복문</em> 또는 <em>switch문</em> 내에서 사용</li>
<li>현재 반복문 또는 switch문에서 수행하던 작업을 중단하고 즉시 해당 제어문에서 빠져나옴</li>
</ul>
</li>
</ul>
<ul>
<li>return<ul>
<li>함수 내에서 사용</li>
<li>해당 함수의 작업을 즉각 중단하며 동시에 그 함수의 return type에 맞는 값을 반환</li>
<li>함수가 실행되었을 때 기대되는 어떤 결과값(Output)을 함수를 호출한 곳으로 반환해주는 역할</li>
</ul>
</li>
</ul>
<ul>
<li>fallthrough<ul>
<li>switch문 내에서 사용</li>
<li>switch문 내에서 첫 번째로 매칭된 케이스가 수행된 후 바로 종료하는 대신 그 다음의 케이스까지 수행하게 하는 역할</li>
</ul>
</li>
</ul>
<h2 id="6-Init-메서드가-필요한-경우와-그렇지-않은-경우-차이"><a href="#6-Init-메서드가-필요한-경우와-그렇지-않은-경우-차이" class="headerlink" title="6. Init 메서드가 필요한 경우와 그렇지 않은 경우 차이?"></a>6. Init 메서드가 필요한 경우와 그렇지 않은 경우 차이?</h2><p>모든 저장 프로퍼티에 초기화가 되어 있으면 필요없지만, 하나라도 초기화가 되어있지 않으면 필요함</p>
<h2 id="7-Access-Level-을-각-단계별로-나열하고-그-차이점에-대해-설명"><a href="#7-Access-Level-을-각-단계별로-나열하고-그-차이점에-대해-설명" class="headerlink" title="7. Access Level 을 각 단계별로 나열하고 그 차이점에 대해 설명"></a>7. Access Level 을 각 단계별로 나열하고 그 차이점에 대해 설명</h2><ul>
<li>open : 외부 모듈에서도 접근 가능하며, 오버라이드 가능</li>
<li>Public : 외부 모듈에서도 접근 가능하되, 오버라이드 불가</li>
<li>Internal :  해당 모듈 내에서만 접근 가능하도록 제안</li>
<li>filePrivate : 해당 파일 내에서만 접근 가능하도록 제한</li>
<li>private : 해당 스코프 내에서만 접근 가능하도록 제한  </li>
</ul>
<h2 id="8-OOP-4대-특성"><a href="#8-OOP-4대-특성" class="headerlink" title="8. OOP 4대 특성?"></a>8. OOP 4대 특성?</h2><ul>
<li>다른 포스트 참조</li>
<li></li>
</ul>
<h2 id="9-Frame과-Bounds가-무엇이고-둘의-차이점"><a href="#9-Frame과-Bounds가-무엇이고-둘의-차이점" class="headerlink" title="9. Frame과 Bounds가 무엇이고, 둘의 차이점?"></a>9. Frame과 Bounds가 무엇이고, 둘의 차이점?</h2><ul>
<li>Frame<ul>
<li>superview의 좌표계를 기반으로 해당 view에 대한 위치(좌표)와 사이즈를 나타내는 사각형</li>
<li>원점(0, 0)은 부모뷰(superview)의 시작 지점이며,</li>
<li>원점을 변경하면 자신의 위치가 이동하고 이에 따라 자신의 하위 뷰도 함께 움직임</li>
</ul>
</li>
</ul>
<ul>
<li>Bounds</li>
</ul>
<p>- 자기 자신의 좌표계를 기반으로 그 뷰의 위치와 사이즈를 표현하는 사각형</p>
<p>- 원점(0, 0)은 자체 뷰의 시작 지점이며, 원점을 변경하면 자신의 하위 뷰에만 영향을 줌</p>
]]></content>
      <categories>
        <category>TIL</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>Swift</tag>
        <tag>Codding</tag>
      </tags>
  </entry>
  <entry>
    <title>Calculator</title>
    <url>/2019/11/27/</url>
    <content><![CDATA[<h1 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h1><p><strong>Model</strong> : BrainOfCalculator</p><p><strong>View</strong>: Main.storyboard</p><p><strong>Controller</strong>: ViewController</p><h1 id="ViewController"><a href="#ViewController" class="headerlink" title="ViewController"></a>ViewController</h1><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">private</span> <span class="keyword">weak</span> <span class="keyword">var</span> display: <span class="type">UILabel!</span></span><br><span class="line">    </span><br><span class="line">  <span class="comment">// </span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> <span class="type">UserIsInTheMiddleOfTyping</span> = <span class="literal">false</span></span><br><span class="line">    </span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 숫자버튼에 연결되어 있는 액션</span></span><br><span class="line">    <span class="meta">@IBAction</span> <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">touchDigit</span><span class="params">(<span class="number">_</span> sender: UIButton)</span></span> &#123;</span><br><span class="line">        <span class="comment">// 버튼의 title을 입력 값으로 설정</span></span><br><span class="line">        <span class="keyword">let</span> digit = sender.currentTitle!</span><br><span class="line">      </span><br><span class="line">        <span class="comment">// 유저가 타이핑 중이 아니면 display(레이블)에 digit이 덧붙여지고, 타이핑 중이면 display는 대체 됨</span></span><br><span class="line">        <span class="keyword">if</span> <span class="type">UserIsInTheMiddleOfTyping</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> textCurrentlyInDisplay = display.text</span><br><span class="line">            display.text = textCurrentlyInDisplay! + digit</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            display.text = digit</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">UserIsInTheMiddleOfTyping</span> = <span class="literal">true</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 데이터 입력 시에는 문자, 리턴할 때는 double (계산을 해야 하니깐)</span></span><br><span class="line">    <span class="comment">// 매번 타입을 변환하지 않도록 해줌. 가져갈때는 double로, 입력할 때는 String으로!</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> displayValue: <span class="type">Double</span> &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="type">Double</span>(display.text!)!</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123;</span><br><span class="line">            display.text = <span class="type">String</span>(newValue)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  <span class="comment">// brain에서 참고!</span></span><br><span class="line">    <span class="keyword">var</span> savedProgram: <span class="type">BrainOfCalculator</span>.<span class="type">PropertyList?</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">save</span><span class="params">()</span></span> &#123;</span><br><span class="line">        savedProgram = brain.program</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">restore</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> savedProgram != <span class="literal">nil</span> &#123;</span><br><span class="line">            brain.program = savedProgram!</span><br><span class="line">            displayValue = brain.result</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 계산 수행, Model 호출</span></span><br><span class="line">    <span class="keyword">var</span> brain = <span class="type">BrainOfCalculator</span>()</span><br><span class="line">    </span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 연산자 버튼을 누르면 계산 작업 수행</span></span><br><span class="line">    <span class="meta">@IBAction</span> <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">performOperation</span><span class="params">(<span class="number">_</span> sender: UIButton)</span></span> &#123;</span><br><span class="line">        <span class="comment">// 피연산자 입력받기t</span></span><br><span class="line">        <span class="keyword">if</span> <span class="type">UserIsInTheMiddleOfTyping</span> &#123;</span><br><span class="line">            brain.setOperand(operand: displayValue)</span><br><span class="line">            <span class="type">UserIsInTheMiddleOfTyping</span> = <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 연산자 입력받기</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> mathemeticalSymbol = sender.currentTitle &#123;</span><br><span class="line">            brain.performOperation(symbol: mathemeticalSymbol)</span><br><span class="line">        &#125;</span><br><span class="line">        displayValue = brain.result</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a>








<h1 id="BrainOfCalculator"><a href="#BrainOfCalculator" class="headerlink" title="BrainOfCalculator"></a>BrainOfCalculator</h1><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  ViewController.swift</span></span><br><span class="line"><span class="comment">//  Hangling_Caculator</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by MyMac on 2019/11/26.</span></span><br><span class="line"><span class="comment">//  Copyright © 2019 sandMan. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">private</span> <span class="keyword">weak</span> <span class="keyword">var</span> display: <span class="type">UILabel!</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> <span class="type">UserIsInTheMiddleOfTyping</span> = <span class="literal">false</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@IBAction</span> <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">touchDigit</span><span class="params">(<span class="number">_</span> sender: UIButton)</span></span> &#123;</span><br><span class="line">        <span class="comment">// 버튼에서 title 보내기</span></span><br><span class="line">        <span class="keyword">let</span> digit = sender.currentTitle!</span><br><span class="line">        <span class="comment">// 유저가 타이핑 중이 아니면 display(레이블)에 digit이 덧붙여지고, 타이핑 중이면 display는 대체 됨</span></span><br><span class="line">        <span class="keyword">if</span> <span class="type">UserIsInTheMiddleOfTyping</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> textCurrentlyInDisplay = display.text</span><br><span class="line">            display.text = textCurrentlyInDisplay! + digit</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            display.text = digit</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">UserIsInTheMiddleOfTyping</span> = <span class="literal">true</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 데이터 입력 시에는 문자, 리턴할 때는 double (계산을 해야 하니깐)</span></span><br><span class="line">    <span class="comment">// 매번 타입을 변환하지 않도록 해줌. 가져갈때는 double로, 입력할 때는 String으로!</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> displayValue: <span class="type">Double</span> &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="type">Double</span>(display.text!)!</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123;</span><br><span class="line">            display.text = <span class="type">String</span>(newValue)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> savedProgram: <span class="type">BrainOfCalculator</span>.<span class="type">PropertyList?</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">save</span><span class="params">()</span></span> &#123;</span><br><span class="line">        savedProgram = brain.program</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">restore</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> savedProgram != <span class="literal">nil</span> &#123;</span><br><span class="line">            brain.program = savedProgram!</span><br><span class="line">            displayValue = brain.result</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 계산 수행, Model 호출</span></span><br><span class="line">    <span class="keyword">var</span> brain = <span class="type">BrainOfCalculator</span>()</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@IBAction</span> <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">performOperation</span><span class="params">(<span class="number">_</span> sender: UIButton)</span></span> &#123;</span><br><span class="line">        <span class="comment">// 피연산자 입력받기</span></span><br><span class="line">        <span class="keyword">if</span> <span class="type">UserIsInTheMiddleOfTyping</span> &#123;</span><br><span class="line">            brain.setOperand(operand: displayValue)</span><br><span class="line">            <span class="type">UserIsInTheMiddleOfTyping</span> = <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 연산자 입력받기</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> mathemeticalSymbol = sender.currentTitle &#123;</span><br><span class="line">            brain.performOperation(symbol: mathemeticalSymbol)</span><br><span class="line">        &#125;</span><br><span class="line">        displayValue = brain.result</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="Main-storyboard"><a href="#Main-storyboard" class="headerlink" title="Main.storyboard"></a>Main.storyboard</h1><p><img src="https://user-images.githubusercontent.com/15086391/69705630-4bc17880-1139-11ea-8154-06ff4b97c67d.png" alt="스크린샷 2019-11-27 오후 5 04 07"></p>
]]></content>
      <categories>
        <category>따라해봄</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>Swift</tag>
        <tag>한글링</tag>
        <tag>Stanford_iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>UI Text Field Example &amp; Alert Controller</title>
    <url>/2019/11/26/</url>
    <content><![CDATA[<h1 id="UI-Text-Field-Example-amp-Alert-Controller"><a href="#UI-Text-Field-Example-amp-Alert-Controller" class="headerlink" title="UI Text Field Example &amp; Alert Controller"></a>UI Text Field Example &amp; Alert Controller</h1><ul>
<li>스토리보드에서 text필드 추가</li>
<li>가상키보드는 상단의 hardware -&gt; keyboard</li>
<li>attribute insfector에서 폰트, 텍스트 스타일 등등 바꿀 수 있음~</li>
<li>environment Overrides 에서 폰트크기나 다크모드 등을 실시간으로 확인 가능 단, 폰트가 시스템 폰트이면 안됨</li>
<li>Boarder Style을 조정가능</li>
<li>Clear button : 텍스트필드 오른쪽에 텍스트 한번에 지우는 x 버튼 생길지 여부</li>
<li>min font size : 텍스트 필드에 텍스트가 많아져서 길어질 때 크기가 줄어듦, 이 때 어느정도까지 작아지는지 한도 정하는거</li>
</ul><a id="more"></a>
<h2 id="Text-Field"><a href="#Text-Field" class="headerlink" title="Text Field"></a>Text Field</h2><ol>
<li>TextField 객체 생성</li>
</ol>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> textField = <span class="type">UITextField</span>()</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>TextField 및 keyBoard 속성 정의</li>
</ol>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 텍스트필드 및 키보드 속성 정의</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">setTextField</span><span class="params">()</span></span> &#123;</span><br><span class="line">	textField.frame.size = <span class="type">CGSize</span>(width: <span class="number">200</span>, height: <span class="number">50</span>)</span><br><span class="line">  textField.center = view.center</span><br><span class="line">  textField.borderStyle = .roundedRect</span><br><span class="line">  textField.placeholder = <span class="string">"put in text"</span></span><br><span class="line">  textField.keyboardType = .<span class="keyword">default</span></span><br><span class="line">  textField.keyboardAppearance = .<span class="keyword">default</span></span><br><span class="line">  <span class="keyword">self</span>.view.addSubview(textField)       </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>viewDidLoad에서 실행</li>
</ol>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 텍스트 필드 객체 로드</span></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">  setTextField()        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="결과"><a href="#결과" class="headerlink" title="결과"></a>결과</h3><p><img src="https://user-images.githubusercontent.com/15086391/69620901-6f28ec80-1081-11ea-920f-17a972b0730b.png" alt="스크린샷 2019-11-26 오후 7 17 34"></p>
<h2 id="Text-Field-Interface-Builder-속성"><a href="#Text-Field-Interface-Builder-속성" class="headerlink" title="Text Field Interface Builder 속성"></a>Text Field Interface Builder 속성</h2><ul>
<li>text</li>
<li>color</li>
<li>font</li>
<li>alignment</li>
<li>PlaceHolder</li>
<li>Background</li>
<li>Disabled</li>
<li>Border Style</li>
<li>Clear button</li>
<li>min font size</li>
</ul>
<p><em>키보드 관련 속성도 있으니 개발문서 참고</em></p>
<h2 id="Text-Field-이벤트"><a href="#Text-Field-이벤트" class="headerlink" title="Text Field 이벤트"></a>Text Field 이벤트</h2><ul>
<li>DidEndOnExit : 입력을 끝내고 return 키 누르면 호출</li>
<li>Editing Changed : 입력 하는 중에 계속 호출</li>
<li>EditingDidBegin : 텍스트필드를 선택하는 순간 호출</li>
<li>EditingDidEnd: 텍스트필드 포커싱이 끝나면 호출</li>
<li>primaryAction : return 키를 누르면 호출</li>
</ul>
<h3 id="Q-텍스트-필드가-두-개이고-하나는-이벤트-연결-안했을-때"><a href="#Q-텍스트-필드가-두-개이고-하나는-이벤트-연결-안했을-때" class="headerlink" title="Q. 텍스트 필드가 두 개이고, 하나는 이벤트 연결 안했을 때?"></a><strong>Q. 텍스트 필드가 두 개이고, 하나는 이벤트 연결 안했을 때?</strong></h3><ul>
<li>텍스트 필드 선택 -&gt; DidBegin</li>
<li>텍스트 필드 수정 (Editing) -&gt; editing changed</li>
<li>return 키 안누르고 다른 텍스트 필드로 이동 : DidEnd</li>
<li>return 키 누르고 editing 종료: DidEnd, PrimaryActionTrigger, endOnExit</li>
</ul>
<h3 id="Q-TextField가-여러-개인데-하나의-IBAction에-연결-할-수-있나요"><a href="#Q-TextField가-여러-개인데-하나의-IBAction에-연결-할-수-있나요" class="headerlink" title="Q. TextField가 여러 개인데, 하나의 IBAction에 연결 할 수 있나요?"></a><strong>Q. TextField가 여러 개인데, 하나의 IBAction에 연결 할 수 있나요?</strong></h3><ul>
<li><p>가능</p>
</li>
<li><p>그런데 각 TF를 구분해주어야 한다.</p>
</li>
<li></li>
<li><p>이 때 구분하는 방법은 IBOutlet을 만들어주거나, 각 객체에 tag를 지정</p>
</li>
<li><p>if 문을 사용해서 해당 액션을 수행할 TF객체만 액션을 수행하도록 지정</p>
</li>
<li><p><strong>Tag</strong>는 (Attribute Insfector의 View칸에서 지정 가능</p>
</li>
</ul>
<ul>
<li><h3 id="Q-sender-파라미터는-뭐하는-녀석인가요"><a href="#Q-sender-파라미터는-뭐하는-녀석인가요" class="headerlink" title="Q. sender 파라미터는 뭐하는 녀석인가요?"></a>Q. sender 파라미터는 뭐하는 녀석인가요?</h3></li>
<li><p>내가 지금 ‘이벤트를 발생시킨 객체’를 가리킨다.</p>
</li>
<li><p>버튼을 눌렀으면 sender는 내가 누른 버튼</p>
</li>
</ul>
<h2 id="Font-지정-하기"><a href="#Font-지정-하기" class="headerlink" title="Font 지정 하기"></a>Font 지정 하기</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 텍스트필드 폰트</span></span><br><span class="line">idTextField.font = <span class="type">UIFont</span>.systemFont(ofSize: <span class="number">20</span>)       </span><br><span class="line">idTextField.font = <span class="type">UIFont</span>.systemFont(ofSize: <span class="number">20</span>, weight: .heavy)</span><br><span class="line">idTextField.font = <span class="type">UIFont</span>.boldSystemFont(ofSize: <span class="number">30</span>)</span><br><span class="line">idTextField.textAlignment = .center</span><br><span class="line"></span><br><span class="line"><span class="comment">// 레이블 폰트</span></span><br><span class="line">lblText.font = lblText.font.withSize(<span class="number">20</span>)</span><br></pre></td></tr></table></figure>





<h2 id="Alert-Controller"><a href="#Alert-Controller" class="headerlink" title="Alert Controller"></a>Alert Controller</h2><ul>
<li>뷰가 아니기 때문에 Present 메소드로 띄운다. controller임</li>
<li>addSubview는 view를 띄우는 메소드</li>
</ul>
<h3 id="alert-객체-생성-과정"><a href="#alert-객체-생성-과정" class="headerlink" title="alert 객체 생성 과정"></a>alert 객체 생성 과정</h3><ol>
<li>AlertController 객체 생성</li>
</ol>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> alert = <span class="type">UIAlertController</span>(</span><br><span class="line">	title: <span class="string">"title"</span>, <span class="comment">// 타이틀 지정</span></span><br><span class="line">	message: <span class="string">"insert massage"</span>, <span class="comment">// 메세지 지정</span></span><br><span class="line">	preferredStyle: .alert) <span class="comment">// alert or actionSheet 둘 중 하나 선택</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>alert의 버튼 객체 생성</li>
</ol>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> ok = <span class="type">UIAlertAction</span>(</span><br><span class="line">  title: <span class="string">"OK"</span>, <span class="comment">// 버튼 위 텍스트 </span></span><br><span class="line">  style: .<span class="keyword">default</span>) &#123; <span class="comment">// 버튼 스타일 default, cancle, destructive 셋 중 하나 선택</span></span><br><span class="line">  (action) <span class="keyword">in</span> <span class="comment">// 해당 버튼을 누르면 수행할 액션 정의</span></span><br><span class="line"> 	<span class="built_in">print</span>(<span class="string">"OK버튼"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>cancle &amp; destructive 스타일 버튼 생성</li>
</ol>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> cancle = <span class="type">UIAlertAction</span>(</span><br><span class="line">	title: <span class="string">"Cancle"</span>, </span><br><span class="line">	style: .cancel) &#123;</span><br><span class="line">	(action) <span class="keyword">in</span></span><br><span class="line">	<span class="built_in">print</span>(<span class="string">"Cancle 버튼"</span>)</span><br><span class="line">&#125;</span><br><span class="line">        </span><br><span class="line"><span class="keyword">let</span> destructive = <span class="type">UIAlertAction</span>(</span><br><span class="line">	title: <span class="string">"Delete"</span>, </span><br><span class="line">	style: .destructive) &#123; </span><br><span class="line">	(action) <span class="keyword">in</span></span><br><span class="line">	<span class="built_in">print</span>(<span class="string">"destructive 버튼"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>생성한 alert 버튼 객체 alert에 추가</li>
</ol>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">alert.addAction(ok)</span><br><span class="line">alert.addAction(cancle)</span><br><span class="line">alert.addAction(destructive)</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>버튼 객체까지 추가 완료한 후, alert 객체 띄우기</li>
</ol>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">present(alert, animated: <span class="literal">true</span>)</span><br></pre></td></tr></table></figure>



<h3 id="결과-1"><a href="#결과-1" class="headerlink" title="결과"></a><strong>결과</strong></h3><p><img src="https://user-images.githubusercontent.com/15086391/69616487-0be78c00-107a-11ea-84e9-87f28cac4993.png" alt="imageTotal"></p>
<ul>
<li><p>왼쪽이 <strong>actionSheet</strong> / 오른쪽이 <strong>alert</strong></p>
</li>
<li><p>Alert 객체는 스토리보드에서 추가할 수 없음</p>
</li>
<li><p>cancle 액션은 추가 된 순서에 관계 없이 별도의 위치에 생긴다. 두개 일 땐 왼쪽, 세 개 이상일 땐 아래쪽</p>
</li>
<li><p>alert 말고, actionSheet에서도 마찬가지로 별도로 구분이 된다.</p>
</li>
<li><p>destructive 액션을 하면 빨간색으로 표기가 됨 자동으로! 경고성의 느낌 뭔가 파괴적인 액션일때 경고를 주기 위함</p>
</li>
<li><p>destructive는 alert에서는 candle 처럼 별도의 위치에 추가 되지는 않음</p>
</li>
</ul>
<h3 id="TIP"><a href="#TIP" class="headerlink" title="TIP!"></a>TIP!</h3><ul>
<li>Cmd + ctrl + E : 변수 한 개 이름 바꿀 때 일일이 안바꾸고 한번에 바꿀 수 있음</li>
</ul>
]]></content>
      <categories>
        <category>TIL</category>
      </categories>
      <tags>
        <tag>iOS, Swift, Xcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown Grammar Summary</title>
    <url>/2019/11/markdown/</url>
    <content><![CDATA[<h2 id="FastCampus-Prelearning"><a href="#FastCampus-Prelearning" class="headerlink" title="FastCampus Prelearning"></a>FastCampus Prelearning</h2><ul>
<li>깃헙, Stack Overflow 같은 곳에서 사용한다.</li>
<li>마크다운 파일의 확장자는 .md 혹은 .markdown 이다.</li>
</ul><h2 id="1-헤더"><a href="#1-헤더" class="headerlink" title="1. 헤더"></a>1. 헤더</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># h1</span><br><span class="line">## h2</span><br><span class="line">### h3</span><br><span class="line">#### h4</span><br><span class="line">##### h5</span><br><span class="line">###### h6</span><br></pre></td></tr></table></figure><h1 id="h1"><a href="#h1" class="headerlink" title="h1"></a>h1</h1><h2 id="h2"><a href="#h2" class="headerlink" title="h2"></a>h2</h2><h3 id="h3"><a href="#h3" class="headerlink" title="h3"></a>h3</h3><h4 id="h4"><a href="#h4" class="headerlink" title="h4"></a>h4</h4><h5 id="h5"><a href="#h5" class="headerlink" title="h5"></a>h5</h5><h6 id="h6"><a href="#h6" class="headerlink" title="h6"></a>h6</h6><a id="more"></a>


<h2 id="2-인용문"><a href="#2-인용문" class="headerlink" title="2. 인용문"></a>2. 인용문</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; first blockquote</span><br><span class="line">&gt;&gt; second blockquote</span><br><span class="line">&gt;&gt;&gt; third blockquote</span><br></pre></td></tr></table></figure>

<blockquote>
<p>first blockquote. </p>
<blockquote>
<p>second blockquote. </p>
<blockquote>
<p>third blockquote. </p>
</blockquote>
</blockquote>
</blockquote>
<h2 id="3-목록"><a href="#3-목록" class="headerlink" title="3. 목록"></a>3. 목록</h2><h3 id="3-1-순서가-있는-목록"><a href="#3-1-순서가-있는-목록" class="headerlink" title="3.1 순서가 있는 목록"></a>3.1 순서가 있는 목록</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 1st</span><br><span class="line">2. 2nd</span><br><span class="line">3. 3rd</span><br></pre></td></tr></table></figure>

<ol>
<li>1st</li>
<li>2nd</li>
<li>3rd</li>
</ol>
<h3 id="3-2-순서가-없는-목록"><a href="#3-2-순서가-없는-목록" class="headerlink" title="3.2 순서가 없는 목록"></a>3.2 순서가 없는 목록</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 빨강</span><br><span class="line">* 파랑</span><br><span class="line">* 노랑</span><br><span class="line"></span><br><span class="line">+ 빨강</span><br><span class="line">+ 파랑</span><br><span class="line">+ 노랑</span><br><span class="line"></span><br><span class="line">- 빨강</span><br><span class="line">- 파랑</span><br><span class="line">- 노랑</span><br></pre></td></tr></table></figure>

<ul>
<li>빨강</li>
<li>파랑</li>
<li>노랑</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 1단계</span><br><span class="line">+ 2단계</span><br><span class="line">- 3단계</span><br></pre></td></tr></table></figure>

<ul>
<li>1단계</li>
</ul>
<ul>
<li>2단계</li>
</ul>
<ul>
<li>3단계</li>
</ul>
<h2 id="4-코드"><a href="#4-코드" class="headerlink" title="4. 코드"></a>4. 코드</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">this is a normal paragragh</span><br><span class="line">​```this is a code block</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">this is a normal paragragh</span><br><span class="line"></span><br><span class="line">```this is a code block</span><br></pre></td></tr></table></figure>

<h2 id="5-수평선"><a href="#5-수평선" class="headerlink" title="5. 수평선"></a>5. 수평선</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*** =&gt; &apos;*&apos; 기호 세개</span><br><span class="line">--- =&gt; &apos;-&apos; 기호 세개</span><br><span class="line">___ =&gt; &apos;_&apos; 기호 세개</span><br></pre></td></tr></table></figure>

<hr>
<hr>
<hr>
<h2 id="6-링크"><a href="#6-링크" class="headerlink" title="6. 링크"></a>6. 링크</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[구글로 이동하기](https://www.google.com)</span><br></pre></td></tr></table></figure>

<p><a href="https://www.google.com" target="_blank" rel="noopener">구글로 이동하기</a></p>
<h2 id="7-강조"><a href="#7-강조" class="headerlink" title="7. 강조"></a>7. 강조</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*italic*</span><br><span class="line"></span><br><span class="line">_italic_</span><br><span class="line"></span><br><span class="line">**bold**</span><br><span class="line"></span><br><span class="line">__bold__</span><br><span class="line"></span><br><span class="line">~~cancleline~~</span><br></pre></td></tr></table></figure>

<p><em>italic</em></p>
<p><em>italic</em></p>
<p><strong>bold</strong></p>
<p><strong>bold</strong></p>
<p><del>cancleline</del></p>
<h2 id="8-이미지"><a href="#8-이미지" class="headerlink" title="8. 이미지"></a>8. 이미지</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">![markdown](https://upload.wikimedia.org/wikipedia/commons/thumb/4/48/Markdown-mark.svg/220px-Markdown-mark.svg.png)</span><br><span class="line"></span><br><span class="line">![텍스트](이미지 경로)</span><br></pre></td></tr></table></figure>

<p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/4/48/Markdown-mark.svg/220px-Markdown-mark.svg.png" alt="markdown"></p>
<h2 id="9-테이블"><a href="#9-테이블" class="headerlink" title="9. 테이블"></a>9. 테이블</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">|header 1|header 2|header 3|</span><br><span class="line">|:---:|:---:|:---:|</span><br><span class="line">|cell 1|cell 2|cell 3|</span><br><span class="line">|cell 4|cell 5|cell 6|</span><br><span class="line">|cell 7|cell 8|cell 9|</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center">header 1</th>
<th align="center">header 2</th>
<th align="center">header 3</th>
</tr>
</thead>
<tbody><tr>
<td align="center">cell 1</td>
<td align="center">cell 2</td>
<td align="center">cell 3</td>
</tr>
<tr>
<td align="center">cell 4</td>
<td align="center">cell 5</td>
<td align="center">cell 6</td>
</tr>
<tr>
<td align="center">cell 7</td>
<td align="center">cell 8</td>
<td align="center">cell 9</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>study, gitHub, markdown,</tag>
      </tags>
  </entry>
  <entry>
    <title>Git Study</title>
    <url>/2019/11/gitStudy/</url>
    <content><![CDATA[<ul>
<li>PM</li>
</ul><p>: 먼저 repo를 만들어야 함</p><ul>
<li>git-hub 웹사이트</li>
</ul><p>1) repositary 생성 </p><p> : Repositary name : , read-me 체크, Add.gitignore: swift, </p><p>  Add a license: MIT License -&gt; create</p><p>2) Clone with HTTPS 복사하기</p><a id="more"></a>






<ul>
<li>터미널에서</li>
</ul>
<p>1) $ cd Documents/dev  // 작업할 곳으로 이동</p>
<p>2) $ git clone   </p>
<p>  [htts://github.com/PM-github-ID/repo-name.git]</p>
<p>3) $ ls   // repositary가 복사되었는 지 확인하기</p>
<p>4) $ cd repo-name/  // 해당 폴더로 이동</p>
<p>5) $ ls  // LICENSE, README.md 파일이 생성되었나 확인</p>
<p>6) $ git flow init</p>
<p>7) $ git branch  // * master 선택되어 있음</p>
<p>8) $ git branch develop  // ‘develop’ branch 생성</p>
<p>9) $ git branch  // develop, *master</p>
<p>10) $ git checkout develop  // ‘develop’ branch 선택</p>
<p>11) $ touch [파일명]        // 파일 생성</p>
<p>12) $ vi [파일명]   // 파일 편집 후 저장    </p>
<p>13) $ git status  // 현재 상태 확인해보기</p>
<p>14) $ git add [파일명]</p>
<p>15) $ git commit -m “[메세지 입력]”</p>
<p>16) $ git push -u origin develop</p>
<p>​     : github의 username, password 입력</p>
<ul>
<li>github 웹사이트</li>
</ul>
<p>1) repositary로 가서 Branch: master -&gt; Branch: develop으로 변경</p>
<p>\2. 팀원(개발자)</p>
<ul>
<li>github 웹사이트</li>
</ul>
<p>1) PM의 repositary로 가서 새로운 issue 생성</p>
<p>2) 우측 상단에 위치한 Fork 클릭</p>
<p>3) 내 소유가 된 repositary 에서 Clone with HTTPS 복사하기</p>
<ul>
<li>터미널</li>
</ul>
<p>1) $ cd Documents/dev  // 작업할 폴더으로 이동</p>
<p>2) $ git clone [htts://github.com/developer(my)/repo-name.git]</p>
<p>3) $ ls  // repositary가 복사되었는 지 확인하기</p>
<p>4) $ cd practice-github/  // 해당 폴더로 이동</p>
<p>5) $ ls  // LICENSE, README.md 파일이 생성되었나 확인</p>
<p>6) $ git branch  // * master 선택 확인</p>
<p>7) $ git branch develop</p>
<p>8) $ git checkout develop</p>
<p>9) $ git branch  // * develop, master 확인  </p>
<p>10) $ git flow init</p>
<p>11) $ git pull origin develop</p>
<p>12) $ cat [파일]  // PM의 파일이 복사되어 온 것을 확인</p>
<p>13) $ git flow feature start {date-username}</p>
<p>14) $ vi [파일명]  // 파일 수정</p>
<p>15) $ git status</p>
<p>16) $ git add [파일명]</p>
<p>17) $ git commit -m “[메세지 입력]”</p>
<p>18) $ git flow feature finish {date-username}</p>
<p>19) $ git push -u origin develop</p>
<ul>
<li>github 웹페이지 </li>
</ul>
<p>1) pull request 클릭</p>
<p>2) base repository: 팀장 develop &lt;- head repository: 팀원 develop</p>
<p>3) 제목, 내용 쓰고 create pull request 클릭</p>
<p>\3. PM</p>
<ul>
<li>github 웹페이지</li>
</ul>
<p>1) pull request와 issues에 새로운 글이 올라와있는 것 확인</p>
<p>2) pull request - conversation 에서 의견 작성</p>
<p>  : 거부시 해당 의견 작성 후 comment 클릭</p>
<p>\4. 팀원(개발자)</p>
<ul>
<li><p>터미널</p>
</li>
<li><p>$ git branch feature/fb-again        // 새로운 branch 생성</p>
</li>
<li><p>$ vi {파일명}     // 수정진행</p>
</li>
<li><p>$ git status</p>
</li>
<li><p>cat {파일명}</p>
</li>
<li><p>$ git add [파일명]</p>
</li>
<li><p>$ git commit -m “[메세지 입력]”</p>
</li>
<li><p>$ git push -u origin feature/fb-again</p>
</li>
<li><p>$ git checkout develop    // ‘develop’ branch 생성 </p>
</li>
<li><p>$ git merge feature/fb-again     // branch 합치기</p>
<p>10) $ git push origin develop</p>
<p>11) $ git branch -D feature/fb-again</p>
</li>
</ul>
<ul>
<li><p>github 웹사이트 </p>
</li>
<li><p>pull request - commits에서 수정된 사항 확인  </p>
</li>
<li><p>Conversation에 수정 완료 메세지 작성 후 Comment 클릭</p>
</li>
</ul>
<p>\5. PM</p>
<ul>
<li><p>github 웹사이트 </p>
</li>
<li><p>pull request - Conversation 에서 merge pull request 클릭 후 merge confirm 클릭</p>
</li>
<li><p>issues에서 해당 내용 확인 후 Close issue 클릭</p>
</li>
</ul>
<p>* 만약 PM의 repositary가 최근에 업데이트되어 팀원이 PM의 repo를 다시 pull할 필요가 있는 경우,</p>
<ul>
<li>PM</li>
</ul>
<p>: 파일 수정 </p>
<ul>
<li><p>터미널</p>
</li>
<li><p>$ cat {파일명}  // 현재 파일 내용 확인</p>
</li>
<li><p>$ git checkout develop</p>
</li>
<li><p>$ git pull origin develop</p>
</li>
<li><p>$ cat {파일명}  // 업데이트 된 파일 내용 확인</p>
</li>
<li><p>$ vi {파일명}  // 수정 진행</p>
</li>
<li><p>$ git status</p>
</li>
<li><p>$ git add {}</p>
</li>
<li><p>$ git commit -m “”</p>
</li>
<li><p>git push origin develop</p>
</li>
</ul>
<ul>
<li><p>GitHub 웹사이트 </p>
</li>
<li><p>Code - Branch: Develop 으로 변경  // 방금 수정or추가 파일 확인</p>
</li>
</ul>
<p>\2. 팀원(개발자)</p>
<ul>
<li><p>GitHub 웹사이트</p>
</li>
<li><p>PM의 repository 주소 복사하기</p>
</li>
</ul>
<p><a href="https://github.com/PM-github-ID/repo-name.git" target="_blank" rel="noopener">https://github.com/PM-github-ID/repo-name.git</a></p>
<ul>
<li><p>터미널</p>
<p>1)$ git remote add pmorigin <a href="https://github.com/PM-github-ID/repo-name.git" target="_blank" rel="noopener">https://github.com/PM-github-ID/repo-name.git</a></p>
</li>
<li><p>$ git remote        // origin, pmorigin(생성) 확인</p>
</li>
<li><p>$ git remote get-url origin</p>
</li>
</ul>
<p>​    // <a href="https://github.com/developer(my)/repo-name.git" target="_blank" rel="noopener">https://github.com/developer(my)/repo-name.git</a></p>
<ul>
<li>$ git remote get-url pmorigin</li>
</ul>
<p>​    // <a href="https://github.com/PM-github-ID/repo-name.git" target="_blank" rel="noopener">https://github.com/PM-github-ID/repo-name.git</a></p>
<ul>
<li>$ git pull pmorigin develop</li>
<li>$ vi {파일명}        // 팀장이 수정한 파일이 복사되어진 것을 확인</li>
<li>작업 진행</li>
</ul>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>git, github</tag>
      </tags>
  </entry>
  <entry>
    <title>ViewController Life Cycle</title>
    <url>/2019/11/25/</url>
    <content><![CDATA[<h1 id="ViewControllerExample-프로젝트-생성"><a href="#ViewControllerExample-프로젝트-생성" class="headerlink" title="ViewControllerExample 프로젝트 생성"></a>ViewControllerExample 프로젝트 생성</h1><ul>
<li><p>iOS 12 시뮬레이터 다운로드</p>
</li>
<li><p>오늘은 스토리보드 사용 안할 거임 아래의 코드를 씬델리데이트에 적어줘야한다. (iOS 13)</p>
</li>
</ul><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">guard</span> <span class="keyword">let</span> windowScene = (scene <span class="keyword">as</span>? <span class="type">UIWindowScene</span>) <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">        </span><br><span class="line">        window = <span class="type">UIWindow</span>(windowScene: windowScene)</span><br><span class="line">        window?.backgroundColor = .systemBackground</span><br><span class="line">        window?.rootViewController = <span class="type">ViewController</span>()</span><br><span class="line">        window?.makeKeyAndVisible()</span><br></pre></td></tr></table></figure><a id="more"></a>


<ul>
<li>iOS 12를 타겟으로 할 때는 씬델리게이트를 지우던지 아래의 코드를 적어준다.</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 아래 코드들은 iOS 13에서부터 사용한다! 라고 적어줌. 씬델리게이트를 지우지 않을 때 이 코드를 적는다.</span></span><br><span class="line"><span class="meta">@available</span>(iOS <span class="number">13</span>, *)</span><br></pre></td></tr></table></figure>

<ul>
<li>그리고 12 때는 앱델리게이트만 있었는데 지금은 아래 코드가 씬델리데이트에 나옴, 이걸 앱델리게이트에 적어줘야됨</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"></span><br><span class="line"><span class="meta">@UIApplicationMain</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppDelegate</span>: <span class="title">UIResponder</span>, <span class="title">UIApplicationDelegate</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 이 부분 추가</span></span><br><span class="line">    <span class="keyword">var</span> window: <span class="type">UIWindow?</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">application</span><span class="params">(<span class="number">_</span> application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: <span class="keyword">Any</span>]?)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        </span><br><span class="line">      <span class="comment">// 이 부분 추가</span></span><br><span class="line">        window = <span class="type">UIWindow</span>(frame: <span class="type">UIScreen</span>.main.bounds)</span><br><span class="line">        window?.backgroundColor = .white</span><br><span class="line">        window?.rootViewController = <span class="type">ViewController</span>()</span><br><span class="line">        window?.makeKeyAndVisible()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>12는 앱델리게이트, 13부터는 씬델리게이트</li>
</ul>
<p>이렇게 하면 12에선 문제가 안됨. 그런데 13에서 문제가 생김</p>
<p>12든 13이든 앱델리게이트가 먼저 실행이 되는데, </p>
<p>13에서는 앱델리게이트를 실행한 후 씬델리게이트로 넘어가서 비슷한 코드가 또 실행됨</p>
<p>그래서 다음과 같이 if 문으로 처리해 준다.</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"></span><br><span class="line"><span class="meta">@UIApplicationMain</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppDelegate</span>: <span class="title">UIResponder</span>, <span class="title">UIApplicationDelegate</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> window: <span class="type">UIWindow?</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">application</span><span class="params">(<span class="number">_</span> application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: <span class="keyword">Any</span>]?)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> #available(iOS <span class="number">13.0</span>, *) &#123;</span><br><span class="line">            </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            window = <span class="type">UIWindow</span>(frame: <span class="type">UIScreen</span>.main.bounds)</span><br><span class="line">                  window?.backgroundColor = .white</span><br><span class="line">                  window?.rootViewController = <span class="type">ViewController</span>()</span><br><span class="line">                  window?.makeKeyAndVisible()</span><br><span class="line">        &#125;</span><br><span class="line">      </span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>다음은 뷰 컨트롤러로 넘어가서 뷰 컨트롤러의 생명주기를 콘솔에 찍어보자!</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"viewDidLoad"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewWillAppear</span><span class="params">(<span class="number">_</span> animated: Bool)</span></span> &#123;</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">"viewWillAppear"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidAppear</span><span class="params">(<span class="number">_</span> animated: Bool)</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"viewDidAppear"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewWillDisappear</span><span class="params">(<span class="number">_</span> animated: Bool)</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"viewWillDisAppear"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidDisappear</span><span class="params">(<span class="number">_</span> animated: Bool)</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"viewDidDisAppear"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>ios 13과 12가 다른 점이 버튼으로 다음 페이지를 넘어갈 때,</li>
<li>13은 다음 창이 밑에서 올라오는데 꽉 안차고 전 화면이 아래에 깔려있는것이 눈에 보임 (card style modal presentation)</li>
<li>그리고 13은 새로운 화면을 밑으로 내려 버리는 액션으로 전 화면으로 돌아갈 수 있음</li>
<li>12 때는 그게 안됐었다!</li>
<li>풀스크린으로 설정하면 12처럼 꽉 차는 화면으로 되긴 함 12까지는 이게 기본이었던 거임</li>
<li>13부터는 선택사항</li>
</ul>
<h2 id="Full-Screen-Presentation-Style"><a href="#Full-Screen-Presentation-Style" class="headerlink" title="Full Screen Presentation Style"></a>Full Screen Presentation Style</h2><ol>
<li>nextVC 생성</li>
<li>VC 복붙!</li>
<li>버튼 생성</li>
<li>nextVC에도 버튼 뒤로가는 버튼 생성</li>
</ol>
<ul>
<li>뒤로가기 두가지 방법    <ul>
<li>뷰컨트롤러 다시 띄우는 방법</li>
<li>Dismiss 로 뒤로 돌리는 방법</li>
</ul>
</li>
</ul>
<ul>
<li><p>라이프사이클 확인!</p>
</li>
<li><p>켜는 순간</p>
<ul>
<li><p>viewDidLoad</p>
<p>viewWillAppear</p>
<p>viewDidAppear</p>
</li>
</ul>
</li>
<li><p>이 상태에서 버튼 눌러서 nVC 호출!</p>
<ul>
<li><p>next viewDidLoad</p>
<p><strong>viewWillDisAppear</strong></p>
<p>next viewWillAppear</p>
<p>next viewDidAppear</p>
<p><strong>viewDidDisAppear</strong></p>
</li>
</ul>
</li>
<li><p>다시 VC로 복귀</p>
<ul>
<li><p><strong>next viewWillDisAppear</strong></p>
<p>viewWillAppear</p>
<p>viewDidAppear</p>
<p><strong>next viewDidDisAppear</strong></p>
<p><strong>deinit</strong></p>
</li>
</ul>
</li>
</ul>
<h3 id="ViewController-코드"><a href="#ViewController-코드" class="headerlink" title="ViewController 코드"></a>ViewController 코드</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"viewDidLoad"</span>)</span><br><span class="line">        setUI()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">setUI</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> #available(iOS <span class="number">13.0</span>, *) &#123;</span><br><span class="line">          view.backgroundColor = .systemBackground</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          view.backgroundColor = .white</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> button = <span class="type">UIButton</span>(type: .system)</span><br><span class="line">        button.frame = <span class="type">CGRect</span>(x: <span class="number">50</span>, y: <span class="number">100</span>, width: <span class="number">100</span>, height: <span class="number">50</span>)</span><br><span class="line">        button.center = view.center</span><br><span class="line">        button.setTitle(<span class="string">"Btn"</span>, <span class="keyword">for</span>: .normal)</span><br><span class="line">        button.addTarget(<span class="keyword">self</span>, action: #selector(didTapButton(<span class="number">_</span>:)), <span class="keyword">for</span>: .touchUpInside)</span><br><span class="line">        view.addSubview(button)</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">    </span><br><span class="line">    <span class="meta">@objc</span> <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">didTapButton</span><span class="params">(<span class="number">_</span> sender: UIButton)</span></span> &#123;</span><br><span class="line">      <span class="comment">// </span></span><br><span class="line">        <span class="keyword">let</span> nextVC = nextViewController()</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 기본은 모달임, 풀스크린으로 변경!</span></span><br><span class="line">        nextVC.modalPresentationStyle = .fullScreen</span><br><span class="line">        present(nextVC, animated: <span class="literal">true</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewWillAppear</span><span class="params">(<span class="number">_</span> animated: Bool)</span></span> &#123;</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">"viewWillAppear"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidAppear</span><span class="params">(<span class="number">_</span> animated: Bool)</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"viewDidAppear"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewWillDisappear</span><span class="params">(<span class="number">_</span> animated: Bool)</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"viewWillDisAppear"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidDisappear</span><span class="params">(<span class="number">_</span> animated: Bool)</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"viewDidDisAppear"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="NextViewController-코드"><a href="#NextViewController-코드" class="headerlink" title="NextViewController 코드"></a>NextViewController 코드</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">nextViewController</span>: <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"next viewDidLoad"</span>)</span><br><span class="line">        setUpBtn()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">     <span class="function"><span class="keyword">func</span> <span class="title">setUpBtn</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="comment">// 버튼 객체 생성</span></span><br><span class="line">        <span class="keyword">let</span> button = <span class="type">UIButton</span>(type: .system)</span><br><span class="line">        <span class="comment">// 사이즈 정의</span></span><br><span class="line">        button.frame.size = <span class="type">CGSize</span>(width: <span class="number">100</span>, height: <span class="number">50</span>)</span><br><span class="line">        <span class="comment">// 위치 정의</span></span><br><span class="line">        button.center = view.center</span><br><span class="line">        <span class="comment">// 타이틀 정의</span></span><br><span class="line">        button.setTitle(<span class="string">"Btn"</span>, <span class="keyword">for</span>: .normal)</span><br><span class="line">        <span class="comment">// 액션 추가</span></span><br><span class="line">        button.addTarget(<span class="keyword">self</span>, action: #selector(didTapButton(<span class="number">_</span>:)), <span class="keyword">for</span>: .touchUpInside)</span><br><span class="line">        <span class="comment">// 뷰에 추가</span></span><br><span class="line">        view.addSubview(button)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 액션 정의, dismiss는 뷰를 위에 덧씌우는것이 아니라 메모리에서 해제하는 거</span></span><br><span class="line">    <span class="meta">@objc</span> <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">didTapButton</span><span class="params">(<span class="number">_</span> sender: UIButton)</span></span> &#123;</span><br><span class="line">        dismiss(animated: <span class="literal">true</span>)</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewWillAppear</span><span class="params">(<span class="number">_</span> animated: Bool)</span></span> &#123;</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">"next viewWillAppear"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidAppear</span><span class="params">(<span class="number">_</span> animated: Bool)</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"next viewDidAppear"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewWillDisappear</span><span class="params">(<span class="number">_</span> animated: Bool)</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"next viewWillDisAppear"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidDisappear</span><span class="params">(<span class="number">_</span> animated: Bool)</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"next viewDidDisAppear"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 얘가 호출이 되면 메모리에서 잘 사라진 것!</span></span><br><span class="line">    <span class="keyword">deinit</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"deinit"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li><p><strong>Q. 어떻게 해야 dismiss 시에 VC의 배경색을 바꿀 수 있을까?</strong></p>
</li>
<li><p>nextViewController로 이동</p>
<ul>
<li><p>presentedViewController =&gt; nil (내가 띄운 뷰 컨트롤러)</p>
</li>
<li><p>presentingViewController =&gt; VC (나를 띄운 뷰 컨트롤러)</p>
</li>
<li><p>presentingViewController?.presentedViewController =&gt; nVC (나를 띄우고 있는 뷰컨이 띄운 뷰컨)</p>
</li>
</ul>
</li>
<li><p>그래서 애초에 VC로 가서 찍어보면 그냥 다 nil nil nil 내가 띄운 놈도 없고, 나를 띄운 놈도 없으니..</p>
</li>
<li><p>그렇지만 띄우고 나서 찍어보면 다 찍힌다. </p>
</li>
</ul>
<hr>
<ul>
<li><strong>Q. 일단 뷰 컨트롤러에서 버튼 객체 생성 부분을 메소드 바깥으로 뺀 뒤, 아까처럼 nVC에서 다시 돌아갈 때, 버튼의 타이틀을 바꿔보자!</strong></li>
</ul>
<ul>
<li>아까처럼 presenting으로 하면 자동완성에 버튼 객체가 안뜬다 왜 안뜰까?</li>
<li>타입이 다름. presentingViewController의 타입은 UIViewController고, VC는 ViewController 타입임 그래서 타입 캐스팅을 통해 접근해야 한다.</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">guard</span>  <span class="keyword">let</span> vc = presentingViewController <span class="keyword">as</span>? <span class="type">ViewController</span> <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        vc.button.setTitle(<span class="string">"클릭"</span>, <span class="keyword">for</span>: .normal)</span><br></pre></td></tr></table></figure>



<ul>
<li><strong>Q. 만약 VC가 first, second, third 이렇게 세 개 있으면 어떻게 third에서 first 로 한번에 접근 할 수 있을까? =&gt; dismiss 한다고 가정.</strong> </li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">presentingViewController?presentingViewController?.dismiss</span><br></pre></td></tr></table></figure>



<h2 id="Card-Style-Modal-Presentation"><a href="#Card-Style-Modal-Presentation" class="headerlink" title="Card-Style Modal Presentation"></a>Card-Style Modal Presentation</h2><ul>
<li><p>풀스크린과는 life Cycle에 차이가 있음</p>
</li>
<li><p>dismiss 외에 isModalInPresentation 이라는 속성이 따로 있음</p>
</li>
<li><p>특정 조건을 만족해야 모달을 끌 수 있음 dismiss 제스쳐 사용가능</p>
</li>
<li><p>드래그 제스쳐와 관련된 코드가 있음 (선택사항)</p>
</li>
<li><p>disAppear가 호출이 안됨</p>
</li>
</ul>
]]></content>
      <categories>
        <category>TIL</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title>UI Guide</title>
    <url>/2019/11/22/</url>
    <content><![CDATA[<h1 id="UI-Guide"><a href="#UI-Guide" class="headerlink" title="UI Guide"></a>UI Guide</h1><ul>
<li>포인트: </li>
<li>픽셀 : </li>
</ul><p>디스플레이가 좋아질 수록, 1 포인트안에 픽셀이 들어가는 갯수가 점점 커짐</p><p>물리적인 크기는 동일하더라도 픽셀의 화소수가 달라짐</p><p>그래서 개발시 사용하는 좌표가 달라짐</p><p>Ex)</p><p>오리지널 아이폰 1 point = 1 pixel</p><p>아이폰5 1 point = 4 pixel</p><a id="more"></a>






<h2 id="View-Frame"><a href="#View-Frame" class="headerlink" title="View Frame"></a>View Frame</h2><p>view frame의 좌표는 상위뷰를 기준으로 결정</p>
<p>버튼 ui의 좌표 역시 기준을 어떤 뷰로 잡느냐에 따라 같은 위치여도 좌표값은 달라진다.</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"><span class="keyword">import</span> PlaygroundSupport</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyViewController</span> : <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">loadView</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">let</span> view = <span class="type">UIView</span>()</span><br><span class="line">        view.backgroundColor = .white</span><br><span class="line">        <span class="keyword">self</span>.view = view</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">let</span> greenView = setUpSuperView()</span><br><span class="line">        <span class="keyword">let</span> redView = setUpSubview(superVIew: greenView)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">setUpSuperView</span><span class="params">()</span></span> -&gt; <span class="type">UIView</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> greenView = <span class="type">UIView</span>()</span><br><span class="line">        <span class="comment">// 흰색 바탕뷰로부터 50,50 떨어진 위치</span></span><br><span class="line">        greenView.frame = <span class="type">CGRect</span>(x: <span class="number">50</span>, y: <span class="number">50</span>, width: <span class="number">200</span>, height: <span class="number">200</span>)</span><br><span class="line">        greenView.backgroundColor = .green</span><br><span class="line">        view.addSubview(greenView)</span><br><span class="line">        <span class="keyword">return</span> greenView</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">setUpSubview</span><span class="params">(superVIew: UIView)</span></span> -&gt; <span class="type">UIView</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> redVIew = <span class="type">UIView</span>()</span><br><span class="line">        <span class="comment">// 슈퍼뷰가 그린뷰니깐 그린뷰를 기준으로 100, 100 만큼 떨어진 위치</span></span><br><span class="line">        redVIew.frame = <span class="type">CGRect</span>(x: <span class="number">100</span>, y: <span class="number">100</span>, width: <span class="number">80</span>, height: <span class="number">80</span>)</span><br><span class="line">        redVIew.backgroundColor = .red</span><br><span class="line">        superVIew.addSubview(redVIew)</span><br><span class="line">        <span class="keyword">return</span> redVIew</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">PlaygroundPage</span>.current.liveView = <span class="type">MyViewController</span>()</span><br></pre></td></tr></table></figure>



<p> greenView.frame.origin = CGPoint(x: 0, y: 0) //좌표를 바꿔주는 속성</p>
<h2 id="Bounds"><a href="#Bounds" class="headerlink" title="Bounds"></a>Bounds</h2><p>프레임 : 내가 추가할 서브뷰의 상위 뷰를 기준으로 좌표가 결정됨</p>
<p>바운드 : 객체 자신을 기준으로 0,0 의 좌표가 나타남 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">연습</span><br></pre></td></tr></table></figure>



<h1 id="Content-Mode"><a href="#Content-Mode" class="headerlink" title="Content Mode"></a>Content Mode</h1><ul>
<li><p>scaleToFill : 늘림</p>
</li>
<li><p>scaleAspectFit : 늘리는 대신 비율도 유지 -&gt; 모자란 부분이 생김, 꽉 차진 않음</p>
</li>
<li><p>scaleAspectFill: 늘리는 대신 비율도 유지 -&gt; 모자란 부분 없이 꽉 참, 대신 화면 밖으로 넘어갈 정도로 커질 수 있음</p>
</li>
<li><p>이미지 뷰에서만 사용 된다고 보면 된다</p>
</li>
</ul>
]]></content>
      <categories>
        <category>TIL</category>
      </categories>
      <tags>
        <tag>iOS, Swift</tag>
      </tags>
  </entry>
  <entry>
    <title>App Life Cycle</title>
    <url>/2019/11/21/</url>
    <content><![CDATA[<h1 id="Xcode"><a href="#Xcode" class="headerlink" title="Xcode"></a>Xcode</h1><ol>
<li>프로젝트 생성</li>
</ol><ul>
<li>include Unit test : 테스트 코드를 짜서 미리 앱이 돌아가기전에 체크</li>
<li>등등은 아직 신경 안써도 됨 check 풀고 시작</li>
</ul><p>통합 개발환경! IDE = editor, compiler, debugger</p><p>여러가지 많지만 xcode는 macOS에서만 실행 가능</p><a id="more"></a>



<p>툴바, 네비게이터, 에디터, 유틸리티, 디버그 영역 으로 창이 나뉜다.</p>
<p>프로젝트 전반에 대한 설명은 네비게이터 맨 윗 파일 (파란색)</p>
<p>유틸리티 옆의 미니맵을 통해 원하는 코드줄로 이동 가능</p>
<p>그 옆의 버튼은 에디터 창을 여러개 띄우는 버튼</p>
<p>Option 키 누른 상태로 띄우면 에디터가 아래로 뜬다.</p>
<p>Show or hide code review 버튼은 깃을 사용 할 때 코드의 수정 전과 후를 비교할 수 있도록 도와주는 버튼</p>
<p>점프바를 통해 파일 간 이동이 가능하다. 파일 내부에서 원하는 메소드 줄로도 이동 가능</p>
<h1 id="The-App-Life-Cycle"><a href="#The-App-Life-Cycle" class="headerlink" title="The App Life Cycle"></a>The App Life Cycle</h1><ul>
<li>앱은 기본적으로 UIApplication 이 존재한다. 기본 시스템을 제공하는 클래스!</li>
<li>생명주기!</li>
<li>앱의 생명주기, 컨트롤러의 생명주기 등등 </li>
<li>시작부터 끝까지 각 단계에 대한 처리가 잘 알아두어야 앱 개발시 이해하고, 다룰 수 있다.</li>
</ul>
<h2 id="앱의-실행-과정"><a href="#앱의-실행-과정" class="headerlink" title="앱의 실행 과정"></a>앱의 실행 과정</h2><ol>
<li><p>User taps app icon</p>
</li>
<li><p>main() 함수 실행</p>
<ul>
<li>Swift는 JAVA나 C와는 달리 어노테이션으로 main 함수를 대체한다.</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="meta">@UIApplicationMain</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>main함수가 UIApplicationMain() 함수 호출 -&gt; UIApplication 객체 생성</p>
<ul>
<li>UIApplicationMain 함수는 코코아 터치 프레임워크에서 앱의 라이프 사이클을 시작하는 함수</li>
<li>UIApplication 객체의 인스턴스를 만들고, 해당 객체의 앱으로서 기능하기 위한 기반을 마련하는데, 이 과정을 앱 로딩 프로세스라 한다.</li>
</ul>
</li>
<li><p>Load main UI File</p>
</li>
<li><p>First initialization</p>
</li>
<li><p>Restore UI State</p>
</li>
<li><p>Final initialization</p>
</li>
</ol>
<p><strong>Q.  메인함수는 왜 필요한가요?</strong></p>
<ul>
<li>앱의 시작점이라고 생각하면 된다. 메인함수로부터 모든게 다 시작된다. 시스템이 앱을 구동하게 만드는 함수</li>
<li>이 앱이 시작되고 나면 이벤트 루프가 돌게 된다. </li>
</ul>
<h2 id="앱의-구조"><a href="#앱의-구조" class="headerlink" title="앱의 구조"></a>앱의 구조</h2><p><img src="https://user-images.githubusercontent.com/15086391/69540052-1f86ea00-0fc9-11ea-9b44-127f1cb06629.png" alt="structure"></p>
<ul>
<li>MVC 패턴 (Model / View / Controller)</li>
<li>데이터 / 화면 구성에 사용되는 오브젝트 / View 와 Model 사이에서 중개 해주는 역할</li>
</ul>
<h2 id="상태-변화"><a href="#상태-변화" class="headerlink" title="상태 변화"></a>상태 변화</h2><p><img src="https://user-images.githubusercontent.com/15086391/69540050-1eee5380-0fc9-11ea-876a-e5fb1bf454c5.png" alt="status"></p>
<ul>
<li>Not Running : 실행되지 않았거나, 시스템에 의해 종료된 상태</li>
<li>Fore ground : 앱이 화면에 띄워진 상태 (Inactive 상태로 잠깐 돌입 -&gt; Active)</li>
<li>Inactive : 실행중이지만 이벤트를 받고 있지 않은 상태. 예를 들면 앱 실행중 미리알림이나, 통화중일 때 해당 화면이 덮여서 앱이 실질적으로 이벤트를 받지 못하는 상태를 뜻함</li>
<li>Active : 앱이 화면에서 실질적으로 점유하고 있는 상황</li>
<li>다른 앱으로 전환하거나, home 버튼을 눌러서 바탕화면으로 가면 또 잠깐의 inactive로 간담에, back ground 상태로 이동</li>
<li>Back ground : 백그라운드 상태에서도 동작을 하고 있는 상태. 음악앱 같은 경우! 화면을 점유하고 있지는 않지만 여전히 동작중인 상태</li>
<li>Suspended : 백그라운드 상태에서 멈춘 상태, 빠른 재 실행을 위하여 메모리에는 남아있지만, 동작은 하지 않는 단계</li>
<li>메모리가 부족하면 완전히 종료된다. not running 상태</li>
</ul>
<ul>
<li>보통 현재 버전보다 -3 까지 지원을 하고, 좀 더 넓게 지원하면 -4 버전까지도 지원한다. 좁게는 -2</li>
</ul>
<h2 id="Background-Modes-for-apps"><a href="#Background-Modes-for-apps" class="headerlink" title="Background Modes for apps"></a>Background Modes for apps</h2><p><img src="https://user-images.githubusercontent.com/15086391/69540046-1e55bd00-0fc9-11ea-8e63-43b83de46dea.png" alt="background"></p>
<ul>
<li>백그라운드에서 발생할 수 있는 이벤트들은 제한되어 있다. pt 참조<ul>
<li>Audio &amp; Air Play, Location Updates, Voice over IP….</li>
<li>etc…</li>
</ul>
</li>
</ul>
<p><a href="https://www.raywenderlich.com/5817-background-modes-tutorial-getting-started" target="_blank" rel="noopener">https://www.raywenderlich.com/5817-background-modes-tutorial-getting-started</a></p>
<ul>
<li><p>top level 에서는 print 메소드 사용 불가 왜?</p>
</li>
<li><p>ob-c 에서는 메인 함수를 미리 작성을 해두어야 했는데 swift에서는 @UIApplicationMain 이라는 코드로 대체</p>
</li>
<li><p>자바에서 메인 함수에 해당하는 부분이라고 보면 된다.</p>
</li>
</ul>
<ul>
<li><h2 id="Scene-delegate"><a href="#Scene-delegate" class="headerlink" title="Scene delegate"></a>Scene delegate</h2></li>
</ul>
<p>[ SceneDelegate 사용할 때 ]</p>
<ol>
<li>iOS 13 미만일 때 (현업이나 개인앱 낼 때)<pre><code>1) available 명시, AppDelegate에 window 프로퍼티 추가</code></pre></li>
<li>iOS 13 이상 + SceneDelegate 사용 기준 (공부할 때)<br>  1) AppDelegate랑 SceneDelegate 무시// [ SceneDelegate 사용하지 않을 때  </li>
</ol>
<p>[AppDelegate만 사용할 때 ]</p>
<ol>
<li>SceneDele    gate 파일 삭제</li>
<li>AppDelegate에서 Scene관련 메서드 삭제</li>
<li>Info.plist에서 Application Scene Manifest 키 삭제// Xcode 10까지는 AppDelegate.swift가 기본값</li>
<li>Xcode 11부터 SceneDelegate.swift가 기본값</li>
</ol>
<h2 id="UI-구성"><a href="#UI-구성" class="headerlink" title="UI 구성"></a>UI 구성</h2><ul>
<li><p>스토리 보드를 사용하는 방법</p>
<ul>
<li>Cmd + shift + l 로 뷰 컨트롤러 추가</li>
</ul>
</li>
<li><p>코드로 ui를 배치하는 방법</p>
<ul>
<li>둘다 장단점이 있고, 재사용성이 더 좋은듯. </li>
<li>코드로 짜는 것을 더 선호하는 편이다.</li>
<li>팀프로젝트할 때는 어떤 방식으로 하자고 미리 협의 후 시작!</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>시스템 오렌지, 시스템 블루 컬러.. 왜 이름 이렇게 붙였으까?</li>
<li>다크모드와 연관이 있다. 시스템 컬러로 지정해버리면 다크모드 일 때와 라이트 모드일 때 컬러가 달라짐</li>
<li>Alpha 값은 투명도 조절</li>
<li>0이면 안보이고 1이면 원색으로!</li>
<li>시스템 컬러는 hig 에서 다크와 라이트가 어떻게 다른지 볼 수 있음!</li>
</ul>
<h2 id="Story-Board"><a href="#Story-Board" class="headerlink" title="Story Board!"></a>Story Board!</h2><ul>
<li><p>is initialview : 화살표로 이동</p>
</li>
<li><p>코드로 시작 뷰를 지정하면 스토리 뷰의 화살표 지정은 무시 된다.</p>
</li>
</ul>
<h3 id="AppDelegate-swift"><a href="#AppDelegate-swift" class="headerlink" title="AppDelegate.swift"></a>AppDelegate.swift</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">window = <span class="type">UIWindow</span>(frame: <span class="type">UIScreen</span>.main.bounds)</span><br><span class="line">window?.rootViewController = <span class="type">ViewController</span>()</span><br><span class="line">window?.makeKeyAndVisible()</span><br></pre></td></tr></table></figure>



<h3 id="SceneDelegate"><a href="#SceneDelegate" class="headerlink" title="SceneDelegate"></a>SceneDelegate</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">guard</span> <span class="keyword">let</span> windowScene = (scene <span class="keyword">as</span>? <span class="type">UIWindowScene</span>) <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">    window = <span class="type">UIWindow</span>(windowScene: windowScene)</span><br><span class="line">    window?.rootViewController = <span class="type">ViewController</span>()</span><br><span class="line">    window?.makeKeyAndVisible() (edited)</span><br></pre></td></tr></table></figure>



<p>얘네를 남겨두고 스토리보드에 작업해봤자 소용없음! 주의!!</p>
<h3 id="IBOutlet과-IBAction의-차이점"><a href="#IBOutlet과-IBAction의-차이점" class="headerlink" title="IBOutlet과 IBAction의 차이점?"></a>IBOutlet과 IBAction의 차이점?</h3><ul>
<li>Action : 버튼의 동작을 정의</li>
<li>Outlet : 버튼의 속성을 정의</li>
</ul>
<h2 id="오늘-결과물"><a href="#오늘-결과물" class="headerlink" title="오늘 결과물"></a>오늘 결과물</h2><p><img src="https://user-images.githubusercontent.com/15086391/69540048-1eee5380-0fc9-11ea-9878-662cbaf298d6.png" alt="result"></p>
]]></content>
      <categories>
        <category>TIL</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title>OOP &amp; Access Control</title>
    <url>/2019/11/19/</url>
    <content><![CDATA[<h1 id="Access-Control-amp-OOP"><a href="#Access-Control-amp-OOP" class="headerlink" title="Access Control &amp; OOP"></a>Access Control &amp; OOP</h1><ul>
<li>다른 모듈의 코드 또는 다른 소스 파일 등으로부터 접근을 제한하는 것</li>
<li>세부 구현 내용을 숨기고 접근할 수 있는 인터페이스 지정 가능</li>
</ul><ul>
<li>Access levels</li>
</ul><ol>
<li>open : class에만 붙일 수 있음 struct와 enum은 public 부터 가능</li>
<li>public : </li>
<li>internal : 정의 모듈의 모든 소스 파일 내에서 사용되지만, 해당 모듈 외부의 소스파일에서는 사용되지 않도록 합니다.</li>
<li>fileprivate : 같은 클래스 파일 내에서만!</li>
<li>private : 클래스 내에서만 사용하기 위해 범위를 제한!</li>
</ol><a id="more"></a>


<h2 id="Nested-types"><a href="#Nested-types" class="headerlink" title="Nested types"></a>Nested types</h2><ul>
<li>프로퍼티 각각에 명시해 주는 것과, 클래스 앞에 명시해 주는 것 접근을 제한하는 범위에 차이가 있다.</li>
<li>open 클래스여도 멤버들의 제한 레벨은 기본값이 따로 정해져있다. 클래스의 제한 수준을 따르는 것은 아님</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">클래스의 제한 수준 -&gt; 멤버의 제한 수준(기본 값)</span><br><span class="line"></span><br><span class="line">Private -&gt; Fileprivate </span><br><span class="line"></span><br><span class="line">Fileprivate -&gt; Fileprivate 같은 파일 내에서만 접근 가능</span><br><span class="line"></span><br><span class="line">Internal -&gt; Internal</span><br><span class="line"></span><br><span class="line">Public -&gt; Internal</span><br><span class="line"></span><br><span class="line">Open -&gt; Internal</span><br></pre></td></tr></table></figure>

<ul>
<li>private 클래스는 어차피 클래스 자체에 접근이 안되기 때문에 멤버에 제한 수준을 붙여봐야 의미없다</li>
<li>그런데 아예 private 클래스를 아무도 접근을 못한다면 만드는 의미가 없기 때문에</li>
<li>filePrivate와 비슷한 수준의 의미를 가지게 된다.</li>
<li>보통은 한 파일에 한 클래스를 사용하기 때문에 filePrivate 는 잘 안쓴다</li>
</ul>
<h2 id="Getters-amp-Setters"><a href="#Getters-amp-Setters" class="headerlink" title="Getters &amp; Setters"></a>Getters &amp; Setters</h2><ul>
<li>Getter 읽어오는 애</li>
<li>Setter 입력하는 애</li>
</ul>
<ul>
<li><p>값이 변경 될 때마다, numberOfEdits가 1씩 올라감</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class TrackedString &#123;</span><br><span class="line">//  var numberOfEdits = 0</span><br><span class="line"></span><br><span class="line">//  private var numberOfEdits = 0</span><br><span class="line">  private(set) var numberOfEdits = 0</span><br><span class="line"></span><br><span class="line">  var value: String = &quot;&quot; &#123;</span><br><span class="line">    didSet &#123;</span><br><span class="line">      numberOfEdits += 1</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">let trackedString = TrackedString()</span><br><span class="line">trackedString.numberOfEdits</span><br><span class="line">trackedString.value = &quot;This string will be tracked.&quot;</span><br><span class="line">trackedString.numberOfEdits</span><br><span class="line"></span><br><span class="line">trackedString.value += &quot; This edit will increment numberOfEdits.&quot;</span><br><span class="line">trackedString.numberOfEdits</span><br><span class="line"></span><br><span class="line">trackedString.value = &quot;value changed&quot;</span><br><span class="line">trackedString.numberOfEdits</span><br><span class="line"></span><br><span class="line">//trackedString.numberOfEdits = 0</span><br><span class="line">//trackedString.numberOfEdits</span><br></pre></td></tr></table></figure>

<p>예를 들면 책이 한번 개정 될때마다 개정판 번호를 올리는 그런식</p>
<p>접근이 안되서 함부로 수정은 안되는데, 접근 조차도 안되는 것이 문제다!</p>
<p>그래서 setter만 private를 걸면 직접 수정은 못한다.</p>
</li>
<li><p>Getter, setter 분리하여 제한 수준 설정 가능</p>
</li>
</ul>
<h2 id="Enumertaion-Types"><a href="#Enumertaion-Types" class="headerlink" title="Enumertaion Types"></a>Enumertaion Types</h2><ul>
<li><p>다음과 같이 각 case 별로 개별적인 접근 수준 설정 불가</p>
</li>
<li><pre><code class="swift"><span class="class"><span class="keyword">enum</span> 방위2 </span>{
<span class="comment">//  fileprivate case 동</span>
<span class="comment">//  fileprivate case 서</span>
<span class="comment">//  fileprivate case 남</span>
<span class="comment">//  fileprivate case 북</span>
<span class="comment">//}</span>

&lt;!--￼<span class="number">2</span>--&gt;

코숏은 캣을 상속만 받고 아무것도 정의 하지 않음.

그래도 캣의 멤버들을 사용할 수 있음 상속 받았으니깐


</code></pre>
</li>
</ul>
<h2 id="Final"><a href="#Final" class="headerlink" title="Final"></a>Final</h2><ul>
<li>더 이상 상속 받을 수 없도록 하는 키워드</li>
<li>final class 는 상속받을 수 없음</li>
</ul>
<h2 id="다형성"><a href="#다형성" class="headerlink" title="다형성"></a>다형성</h2><ul>
<li>다양한 형태로 나타날 수 있는 능력!</li>
<li>동일한 요청에 각기 다른 방식으로 응답할 수 있도록 만드는 것</li>
<li>overriding : 상위 클래스에서 상속 받은 메서드를 하위 클래스에서 필요에 따라 재정의 하는 것</li>
<li>overloading : 동일한 이름의 메서드가 매개 변수의 이름, 타입, 개수 등의차이에 따라 다르게 동작하는 것</li>
</ul>
<h2 id="Overloading"><a href="#Overloading" class="headerlink" title="Overloading"></a>Overloading</h2><ol>
<li>다른 파라미터 이름</li>
<li>다른 파라미터 타입</li>
<li>다른 파라미터 개수</li>
</ol>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printParameter</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"No param"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//func printParameter() -&gt; String &#123;   // Error</span></span><br><span class="line"><span class="comment">//  print("No param")</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printParameter</span><span class="params">(param: Int)</span></span> &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"Input :"</span>, param)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printParameter</span><span class="params">(<span class="number">_</span> param: Int)</span></span> &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"Input :"</span>, param)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"====="</span>)</span><br><span class="line">printParameter() <span class="comment">// 이름이 같은 메서드가 두개라서 뭘 호출해야 할지 모르겠는 상태! 에러남</span></span><br><span class="line">printParameter(param: <span class="number">1</span>)</span><br><span class="line">printParameter(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li><p>단, 인자레이블과, 인자의 타입을 다르게 붙여주면 구분해서 사용할 수 있음</p>
</li>
<li><p>주의할 점은 a는 매개변수명이 param이고, b는 인자레이블이 param이면 에러남 </p>
</li>
<li><p>구분이 안되니깐! 구분만 명확하게 되면 된다!</p>
</li>
</ul>
<h2 id="Overriding"><a href="#Overriding" class="headerlink" title="Overriding"></a>Overriding</h2><ul>
<li><p>상속과 관련이 있다.</p>
</li>
<li><p>상속받은 메서드를 변경해서 사용하는 것</p>
</li>
<li><p>final을 클래스 앞 뿐만 아니라 클래스의 멤버 앞에 붙일수 있다.</p>
</li>
<li><p>멩버 앞의 final이 붙으면 overriding 불가능</p>
</li>
<li><p>저장 프로퍼티의 형태로는 override 사용 불가능</p>
</li>
<li><p>계산 프로퍼티는 가능</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 저장 프로퍼티 X</span></span><br><span class="line"> <span class="comment">//  override var color: UIColor  = .green</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">// 계산 프로퍼티 O</span></span><br><span class="line"> <span class="keyword">override</span> <span class="keyword">var</span> color: <span class="type">UIColor</span> &#123;</span><br><span class="line">   <span class="keyword">get</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">super</span>.color</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">set</span> &#123;</span><br><span class="line">     <span class="keyword">super</span>.color = newValue</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>자식 클래스에서 부모클래스의 프로퍼티를 초기화 할 수 있다.</p>
</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Triangle</span>: <span class="title">Shape</span> </span>&#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">draw</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.draw() <span class="comment">// 부모의 draw메서드를 실행한뒤 아래의 print 메서드 실행</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"draw triangle"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li><p>Q. 아래 문제를 상속을 적용해 해결해보기</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bark() 메서드를 가진 Dog 클래스를 상속받아 Poodle, Husky, Bulldog 이 서로 다르게 짖도록 구현</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">bark</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"멍멍"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Poodle</span>: <span class="title">Dog</span> </span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">bark</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"왈왈"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Husky</span>: <span class="title">Dog</span> </span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">bark</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"컹컹"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bulldog</span>: <span class="title">Dog</span> </span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">bark</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.bark()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"야옹"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p = <span class="type">Poodle</span>()</span><br><span class="line"><span class="keyword">let</span> h = <span class="type">Husky</span>()</span><br><span class="line"><span class="keyword">let</span> b = <span class="type">Bulldog</span>()</span><br><span class="line"></span><br><span class="line">p.bark()</span><br><span class="line">h.bark()</span><br><span class="line">b.bark()</span><br></pre></td></tr></table></figure>







































</li>
</ul>
]]></content>
      <categories>
        <category>TIL</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>swift</tag>
      </tags>
  </entry>
  <entry>
    <title>OOP</title>
    <url>/2019/11/18/</url>
    <content><![CDATA[<h1 id="OOP"><a href="#OOP" class="headerlink" title="OOP"></a>OOP</h1><ul>
<li>value 타입 -&gt; stack 에 저장</li>
<li>reference 타입 -&gt; heap 에 저장 (대표적으로 class)</li>
</ul><p>포인터가 저장됨, 실제 값은 heap안에!</p><p>heap 은 동적 할당.</p><p>stack은 처음부터 만들어질 시점이나, 크기 같은 것들이 처음부터 지정된 상태…</p><a id="more"></a>



<p>Q. 자동차 클래스를 정의 하고, 객체 생성 할 것</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> model = <span class="string">"ionic"</span></span><br><span class="line">    <span class="keyword">var</span> modelYear = <span class="number">2019</span></span><br><span class="line">    <span class="keyword">var</span> color = <span class="string">"black"</span></span><br><span class="line">    <span class="keyword">var</span> startUp = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">var</span> spd = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">drive</span><span class="params">()</span></span> &#123;</span><br><span class="line">        startUp = <span class="literal">true</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"부르릉~"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">park</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> spd == <span class="number">0</span> &#123;</span><br><span class="line">            startUp = <span class="literal">false</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            startUp = <span class="literal">true</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"차가 완전히 멈추면 끄세요!!"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">spdUp</span><span class="params">()</span></span> &#123;</span><br><span class="line">        spd += <span class="number">5</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">reverse</span><span class="params">()</span></span> &#123;</span><br><span class="line">        spd -= <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myCar = <span class="type">Car</span>()</span><br><span class="line">myCar.drive()</span><br><span class="line">myCar.spdUp()</span><br><span class="line">myCar.<span class="built_in">reverse</span>()</span><br><span class="line">myCar.<span class="built_in">reverse</span>()</span><br><span class="line">myCar.<span class="built_in">reverse</span>()</span><br><span class="line">myCar.<span class="built_in">reverse</span>()</span><br><span class="line">myCar.<span class="built_in">reverse</span>()</span><br><span class="line"><span class="built_in">print</span>(myCar.spd)</span><br></pre></td></tr></table></figure>



<h2 id="Class-initialize"><a href="#Class-initialize" class="headerlink" title="Class initialize"></a>Class initialize</h2><ul>
<li>초기화(init)가 불필요한 경우 : 모든 저장 프로퍼티에 초기값이 설정되어 있음</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog1</span> </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> name = <span class="string">"Tory"</span></span><br><span class="line">  <span class="keyword">let</span> color = <span class="string">"Brown"</span></span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">bowwow</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Dog1 Bowwow!"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> tory = <span class="type">Dog1</span>()</span><br><span class="line"><span class="comment">// let tory = Dog1.init()</span></span><br><span class="line">tory.bowwow()</span><br></pre></td></tr></table></figure>



<ul>
<li>초기화(init)가 필요한 경우 : 저장 프로퍼티 중 하나 이상이 초기값 미설정됨</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 클래스 내부에서 init 메서드를 이용하여, 초기화</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog2</span> </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> name: <span class="type">String</span></span><br><span class="line">  <span class="keyword">let</span> color: <span class="type">String</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">init</span>() &#123;</span><br><span class="line">    name = <span class="string">"Tory"</span></span><br><span class="line">    color = <span class="string">"Brown"</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">bowwow</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Dog2 Bowwow!"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> tory2 = <span class="type">Dog2</span>()</span><br><span class="line">tory2.bowwow()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 근데 이렇게 하면 Dog2 클래스의 속성을 변경할 수가 없음</span></span><br></pre></td></tr></table></figure>







<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 파라미터를 통해 초기화 하는 경우!</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog3</span> </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> name: <span class="type">String</span></span><br><span class="line">  <span class="keyword">let</span> color: <span class="type">String</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">init</span>(name: <span class="type">String</span>) &#123;</span><br><span class="line">    <span class="keyword">self</span>.name = name</span><br><span class="line">    color = <span class="string">"Brown"</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">init</span>(name: <span class="type">String</span>, color: <span class="type">String</span>) &#123;</span><br><span class="line">    <span class="keyword">self</span>.name = name</span><br><span class="line">    <span class="keyword">self</span>.color = color</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">bowwow</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Dog3 Bowwow!"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> tory3 = <span class="type">Dog3</span>(name: <span class="string">"Tory"</span>)</span><br><span class="line"><span class="keyword">var</span> tory4 = <span class="type">Dog3</span>(name: <span class="string">"Tory"</span>, color: <span class="string">"White"</span>)</span><br></pre></td></tr></table></figure>



<ul>
<li>Q. 전 단계에서 만든 자동차 클래스의 초기값을 제거하고 Init 메서드를 이용해 생성하기</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> model : <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> modelYear : <span class="type">Int</span></span><br><span class="line">    <span class="keyword">var</span> color : <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> startUp : <span class="type">Bool</span></span><br><span class="line">    <span class="keyword">var</span> spd : <span class="type">Int</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span>(model: <span class="type">String</span>, modelYear: <span class="type">Int</span>, color: <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.model = model</span><br><span class="line">        <span class="keyword">self</span>.modelYear = modelYear</span><br><span class="line">        <span class="keyword">self</span>.color = color</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">// 중략</span></span><br><span class="line">  <span class="comment">//  .</span></span><br><span class="line">  <span class="comment">//  .</span></span><br><span class="line">  <span class="comment">//  .</span></span><br><span class="line">  <span class="comment">//  .</span></span><br><span class="line">    <span class="keyword">let</span> myCar = <span class="type">Car</span>(model: <span class="string">"ionic"</span>, modelYear: <span class="number">2019</span>, color: <span class="string">"white"</span>)</span><br></pre></td></tr></table></figure>





<h2 id="Lazy-Stored-Property"><a href="#Lazy-Stored-Property" class="headerlink" title="Lazy Stored Property"></a>Lazy Stored Property</h2><ul>
<li>초기값이 인스턴스의 생성이 완료 될 때 까지도 알 수 없는 외부 요인에 의존할 때</li>
<li>초기값이 복잡하거나 계산 비용이 많이 드는 설정을 필요로 할 때</li>
<li>필요한 경우가 제한적일 때</li>
<li>Class ⭕️  Structure ⭕️  Enumeration ❌</li>
</ul>
<ol>
<li>외부 요인이나 다른 설정에 기반</li>
</ol>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// area 변수는 width와 height에 의존적임. 그렇기 때문에 처음부터 초기화 해줄 수가 없음</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BasicStoredProperty</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> width = <span class="number">10.0</span></span><br><span class="line">  <span class="keyword">var</span> height = <span class="number">20.0</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">//  var area = 200.0</span></span><br><span class="line"><span class="comment">//  var area = self.width * self.height</span></span><br><span class="line">  <span class="built_in">lazy</span> <span class="keyword">var</span> area = <span class="keyword">self</span>.width * <span class="keyword">self</span>.height</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 처음부터 self로 초기화도 못해줌. self는 객체가 생성된 시점에 사용할 수 있음 이럴때 lazy를 사용한다.</span></span><br></pre></td></tr></table></figure>



<ol start="2">
<li>계산 비용이 많이 드는 상황</li>
</ol>
<p>예를 들면 당장 앱을 실행하자마자 필요한 부분이 아닌데 lazy 없이 그냥 선언 되어 있으면 앱이 그 오래걸리는 부분까지 다 처리하고 실행되느라 늦게 켜질 수 있음. 이럴때도 사용한다.</p>
<ol start="3">
<li>필요한 경우가 제한적인 상황</li>
</ol>
<p>area가 필요한 경우가 비율로 따지면 약 10%정도 되고, 나머지 90%의 상황에서는 필요하지 않다면 지연하여 생성하는 것이 좋다.</p>
<h2 id="Computed-Property"><a href="#Computed-Property" class="headerlink" title="Computed Property"></a>Computed Property</h2><ul>
<li>자료를 저장하지 않고 매번 호출할 때마다 새로 계산</li>
<li>Class ⭕️  Structure ⭕️  Enumeration ⭕️</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ComputedProperty</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> width = <span class="number">5.0</span></span><br><span class="line">  <span class="keyword">var</span> height = <span class="number">5.0</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 계산을 하긴 하지만, 초기화 할 때만 한번 하고, 변경 해주기 전까지는 저장 됨</span></span><br><span class="line">  <span class="built_in">lazy</span> <span class="keyword">var</span> lazyArea = width * height</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 매번 호출 할 때마다 새로 계산함</span></span><br><span class="line">  <span class="keyword">var</span> area: <span class="type">Double</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> width * height</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// Stored + Computed get(read), set(write)</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">var</span> _koreanWon = <span class="number">0.0</span></span><br><span class="line">  <span class="keyword">var</span> wonToDollar: <span class="type">Double</span> &#123;</span><br><span class="line">    <span class="keyword">get</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> _koreanWon / <span class="number">1136.5</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">set</span> &#123;</span><br><span class="line">      _koreanWon = newValue</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> computed = <span class="type">ComputedProperty</span>()</span><br><span class="line">computed.area</span><br><span class="line">computed.lazyArea</span><br><span class="line"></span><br><span class="line">computed.width = <span class="number">10</span></span><br><span class="line">computed.area</span><br><span class="line">computed.lazyArea</span><br><span class="line"></span><br><span class="line">computed.lazyArea = <span class="number">50.0</span></span><br><span class="line">computed.lazyArea</span><br><span class="line"></span><br><span class="line">computed.width = <span class="number">20</span></span><br><span class="line">computed.height = <span class="number">20</span></span><br><span class="line">computed.area</span><br><span class="line">computed.lazyArea</span><br></pre></td></tr></table></figure>



<h2 id="Property-Observer"><a href="#Property-Observer" class="headerlink" title="Property Observer"></a>Property Observer</h2><ul>
<li>Class ⭕️  Structure ⭕️  Enumeration ❌</li>
<li>willSet은 값이 변경되기 직전 호출</li>
<li>didSet은 값이 변경된 후 호출</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PropertyObserver</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> height = <span class="number">0.0</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> width = <span class="number">0.0</span> &#123;</span><br><span class="line">    <span class="keyword">willSet</span> &#123;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">"willSet :"</span>, width, <span class="string">"-&gt;"</span>, newValue)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">didSet</span> &#123;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">"didSet :"</span>, oldValue, <span class="string">"-&gt;"</span>, width)</span><br><span class="line">      height = width / <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="Type-Property"><a href="#Type-Property" class="headerlink" title="Type Property"></a>Type Property</h2><ul>
<li>Shared </li>
<li>Lazily Initialized</li>
<li>Class ⭕️  Structure ⭕️  Enumeration ⭕️</li>
<li>Override 불가</li>
<li>클래스에서만 사용가능, computed property 형태로 사용, 서브클래스에서 override 가능</li>
</ul>
<p>모든 객체의 프로퍼티를 공유해야 할 때 사용한다. 편하기도 함. 타입에 직접 접근이 가능하니깐</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TypeProperty</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">var</span> unit: <span class="type">String</span> = <span class="string">"cm"</span></span><br><span class="line">  <span class="keyword">var</span> width = <span class="number">5.0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> square = <span class="type">TypeProperty</span>()</span><br><span class="line">square.width</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> square1 = <span class="type">TypeProperty</span>()</span><br><span class="line">square1.width = <span class="number">10.0</span></span><br><span class="line">square1.width</span><br><span class="line"></span><br><span class="line"><span class="type">TypeProperty</span>.unit</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"\(square.width) \(TypeProperty.unit)"</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"\(square1.width) \(TypeProperty.unit)"</span>)</span><br><span class="line"></span><br><span class="line"><span class="type">TypeProperty</span>.unit = <span class="string">"m"</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"\(square.width) \(TypeProperty.unit)"</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"\(square1.width) \(TypeProperty.unit)"</span>)</span><br></pre></td></tr></table></figure>



<h1 id="Equatable-Identical"><a href="#Equatable-Identical" class="headerlink" title="Equatable, Identical"></a><strong>Equatable, Identical</strong></h1><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 동등 연산자</span></span><br><span class="line"><span class="number">1</span> == <span class="number">1</span></span><br><span class="line"><span class="number">2</span> == <span class="number">1</span></span><br><span class="line"><span class="string">"ABC"</span> == <span class="string">"ABC"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> name = <span class="string">"이순신"</span></span><br><span class="line">  <span class="keyword">let</span> age = <span class="number">30</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person1 = <span class="type">Person</span>()</span><br><span class="line"><span class="keyword">let</span> person2 = <span class="type">Person</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">//person1 == "이순신"    // 에러</span></span><br><span class="line"><span class="comment">//person1 == person2   // 에러</span></span><br></pre></td></tr></table></figure>

<p>Q. 왜 비교 연산자를 사용할 수 없을까요?</p>
<p>둘다 에러가 나는디…? 왜 못쓰는 걸까</p>
<ul>
<li>같은 타입이지만 각 person이 가지고 있는 속성중, 무엇을 비교할 것인지 명확하지 않기 때문에 에러가 난다.</li>
</ul>
<h2 id="Equatable-Protocol"><a href="#Equatable-Protocol" class="headerlink" title="Equatable Protocol"></a>Equatable Protocol</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>: <span class="title">Equatable</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> name = <span class="string">"이순신"</span></span><br><span class="line">  <span class="keyword">let</span> age = <span class="number">30</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> ==<span class="params">(lhs: User, rhs: User)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> lhs.name == rhs.name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> user1 = <span class="type">User</span>()</span><br><span class="line"><span class="keyword">var</span> user2 = <span class="type">User</span>()</span><br><span class="line">user1 == user2</span><br></pre></td></tr></table></figure>

<ul>
<li>이번에는 무엇을 비교할지 프로토콜로 정의를 했기 때문에 비교 연산자를 사용할 수 있다.</li>
</ul>
<h2 id="Identical"><a href="#Identical" class="headerlink" title="Identical"></a>Identical</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">user1.name</span><br><span class="line">user2.name</span><br><span class="line">user1 == user2</span><br><span class="line">user1 === user2 <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<p>뭔가 다른게 눈에 띈다. 비교연산자가 세개 붙었음</p>
<p>이건 왜 false 일까?</p>
<p> === : 두 상수 또는 변수가 동일한 인스턴스를 가르키는 경우 true 반환</p>
]]></content>
      <categories>
        <category>TIL</category>
      </categories>
      <tags>
        <tag>Swift, OOP, iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>객체지향프로그래밍 (Object Oriented programming)</title>
    <url>/2019/11/OOP/</url>
    <content><![CDATA[<p>참고 : <a href="https://jeong-pro.tistory.com/95" target="_blank" rel="noopener">https://jeong-pro.tistory.com/95</a></p><h1 id="객체지향-프로그래밍-OOP"><a href="#객체지향-프로그래밍-OOP" class="headerlink" title="객체지향 프로그래밍(OOP)"></a>객체지향 프로그래밍(OOP)</h1><p><em>프로그래밍에서 필요한 데이터를 추상화하여, 상태와 행위를 가진 객체를 만들고 그 객체들 간의 유기적인 상호작용을 통해 로직을 구성하는 프로그래밍 방법</em></p><h2 id="장점"><a href="#장점" class="headerlink" title="장점"></a>장점</h2><ol>
<li>코드 재사용의 용이함 : 남이 만든 클래스를 가져와서 이용할 수 있고, 상속을 통해 해당 클래스를 확장하여 사용할 수 있음</li>
<li>유지보수가 쉬움 : 절차지향 프로그래밍과 비교하면, 코드를 수정해야할 때 일일이 찾아서 수정해야 하지만, 객체지향프로그래밍은 수정해야 할 부분이 *클래스 내부에 있기 때문에 해당 부분만 수정하면 된다.</li>
</ol><a id="more"></a>


<ul>
<li>클래스 내부 : [멤버 변수(상태를 정의한 것) 혹은 메서드(행위를 정의한 것)]</li>
</ul>
<ol start="3">
<li>대형 프로젝트에 적합함 : 클래스 단위로 *모듈화하여 개발이 가능하므로, 업무 분담이 비교적 쉽다.</li>
</ol>
<ul>
<li><p>모듈? : </p>
</li>
<li><p>규모가 큰 것을 여러 개로 나눈 조각 정도로 이해하자</p>
<p> 그렇지만 모듈이 되려면 다음의 특징들을 만족해야 하나의 모듈이라 할 수 있다.</p>
</li>
</ul>
<ol>
<li><p>다른 것들과 구별될 수 있는 독립적인 기능을 갖는 단위(unit)이다.</p>
</li>
<li><p>유일한 이름을 가져야 한다.</p>
</li>
<li><p>독립적으로 컴파일이 가능하다.</p>
</li>
<li><p>모듈에서 또 다른 모듈을 호출할 수 있다.</p>
</li>
<li><p>다른 프로그램에서도 모듈을 호출할 수 있다.</p>
</li>
</ol>
<p>   모듈은 완전한 독립 프로그램이고, 다양한 크기의 집합에 대해서 모듈이라고 부를 수 있다.</p>
<p>  참고 :  [네이버 지식백과] 모듈화 (쉽게 배우는 소프트웨어 공학, 2015. 11. 30., 김치수)</p>
<hr>
<h2 id="단점"><a href="#단점" class="headerlink" title="단점"></a>단점</h2><ol>
<li><p>처리 속도가 상대적으로 느림</p>
</li>
<li><p>객체가 많으면 용량이 커질 수 있음</p>
</li>
<li><p>설계 단계에서 많은 시간과 노력이 필요함</p>
</li>
</ol>
<h1 id="OOP의-특징"><a href="#OOP의-특징" class="headerlink" title="OOP의 특징"></a>OOP의 특징</h1><h2 id="1-클래스-인스턴스-객체"><a href="#1-클래스-인스턴스-객체" class="headerlink" title="1. 클래스 + 인스턴스 (객체)"></a>1. 클래스 + 인스턴스 (객체)</h2><ul>
<li><strong>클래스</strong> : 어떤 문제를 해결하기 위한 데이터를 만들기 위하여 추상화를 거쳐 집단에 속하는 속성(attribute)과 행위(behavior)를 변수와 메서드로 정의 한 것</li>
<li>설계도에 비유하기도 한다. </li>
<li>속성은 변수, 행위는 메서드로 정의한다. </li>
</ul>
<ul>
<li><strong>인스턴스</strong> : 클래스에서 정의 한 것을 토대로 실제 메모리상에 할당된 것.</li>
<li>실제 프로그램에서 사용되는 데이터</li>
</ul>
<h2 id="2-추상화"><a href="#2-추상화" class="headerlink" title="2. 추상화"></a>2. 추상화</h2><ul>
<li>공통의 속성이나 행위를 묶어 이름을 붙이는 것을 말한다.</li>
<li>객체지향적 관점에서는 클래스를 정의하는 것을 바로 추상화라고 할 수 있다.</li>
<li>예를 들어. 사자, 코끼리, 강아지, 고양이, 비둘기, 토끼 라는 객체가 존재한다고 하면,<br>이들의 공통 된 속성이나 행위를 묶어보면 ‘동물’ 혹은 ‘생물’이라는 이름을 붙일 수 있다.</li>
</ul>
<h2 id="3-캡슐화"><a href="#3-캡슐화" class="headerlink" title="3. 캡슐화"></a>3. 캡슐화</h2><ul>
<li>사전에 동물 클래스를 정의했다면, 나중에 동물 클래스를 구현해야 할 때 재사용이 가능하다.</li>
<li>객체 지향 프로그래밍에서는 기능(행위), 특성(속성)을 클래스에 정의한다.</li>
<li>동물 객체가 맡은 역할을 수행하기 위한 하나의 목적을 한 곳에 정의한다고 생각하자.</li>
<li>그런데 동물 클래스를 사용하는 입장에서는 동물 클래스로 무엇을 할 수 있는지에<br>대해서만 알면 그 의미는 충분하다. 굳이 동물 클래스가 어떻게 작동하는지 알 필요도 없거니와, 알기도 힘들것이다. </li>
</ul>
<ul>
<li>자동차를 운전하는 사람은 ‘운전을 한다’ 라는 목적 하나만 놓고 보면 운전 방법만 알면 된다.<br>자동차가 어떤 방식으로 작동하여 운행이 가능해 지는 것인지는 몰라도 ‘운전을 한다’ 라는 목표는 충족 할 수 있는 것이다.</li>
<li>그리고 개인이 마음대로 자동차를 튜닝하여 사용하는 것은 불법이다. 안전상의 문제가 발생할 수 있기 때문이다.</li>
<li>자동차의 외관이나 내부 역시, 가려져 있기 때문에 겉으로 보기만 해서는 어느 부분이 어떻게 움직이는지, 볼 수 없다. </li>
<li>정비소나 차고에서 일부러 뜯어보기 전까지는 내부를 볼 수도 없고, 마음대로 튜닝 할 수도 없다.</li>
<li>이러한 개념은 ‘정보의 은닉’이라는 개념에 적용할 수 있다.</li>
<li>캡슐화의 목적 중 하나는 함부로 내부에 접근하지 못하게 하는 것이다. 이유는 상기와 같다.</li>
</ul>
<h2 id="4-상속"><a href="#4-상속" class="headerlink" title="4. 상속"></a>4. 상속</h2><ul>
<li>이미 ‘동물’ 클래스와 ‘강아지’ 클래스가 있는 상황이라고 가정하자</li>
<li>나는 ‘비글’ 클래스를 만들어야 한다.</li>
<li>‘비글’이 가지고 있는 속성과 행위를 처음부터 정의하는 것은 비효율적인 행동이다.</li>
<li>이미 ‘비글’이라면 가지고 있는 속성과 행위가 정의되어 있는 ‘동물’과 ‘강아지’ 클래스가<br>존재하고 있고, 나는 그것의 존재를 알고 있기 때문이다.</li>
<li>그래서 ‘강아지’ 클래스를 가져다가 나의 목적에 맞게 조금만 고쳐서 ‘비글’을 만들고자 한다.</li>
<li>비글 이라면 가지고 있는 속성은 귀가 두 개, 포유류 식육목의 개과에 속한다는 것, 다리가 네 개</li>
<li>등등 있지만 상기한 속성들은 ‘강아지’가 가지고 있는 속성과 동일하다.</li>
<li>그래서 강아지 클래스를 가져다가 쓸 것이다.</li>
<li>그런데 비글 = 강아지 라는 공식은 성립하지만, 강아지 = 비글 이라는 공식은 맞지 않다.</li>
<li>포메라니안도 강아지고, 푸들도 강아지이기 때문이다.</li>
<li>위 공식이 성립하지 않는 이유는 비글이 강아지와 공통 된 속성을 가지고 있긴 하지만 </li>
<li>비글은 비글만의 특징이 있다.</li>
<li>프로그래밍에서 ‘비글’을 만들 때 ‘강아지’의 속성과 행위를 가져다가 쓰는 것을</li>
<li>상속 이라고 한다.</li>
<li>이러한 과정의 방향성을 살펴 보면 강아지 -&gt; 비글 이다.</li>
<li>강아지의 속성을 비글에게 물려’주었고’, 비글은 강아지의 속성을 물려’받았다’</li>
<li>그래서 강아지는 이 상황에서 ‘부모 클래스’, 비글은 ‘자식 클래스’이다.</li>
<li>사실 강아지 역시 ‘동물’의 자식 클래스이다.</li>
</ul>
<h2 id="4-다형성"><a href="#4-다형성" class="headerlink" title="4. 다형성"></a>4. 다형성</h2><ul>
<li><p>하나의 변수명, 함수명 등이 상황에 따라 다른 의미로 해석 될 수 있는 것이다.</p>
</li>
<li><p>오버라이딩, 오버로딩</p>
</li>
<li><p>오버라이딩은 부모 클래스의 메서드(행위)를 상속 받아 다른 기능을 정의 하는 것을 말한다.</p>
</li>
<li><p>이를 이용하면, 하나의 부모 클래스를 상속 받는 여러 자식 클래스들이 같은 이름에 다른 기능을 하는 메소드를 정의하고 사용할 수 있다.</p>
</li>
</ul>
<ul>
<li><p>오버로딩은 하나의 클래스에서 같은 이름의 메소드들을 여러 개 가질 수 있게 한다.</p>
</li>
<li><p>단, 인자 값은 달라야 한다. </p>
</li>
<li><p>인자들의 타입이나 갯수가 다르면 메소드 이름이 같더라도 어떤 메소드를 호출 할지 컴파일러가 알 수 있기 때문이다. </p>
</li>
<li><p>유사한 일을 수행하면서 인자만 다른 메소드들을 각자 다른 이름을 붙이면 사용하기가 매우 불편할 것이다.</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Homework</category>
      </categories>
      <tags>
        <tag>Swift, iOs, develop, OOP, coding</tag>
      </tags>
  </entry>
  <entry>
    <title>Closure / Code Snippets</title>
    <url>/2019/11/15/</url>
    <content><![CDATA[<h1 id="Code-Snippets"><a href="#Code-Snippets" class="headerlink" title="Code Snippets"></a>Code Snippets</h1><ul>
<li>코딩 할 때 자주 쓰는 구문들을 편하게 쓸수 있도록 지원하는 기능.</li>
<li>개인설정도 가능하고, 이미 정해져있는 snippets도 있다</li>
<li>editor -&gt; create code snippet</li>
<li>코드를 적고, 드래그 한 뒤 지정하면 됨</li>
<li>만들때 Completion은 코드를 사용할 때 자동완성 목록에 뜨는 코드</li>
<li>Availability는 코드의 범위(?), 성격(?)</li>
</ul><a id="more"></a>
<h1 id="closure"><a href="#closure" class="headerlink" title="closure"></a>closure</h1><ul>
<li>일회용 함수를 작성할 수 있는 구문</li>
<li>일회용 함수란? 한번만 사용할 구문들의 집합이면서, 그 형식은 함수로 작성해야 하는 제약이 있을 때 사용할 수 있는 함수</li>
<li>그렇기 때문에 이름을 생략할 수 있어서 익명(Anonymous) 함수라고도 한다.</li>
</ul>
<ul>
<li>스위프트에서 클로저라고 부르는 객체는 대부분 다음 세 가지 경우 중 하나에 해당한다.<ol>
<li>전역 함수 : 이름이 있으며, 주변 환경에서 캡처할 어떤 값도 없는 클로저</li>
<li>중첩 함수 : 이름이 있으며, 자신을 둘러싼 함수로부터 값을 캡처할 수 있는 클로저</li>
<li>클로저 표현식 : 이름이 없으며 주변 환경으로부터 값을 캡처할 수 있는 경량 문법으로 작성된 클로저</li>
</ol>
</li>
</ul>
<h2 id="클로저-표현식"><a href="#클로저-표현식" class="headerlink" title="클로저 표현식"></a>클로저 표현식</h2><ul>
<li>클로저는 일반 함수의 선언식에서 함수명, func 키워드를 뺀 나머지 부분만 작성하는 경량 문법을 사용한다.</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">&#123; (매개변수) -&gt; 반환타입 <span class="keyword">in</span> </span><br><span class="line">	실행구문</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>일반적인 함수의 실행부는 중괄호 { 부터 시작하지만 클로저는 시작부터 이미 있으므로 </p>
</li>
<li><p>in 키워드 다음부터 클로저 표현식의 실행 블록이 작성된다.</p>
</li>
<li><p>실행 블록의 작성이 끝나면 다시 중괄호 } 로 닫는다. 이는 클로저 표현식 전체의 완성을 의미한다.</p>
</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">&#123; () -&gt; () <span class="keyword">in</span></span><br><span class="line">	<span class="built_in">print</span>(<span class="string">"클로저가 실행됩니다"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>위의 예제는 입력 값과 반환 값이 없는 함수이다. </p>
</li>
<li><p>일반 함수와 달리 반환 값이 없으면 생략 하는 것이 아니라 빈 괄호로 표기해준다.</p>
</li>
<li><p>위의 예시 코드들과는 달리 한 줄로 작성해도 무방하다.</p>
</li>
</ul>
<ul>
<li>클로저 표현식은 대부분 파라미터로 함수를 넘겨주어야 할 때 사용하지만, 직접 실행해 볼 수도 있다.</li>
<li>실행하는 방법은 두가지가 있다. </li>
</ul>
<p><strong>1. 상수나 변수에 클로저를 할당한 다음 실행하는 방법</strong></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> f = &#123; () -&gt; <span class="type">Void</span> <span class="keyword">in</span></span><br><span class="line">	<span class="built_in">print</span>(<span class="string">"클로저가 실행됩니다"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f()</span><br></pre></td></tr></table></figure>

<ul>
<li>상수에 클로저를 할당하고, 이 상수에 함수호출 연산자 ( )를 추가하여 실행하는 방법이다.</li>
</ul>
<p><strong>2. 클로저 표현식을 할당받는 상수 f 마저 생략하고 실행하는 방법</strong></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">(&#123;() -&gt; <span class="type">Void</span> <span class="keyword">in</span> </span><br><span class="line">	<span class="built_in">print</span>(<span class="string">"클로저가 실행됩니다"</span>)	</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>

<ul>
<li>클로저 표현식 전체를 소괄호로 감싸고, 맨뒤에 함수 호출 연산자 ( )를 붙이면 완성</li>
<li>클로저 전체를 괄호로 감싸지 않으면 <u>컴파일러에서는 이 구문을 클로저 표현식의 정의가 아니라 그 실행값을 변수나 상수에 할당하려는 의도로 해석하여 오류를 발생시키므로 주의!</u></li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="built_in">c</span> = &#123; (s1: <span class="type">Int</span>, s2: <span class="type">String</span>) -&gt; <span class="type">Void</span> <span class="keyword">in</span> </span><br><span class="line">	<span class="built_in">print</span>(<span class="string">"s1: \(s1), s2:(s2)"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">c</span>(<span class="number">1</span>, <span class="string">"closure"</span>)  <span class="comment">// s1:1, s2:closure</span></span><br></pre></td></tr></table></figure>

<ul>
<li>상수 c 에 Int형 매개변수 s1과 String형 매개변수 s2를 할당받아 출력하는 클로저</li>
<li>아래와 같이 간소화 할 수 있다.</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">(&#123; (s1: <span class="type">Int</span>, s2: <span class="type">String</span>) -&gt; <span class="type">Void</span> <span class="keyword">in</span> </span><br><span class="line">	<span class="built_in">print</span>(<span class="string">"s1: \(s1), s2:(s2)"</span>)</span><br><span class="line">&#125;) (<span class="number">1</span>, <span class="string">"closure"</span>)  <span class="comment">// s1:1, s2:closure</span></span><br></pre></td></tr></table></figure>



<h2 id="Closure-Syntax"><a href="#Closure-Syntax" class="headerlink" title="Closure Syntax"></a>Closure Syntax</h2><ul>
<li>배열은 정렬 함수인 sort(by:) 를 이용하여, 큰 순서나, 작은 순서. 혹은 임의대로 정렬 할 수 있다.</li>
<li>정렬 기준을 잡기 위해서는 특정 형식을 따르는 함수를 정의하여 인자 값으로 넣어주어야 함</li>
<li>두 개의 인자값을 입력받고, 크기를 비교하여 Bool 타입으로 반환하는 형식! (의 함수)</li>
</ul>
<h3 id="배열을-정렬하는-메소드로-클로저를-이해해보자"><a href="#배열을-정렬하는-메소드로-클로저를-이해해보자" class="headerlink" title="배열을 정렬하는 메소드로 클로저를 이해해보자."></a>배열을 정렬하는 메소드로 클로저를 이해해보자.</h3><ul>
<li>첫 번째 인자값이 두 번째 인자값보다 앞쪽에 와야한다고 판단되면 true를, 아니면 false</li>
<li>이 과정을 함수로 작성하면</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 정렬할 배열</span></span><br><span class="line"><span class="keyword">var</span> value = [<span class="number">1</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// s1이 크면 true, 아니면 flase</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">order</span><span class="params">(s1: Int, s2: Int)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line"> 	<span class="keyword">if</span> s1 &gt; s2 &#123;</span><br><span class="line"> 		<span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line"> 	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"> 		<span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line"> 	&#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">value.<span class="built_in">sort</span>(by: order) <span class="comment">// 9, 7, 5, 3, 2, 1</span></span><br></pre></td></tr></table></figure>

<ul>
<li>sort 메소드는 true가 반환되면, 두 인자값의 위치를 변경하지 않고, false면 변경함</li>
<li>이 기준에 따라 정렬이 실행된 결과 9가 가장 앞으로 오게 됨</li>
<li>이걸 클로져로 작성하면..</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">value.<span class="built_in">sort</span>(by: &#123;</span><br><span class="line">	(s1: <span class="type">Int</span>, s2: <span class="type">Int</span>) -&gt; <span class="type">Bool</span> <span class="keyword">in</span></span><br><span class="line">	<span class="keyword">if</span> s1 &gt; s2 &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li>더 요약하면..</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">&#123; (s1: <span class="type">Int</span>, s2: <span class="type">Int</span>) -&gt; <span class="type">Bool</span> <span class="keyword">in</span></span><br><span class="line">	<span class="keyword">return</span> s1 &gt; s2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>if 구문이 생략 되고 바로 return</li>
<li>이것을 한줄로 표현하면..</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">value.<span class="built_in">sort</span>(by: &#123;(s1: <span class="type">Int</span>, s2: <span class="type">Int</span>) -&gt; <span class="type">Bool</span> <span class="keyword">in</span> <span class="keyword">return</span> s1 &gt; s2&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li>그런데 여기서 더 줄일 수 있다. </li>
<li><strong>return 타입을 생략 할 수 있다.</strong> </li>
<li>return 타입을 생략하면, 컴파일러는 클로저 구문을 해석하여 return 값을 찾고</li>
<li>이 <u>return 값의 타입을 추론하여 클로저의 반환 타입을 알아서 정의</u>한다.</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">value.<span class="built_in">sort</span>(by: &#123;(s1: <span class="type">Int</span>, s2: <span class="type">Int</span>) <span class="keyword">in</span> <span class="keyword">return</span> s1 &gt; s2&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li>‘-&gt; Bool’ 이 생략된 구문임</li>
<li>위의 실행식은 s1 &gt; s2 인데, 이는 비교구문이기 때문에 반환값은 true 아니면 false임</li>
<li>이 과정을 거쳐 컴파일러가 반환 값의 타입을 추론할 수 있음</li>
</ul>
<ul>
<li>그런데 반환 값의 타입 추론이 가능하다면, 매개변수의 타입도 추론 가능할 것 같다!</li>
<li>생략 된 매개변수의 타입은 대입 되는 값에 따라 컴파일러가 알아서 추론해낼것이다.</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">value.<span class="built_in">sort</span>(by:&#123;s1, s2 <span class="keyword">in</span> <span class="keyword">return</span> s1 &gt; s2&#125;)</span><br></pre></td></tr></table></figure>



<ul>
<li><p>그런데! 이번에는 매개변수마저 생략해 버릴 수 있다.</p>
</li>
<li><p>매개변수가 생략되면 $0,  ,1 , 2…와 같은 이름으로 할당 된 내부 상수를 이용할 수 있다.</p>
</li>
<li><p>남은 건 실행구문인 in 인데 이녀석도 생략 할 수 있다 이미 실행 구문과 선언부를 분리할 필요가 없어졌기 때문이다.</p>
</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">value.<span class="built_in">sort</span>(by:&#123;<span class="keyword">return</span> $<span class="number">0</span> &gt; $<span class="number">1</span>&#125;)</span><br></pre></td></tr></table></figure>



<ul>
<li>사실 클로져보다 더 간결하게 줄일 수 있다. 이것을 연산자 함수라고 부른다</li>
<li>연산자 만을 이용하여 의미하는 바를 정확히 나타낼 수 있을 때 사용된다.</li>
<li>이를 이용하여 최종적으로 sort 메소드를 정리해보면</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">value.<span class="built_in">sort</span>(by: &gt; )</span><br></pre></td></tr></table></figure>

<ul>
<li>부등 비교 연산자는 본래 두 가지 인자가 필요하고, 이를 첫 번째 인자와, 두 번째 인자로 해석하면</li>
<li>위와 같은 표현이 가능한 것이다.</li>
</ul>
<h3 id="Q"><a href="#Q" class="headerlink" title="Q."></a>Q.</h3>]]></content>
      <categories>
        <category>TIL</category>
      </categories>
      <tags>
        <tag>Swift, iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>Optional / Enumeration</title>
    <url>/2019/11/14/</url>
    <content><![CDATA[<h1 id="Optional"><a href="#Optional" class="headerlink" title="Optional"></a>Optional</h1><ul>
<li><p>Optional은 값이 없을 수 있는 상황에 사용</p>
</li>
<li><p>옵셔널 타입은 2가지 가능성을 지닌다</p>
</li>
</ul><ol>
<li>값을 전혀 가지고 있지 않음 nil</li>
<li>값이 있으며, 그 값에 접근하기 위해 옵셔널을 벗겨 낼 수 있음</li>
</ol><ul>
<li>값이 없는 것과 0인 것의 차이?</li>
</ul><p>0 은 0이라는 값이 엄연히 존재하는 것임. nil은 진짜 값이 ‘없는’ 것</p><a id="more"></a>



<p>숫자로 바꾸니까 int형으로 바뀌는 이유는?</p>
<p>123 이라는 문자열은 정수형으로 바꿀 수 있지만, 다른 문자열은 숫자로 못바꿀 수도 있는 ‘가능성’이 있기 때문에</p>
<p>형변환을 하면 옵셔널이 된다.</p>
<p>그런데 Double 타입은 비록 소수부는 사라질 지언정 int로 바꾸면 무조건 int로 바뀔 수 있기 때문에 옵셔널이 아님</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> possibleNumber = <span class="string">"123"</span></span><br><span class="line"><span class="keyword">var</span> convertedNumber = <span class="type">Int</span>(possibleNumber)</span><br><span class="line">type(of: convertedNumber)</span><br><span class="line"></span><br><span class="line">type(of: <span class="type">Int</span>(<span class="number">3.14</span>))</span><br><span class="line"><span class="comment">// Optional&lt;Int&gt;.type</span></span><br></pre></td></tr></table></figure>



<ul>
<li><p>선언 방법</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> optionalType1: <span class="type">String?</span></span><br><span class="line"><span class="keyword">var</span> optionalType2: <span class="type">Optional</span>&lt;<span class="type">Int</span>&gt;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li>옵셔널 Int와 Int는 엄연히 다른 타입이다.</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> nonOptionalInt = <span class="number">10</span></span><br><span class="line"><span class="keyword">var</span> optionalInt : <span class="type">Int?</span> = <span class="number">100</span></span><br><span class="line"></span><br><span class="line">nonOptionalInt + optionalInt <span class="comment">// 에러</span></span><br></pre></td></tr></table></figure>



<ul>
<li>그렇기 때문에 연산도 할수없고, unoptional 타입의 변수에는 nil값을 할당할 수도 없다.</li>
</ul>
<ul>
<li>옵셔널 변수의 초기화는</li>
<li>옵셔널이 아닌 변수와 똑같다.</li>
</ul>
<h2 id="Optional-Binding-and-Forced-Unwrapping"><a href="#Optional-Binding-and-Forced-Unwrapping" class="headerlink" title="Optional Binding and Forced Unwrapping"></a>Optional Binding and Forced Unwrapping</h2><h3 id="Optional-Binding"><a href="#Optional-Binding" class="headerlink" title="Optional Binding"></a>Optional Binding</h3><ul>
<li>조건문을 이용하여 래핑을 벗겨내는 방식이다. </li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> nilValue: <span class="type">String?</span> = <span class="literal">nil</span></span><br><span class="line"><span class="keyword">let</span> someValue = <span class="string">"100"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> number = <span class="type">Int</span>(someValue) &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"\"\(someValue)\" has an integer value of \(number)"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"Could not be converted to an integer"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>nil이면 아래의 구문을 출력하고, 값이 있으면 위의 구문을 출력한다.</p>
<ul>
<li>옵셔널 바인딩을 사용 할 때도 변수, 상수의 법칙은 지켜진다.</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var optionalStr: String? = &quot;Hello, Optional&quot;</span><br><span class="line"></span><br><span class="line">// let</span><br><span class="line">if let optionalStr = optionalStr &#123;</span><br><span class="line">//  optionalStr += &quot;😍&quot;</span><br><span class="line">  optionalStr</span><br><span class="line">&#125; else &#123;</span><br><span class="line">  &quot;valueless string&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// var</span><br><span class="line">if var str = optionalStr &#123;</span><br><span class="line">  str += &quot;😍&quot;</span><br><span class="line">  str</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Let 이기 때문에 optionalStr 의 값을 변경할 수 없다.</p>
<p>아래의 // var 부분은 변경 가능</p>
<h2 id="Forced-Unwrapping"><a href="#Forced-Unwrapping" class="headerlink" title="Forced Unwrapping"></a>Forced Unwrapping</h2><ul>
<li>끝에 !를 붙임으로서 강제로 언래핑하는 방식!</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if convertedNumber != nil &#123;</span><br><span class="line">//  print(&quot;convertedNumber has an integer value of \(convertedNumber).&quot;)</span><br><span class="line">  print(&quot;convertedNumber has an integer value of \(convertedNumber!).&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">print(convertedNumber)</span><br><span class="line">print(convertedNumber!)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// Forced unwrap of nil value</span><br><span class="line"></span><br><span class="line">convertedNumber = nil</span><br><span class="line">convertedNumber</span><br><span class="line">//convertedNumber!</span><br></pre></td></tr></table></figure>

<ul>
<li>Q. 이렇게 하면 간단한데 왜 바인딩 같은 복잡한 방식을 사용할까?</li>
</ul>
<p>nil 값을 가지고 있는 옵셔널을 강제로 언래핑한다면 오류가 발생하니깐!</p>
<p>그렇기 때문에 반드시 nil 값이 들어가지 않을것이다! 라고 확신이 가능 할 때만 사용하는것이 좋다.</p>
<p>바인딩을 이용하여 안전하게 벗겨내는 것을 권장한다.</p>
<h2 id="IUO-Implicitly-Unwrapped-Optionals"><a href="#IUO-Implicitly-Unwrapped-Optionals" class="headerlink" title="IUO (Implicitly Unwrapped Optionals)"></a>IUO (Implicitly Unwrapped Optionals)</h2><ul>
<li>위에서는 뒤에 ! 를 붙여서 언래핑하였지만, 이번엔 미리 변수의 선언부에 붙여서 사용한다!</li>
<li>? 대신 !를 붙여서 선언하는 것인데, 옵셔널 타입이지만 일반 타입의 변수에 할당이 가능하다.</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> assumedString: <span class="type">String!</span> = <span class="string">"An implicitly unwrapped optional string."</span></span><br><span class="line"><span class="keyword">let</span> implicitString: <span class="type">String</span> = assumedString</span><br><span class="line"><span class="keyword">let</span> stillOptionalString = assumedString</span><br><span class="line"></span><br><span class="line">type(of: assumedString) <span class="comment">// 옵셔널이지만 일반 String 변수에 할당 가능</span></span><br><span class="line">type(of: implicitString)</span><br><span class="line">type(of: stillOptionalString)</span><br></pre></td></tr></table></figure>

<ul>
<li>옵셔널 타입을 사용해야 하지만 반드시 nil이 아니라는 보장이 있을 때 사용한다.</li>
<li>Nil value를 체크 해야 할 일이 생길 경우에는 그냥 일반적인 옵셔널을 사용한다.</li>
<li>프로퍼티 지연 초기화에 많이 사용한다. (뭔진 모르겠지만)</li>
</ul>
<hr>
<h2 id="Nil-coalescing-Operator"><a href="#Nil-coalescing-Operator" class="headerlink" title="Nil-coalescing Operator"></a>Nil-coalescing Operator</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">optionalStr = <span class="literal">nil</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// nil이 아니라는 걸 확인한 후 변수에 할당!</span></span><br><span class="line"><span class="keyword">var</span> result = <span class="string">""</span></span><br><span class="line"><span class="keyword">if</span> optionalStr != <span class="literal">nil</span> &#123;</span><br><span class="line">   result = optionalStr!</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   result = <span class="string">"This is a nil value"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>옵셔널 바인딩 방식인데 코드가 꽤 귀찮게 생겼다. 아래와 같이 간단하게 써보자</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> anotherExpression = optionalStr ?? <span class="string">"This is a nil value"</span></span><br><span class="line"><span class="built_in">print</span>(optionalStr)</span><br><span class="line"><span class="built_in">print</span>(anotherExpression)</span><br></pre></td></tr></table></figure>

<ul>
<li>?? 연산자를 사용하여 언래핑을 할 수 있다. </li>
<li>삼항 연산자 ? 와 헷갈릴 수 있지만, 엄연히 다른 연산자이다.</li>
<li>그렇지만 비슷하게 사용할 수 있다.</li>
</ul>
<ul>
<li><p>어떤 경우에 사용할까?</p>
</li>
<li><pre><code class="ㄴ쟔">let defaultColorName = &quot;red&quot;
var userDefinedColorName: String?

var colorNameToUse = userDefinedColorName ?? defaultColorName
print(colorNameToUse)

userDefinedColorName = &quot;green&quot;
colorNameToUse = userDefinedColorName ?? defaultColorName
print(colorNameToUse)

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- 값이 nil 일때 할당할 값을 미리 따로 지정해 놓고 사용한다!</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### optionalStr ?? &quot;This is a nil value&quot; 를 3항 연산자로 바꿔보기</span><br><span class="line"></span><br><span class="line">```swift</span><br><span class="line">let answer = optionalStr != nil ? optionalStr! : &quot;This is a nil value&quot;</span><br></pre></td></tr></table></figure>


</code></pre>
</li>
</ul>
<h2 id="Optional-Chaining"><a href="#Optional-Chaining" class="headerlink" title="Optional Chaining"></a>Optional Chaining</h2><ul>
<li>하위 property에 옵셔널 값이 있는지 연속적으로 확인하면서, 중간에 하나라도 nil이 발견된다면 nil이 반환되는 형식</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Persion</span> </span>&#123;</span><br><span class="line">ver residence: <span class="type">Residence?</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Residence</span> </span>&#123;</span><br><span class="line"><span class="keyword">var</span> numberOfRooms = <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sangmin = person()</span><br></pre></td></tr></table></figure>

<ul>
<li><h2 id="Q-아래-두-옵셔널의-차이점"><a href="#Q-아래-두-옵셔널의-차이점" class="headerlink" title="Q. 아래 두 옵셔널의 차이점?"></a>Q. 아래 두 옵셔널의 차이점?</h2></li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> optionalArr1: [<span class="type">Int</span>]? = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">var</span> optionalArr2: [<span class="type">Int?</span>] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br></pre></td></tr></table></figure>

<ul>
<li>위에는 옵셔널 array 이기 때문에 optionalArr1 = nil 이 가능하다. 배열 자체를 nil 할당 가능</li>
<li>아래는 배열 내부 요소의 값들의 타입이 옵셔널 int. 즉 nil 값을 append 해 줄 수 있음</li>
</ul>
<h2 id="Optional-Function-Types"><a href="#Optional-Function-Types" class="headerlink" title="Optional Function Types"></a>Optional Function Types</h2><p>어렵,,,</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> aClosure: (() -&gt; <span class="type">Int?</span>)? = &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="Q-연습"><a href="#Q-연습" class="headerlink" title="Q. 연습"></a>Q. 연습</h2><h3 id="2개의-정수를-입력받아-Modulo-연산-의-결과를-반환하는-함수를-만들되-2번째-파라미터와-결과값의-타입은-옵셔널로-정의-두-번째-파라미터-입력값으로-nil-이나-0이-들어오면-결과로-nil을-반환하고-그-외에는-계산-결과-반환"><a href="#2개의-정수를-입력받아-Modulo-연산-의-결과를-반환하는-함수를-만들되-2번째-파라미터와-결과값의-타입은-옵셔널로-정의-두-번째-파라미터-입력값으로-nil-이나-0이-들어오면-결과로-nil을-반환하고-그-외에는-계산-결과-반환" class="headerlink" title="2개의 정수를 입력받아 Modulo 연산(%)의 결과를 반환하는 함수를 만들되, 2번째 파라미터와 결과값의 타입은 옵셔널로 정의, 두 번째 파라미터 입력값으로 nil 이나 0이 들어오면 결과로 nil을 반환하고, 그 외에는 계산 결과 반환"></a>2개의 정수를 입력받아 Modulo 연산(%)의 결과를 반환하는 함수를 만들되, 2번째 파라미터와 결과값의 타입은 옵셔널로 정의, 두 번째 파라미터 입력값으로 nil 이나 0이 들어오면 결과로 nil을 반환하고, 그 외에는 계산 결과 반환</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">moduloValue</span> <span class="params">(a: Int, b: Int?)</span></span> -&gt; <span class="type">Int?</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> result: <span class="type">Int?</span></span><br><span class="line">    <span class="keyword">if</span> b != <span class="literal">nil</span> &#123;</span><br><span class="line">        result = a % b!</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> b == <span class="number">0</span> || b == <span class="literal">nil</span> &#123;</span><br><span class="line">        result = <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h1 id="Enumeration"><a href="#Enumeration" class="headerlink" title="Enumeration"></a>Enumeration</h1><ul>
<li>연관 된 값의 그룹에 대해 공통 된 타입을 정의 한뒤, type-safe 하게 해당 값들을 사용 가능..?</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">CompassPoint</span> </span>&#123;</span><br><span class="line">  <span class="keyword">case</span> north</span><br><span class="line">  <span class="keyword">case</span> south</span><br><span class="line">  <span class="keyword">case</span> east</span><br><span class="line">  <span class="keyword">case</span> west</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>보통은</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> north = <span class="string">"north"</span></span><br><span class="line"><span class="keyword">let</span> south = <span class="string">"south"</span></span><br></pre></td></tr></table></figure>

<p>요렇게 쓰는데, 잘못 입력 할 수도 있고, 남들이 연관있는 값인지 모를 수도 있음</p>
<p>하지만 enum을 사용하면, 안전하게 사용할 수 있다.</p>
<p>어차피 네가지 밖에 없으니 서로 연관 값인것도 알 수 있고, 오타도 안날거임</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Planet</span> </span>&#123;</span><br><span class="line">  <span class="keyword">case</span> mercury, venus, earth, mars, jupiter, saturn, uranus, neptune, pluto</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> directionToHead1 = <span class="type">CompassPoint</span>.west</span><br><span class="line">directionToHead1 = .east</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> directionToHead2: <span class="type">CompassPoint</span> = .north</span><br></pre></td></tr></table></figure>



<h2 id="Matching-Enumeration-Values"><a href="#Matching-Enumeration-Values" class="headerlink" title="Matching Enumeration Values"></a>Matching Enumeration Values</h2><ul>
<li>switch 와 같이 잘 쓰인다.</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> directionToHead = <span class="type">CompassPoint</span>.south</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> directionToHead &#123;</span><br><span class="line"><span class="keyword">case</span> .north:</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"Lots of planets have a north"</span>)</span><br><span class="line"><span class="keyword">case</span> .south:</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"Watch out for penguins"</span>)</span><br><span class="line"><span class="keyword">case</span> .east:</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"Where the sun rises"</span>)</span><br><span class="line"><span class="keyword">case</span> .west:</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"Where the skies are blue"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="Associated-Values"><a href="#Associated-Values" class="headerlink" title="Associated Values"></a>Associated Values</h2><h3 id="Q-enum-Month-case-jan-feb-정의하되-2월은-윤년인지-아닌지-정보를-저장할-수-있도록-구현"><a href="#Q-enum-Month-case-jan-feb-정의하되-2월은-윤년인지-아닌지-정보를-저장할-수-있도록-구현" class="headerlink" title="Q. enum Month { case jan, feb } 정의하되 2월은 윤년인지 아닌지 정보를 저장할 수 있도록 구현"></a>Q. enum Month { case jan, feb } 정의하되 2월은 윤년인지 아닌지 정보를 저장할 수 있도록 구현</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Month</span> </span>&#123;</span><br><span class="line">  <span class="keyword">case</span> jan, feb(<span class="type">Bool</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> february = <span class="type">Month</span>.feb(<span class="literal">false</span>)</span><br><span class="line"><span class="keyword">switch</span> february &#123;</span><br><span class="line"><span class="keyword">case</span> .jan: <span class="keyword">break</span></span><br><span class="line"><span class="keyword">case</span> .feb(<span class="keyword">let</span> isLeafYear): <span class="built_in">print</span>(isLeafYear)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="Raw-Value"><a href="#Raw-Value" class="headerlink" title="Raw Value"></a>Raw Value</h2><ul>
<li><p>해당 enum에서 반드시 고유한 값이어야 함</p>
</li>
<li><p>Strings, Characters, or any of the Integer or Floating-point number types</p>
</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Weekday</span>: <span class="title">Int</span> </span>&#123;</span><br><span class="line">  <span class="keyword">case</span> sunday, monday, tuesday, wednesday, thursday, friday, saturday</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">Weekday</span>.wednesday</span><br><span class="line"><span class="type">Weekday</span>.wednesday.rawValue</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">WeekdayName</span>: <span class="title">String</span> </span>&#123;</span><br><span class="line">  <span class="keyword">case</span> sunday, monday, tuesday, wednesday, thursday, friday, saturday</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">WeekdayName</span>.monday</span><br><span class="line"><span class="type">WeekdayName</span>.monday.rawValue</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Gender</span>: <span class="title">String</span> </span>&#123;</span><br><span class="line">  <span class="keyword">case</span> male = <span class="string">"남자"</span>, female = <span class="string">"여자"</span>, other = <span class="string">"기타"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">Gender</span>.male</span><br><span class="line"><span class="type">Gender</span>.male.rawValue</span><br></pre></td></tr></table></figure>



<h3 id="Q-학점-A-B-C-D-F-을-enum-으로-표현하고-각-케이스에-알맞은-0-0-4-0-까지의-값-부여"><a href="#Q-학점-A-B-C-D-F-을-enum-으로-표현하고-각-케이스에-알맞은-0-0-4-0-까지의-값-부여" class="headerlink" title="Q. 학점(A, B, C, D, F)을 enum 으로 표현하고 각 케이스에 알맞은 0.0 ~ 4.0 까지의 값 부여"></a>Q. 학점(A, B, C, D, F)을 enum 으로 표현하고 각 케이스에 알맞은 0.0 ~ 4.0 까지의 값 부여</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">GradeScore</span>: <span class="title">Double</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">A</span> = <span class="number">4.0</span>, <span class="type">B</span> = <span class="number">3.0</span>, <span class="type">C</span> = <span class="number">2.0</span>, <span class="type">D</span> = <span class="number">1.0</span>, <span class="type">F</span> = <span class="number">0.0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">GradeScore</span>.<span class="type">A</span></span><br><span class="line"><span class="type">GradeScore</span>.<span class="type">A</span>.rawValue</span><br></pre></td></tr></table></figure>



<h2 id="Implicitly-Assigned-Raw-Values"><a href="#Implicitly-Assigned-Raw-Values" class="headerlink" title="Implicitly Assigned Raw Values"></a>Implicitly Assigned Raw Values</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">num WeekdayAgain: Int &#123;</span><br><span class="line">  case sunday = 5, monday, tuesday, wednesday, thursday, friday, saturday</span><br><span class="line">//  case sunday, monday = 100, tuesday = 101, wednesday, thursday, friday, saturday</span><br><span class="line">//  case sunday = 1, monday = 1, tuesday = 2, wednesday, thursday, friday, saturday</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">WeekdayAgain.wednesday</span><br><span class="line">WeekdayAgain.wednesday.rawValue</span><br></pre></td></tr></table></figure>

<ul>
<li>처음 sunday에 rawvalue를 5를 할당했기 때문에 순서대로 가서 8을 반환한다. </li>
</ul>
<h2 id="Initializing-from-a-Raw-Value"><a href="#Initializing-from-a-Raw-Value" class="headerlink" title="Initializing from a Raw Value"></a>Initializing from a Raw Value</h2><ul>
<li>Raw vlaue를 이용하여 초기화 가능!</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">PlanetIntRaw</span>: <span class="title">Int</span> </span>&#123;</span><br><span class="line">  <span class="keyword">case</span> mercury = <span class="number">1</span>, venus, earth, mars, jupiter, saturn, uranus, neptune, pluto</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">PlanetIntRaw</span>(rawValue: <span class="number">5</span>)</span><br><span class="line"><span class="type">PlanetIntRaw</span>(rawValue: <span class="number">7</span>)</span><br><span class="line"></span><br><span class="line"><span class="type">PlanetIntRaw</span>(rawValue: <span class="number">0</span>) <span class="comment">// nil</span></span><br><span class="line"><span class="type">PlanetIntRaw</span>(rawValue: <span class="number">15</span>) <span class="comment">// nil</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>여기서 enum이 옵셔널의 속성을 가지고 있음을 알 수 있다. nil을 반환하니깐.</p>
</li>
<li><p>옵셔널 바인딩을 통해 ㅅㅏ용한다. </p>
</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> somePlanet = <span class="type">PlanetIntRaw</span>(rawValue: positionToFind) &#123;</span><br><span class="line">  <span class="keyword">switch</span> somePlanet &#123;</span><br><span class="line">  <span class="keyword">case</span> .earth:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Mostly harmless"</span>)</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Not a safe place for humans"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"There isn't a planet at position \(positionToFind)"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="Nested"><a href="#Nested" class="headerlink" title="Nested"></a>Nested</h2><ul>
<li>내부에 함수를 설정하여 사용도 할 수 있다.</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Device</span>: <span class="title">String</span> </span>&#123;</span><br><span class="line">  <span class="keyword">case</span> iPhone, iPad, tv, watch</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">printType</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> <span class="keyword">self</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> .iPad, .iPhone, .tv:</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">"device :"</span>, <span class="keyword">self</span>)</span><br><span class="line">    <span class="keyword">case</span> .watch:</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">"apple Watch"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> iPhone = <span class="type">Device</span>.tv</span><br><span class="line">iPhone.printType()</span><br><span class="line"></span><br><span class="line"><span class="comment">// tv 출력</span></span><br></pre></td></tr></table></figure>



<ul>
<li>enum 안에 enum 중첩 사용</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Wearable</span> </span>&#123;</span><br><span class="line">  <span class="class"><span class="keyword">enum</span> <span class="title">Weight</span>: <span class="title">Int</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> light = <span class="number">1</span></span><br><span class="line">    <span class="keyword">case</span> heavy = <span class="number">2</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="class"><span class="keyword">enum</span> <span class="title">Armor</span>: <span class="title">Int</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> light = <span class="number">2</span></span><br><span class="line">    <span class="keyword">case</span> heavy = <span class="number">4</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">case</span> helmet(weight: <span class="type">Weight</span>, armor: <span class="type">Armor</span>)</span><br><span class="line">  <span class="keyword">case</span> boots</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">info</span><span class="params">()</span></span> -&gt; (weight: <span class="type">Int</span>, armor: <span class="type">Int</span>) &#123;</span><br><span class="line">    <span class="keyword">switch</span> <span class="keyword">self</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> .helmet(<span class="keyword">let</span> weight, <span class="keyword">let</span> armor):</span><br><span class="line">      <span class="keyword">return</span> (weight: weight.rawValue * <span class="number">2</span>, armor: armor.rawValue * <span class="number">5</span>)</span><br><span class="line">    <span class="keyword">case</span> .boots:</span><br><span class="line">      <span class="keyword">return</span> (<span class="number">3</span>, <span class="number">3</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">Wearable</span>.boots</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> woodenHelmet = <span class="type">Wearable</span>.helmet(weight: .light, armor: .heavy)</span><br><span class="line">woodenHelmet.info()</span><br></pre></td></tr></table></figure>



<h2 id="Mutating"><a href="#Mutating" class="headerlink" title="Mutating"></a>Mutating</h2><ul>
<li>enum 타입 내부 함수에서 자기 자신의 값을 변경해야 할 경우 mutating 키워드가 필요하다.</li>
</ul>
<h3 id="Q-on-과-off-값을-가진-enum-타입-RemoteControl-을-정의하고-그-내부에-호출-시마다-on-off-값을-바꿔주는-함수-구현"><a href="#Q-on-과-off-값을-가진-enum-타입-RemoteControl-을-정의하고-그-내부에-호출-시마다-on-off-값을-바꿔주는-함수-구현" class="headerlink" title="Q. on 과 off 값을 가진 enum 타입 RemoteControl 을 정의하고, 그 내부에 호출 시마다 on, off 값을 바꿔주는 함수 구현"></a>Q. on 과 off 값을 가진 enum 타입 RemoteControl 을 정의하고, 그 내부에 호출 시마다 on, off 값을 바꿔주는 함수 구현</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">RemmoteControl</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> on, off</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">switching</span><span class="params">()</span></span> &#123;</span><br><span class="line">      <span class="keyword">switch</span> <span class="keyword">self</span> &#123;</span><br><span class="line">      <span class="keyword">case</span> .on:</span><br><span class="line">        <span class="keyword">self</span> = .off</span><br><span class="line">      <span class="keyword">case</span> .off:</span><br><span class="line">        <span class="keyword">self</span> = .on</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> remocon = <span class="type">RemmoteControl</span>.on</span><br><span class="line"></span><br><span class="line">remocon.switching()</span><br><span class="line">remocon.switching()</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>TIL</category>
      </categories>
      <tags>
        <tag>swift, iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>배열 / 집합 / 딕셔너리</title>
    <url>/2019/11/13/</url>
    <content><![CDATA[<h1 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h1><ul>
<li>array - 순서가 있는 값들의 모음</li>
<li>set - 순서가 없는, 정렬 되지 않은 특정 값 (unique values)</li>
<li>dictionary - 키와 값의 쌍으로 정렬되지 않은 값들의 모음</li>
</ul><h1 id="배열-Array"><a href="#배열-Array" class="headerlink" title="배열 (Array)"></a>배열 (Array)</h1><ul>
<li>Zero-based integer Index</li>
<li>인덱스가 0부터 시작</li>
<li>대부분의 프로그래밍 언어들은 0부터 시작한다.</li>
<li>상수나 변수처럼 배열에 저장된 타입으로 타입추론이 된다.</li>
</ul><a id="more"></a>

<h3 id="초기화"><a href="#초기화" class="headerlink" title="초기화"></a>초기화</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Type Annotation</span></span><br><span class="line"><span class="keyword">let</span> strArray1: <span class="type">Array</span>&lt;<span class="type">String</span>&gt; = [<span class="string">"apple"</span>, <span class="string">"orange"</span>, <span class="string">"melon"</span>]</span><br><span class="line"><span class="keyword">let</span> strArray2: [<span class="type">String</span>] = [<span class="string">"apple"</span>, <span class="string">"orange"</span>, <span class="string">"melon"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// Type Inference</span></span><br><span class="line"><span class="keyword">let</span> strArray3 = [<span class="string">"apple"</span>, <span class="string">"orange"</span>, <span class="string">"melon"</span>]</span><br><span class="line"><span class="keyword">let</span> strArray4 = <span class="type">Array</span>&lt;<span class="type">String</span>&gt;(repeating: <span class="string">"iOS"</span>, <span class="built_in">count</span>: <span class="number">5</span>)</span><br><span class="line"><span class="comment">// [ios, ios, ios, ios, ios] 와 같은 뜻</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Error</span></span><br><span class="line"><span class="comment">//let strArray5 = ["apple", 3.14, 1] // 같은 타입의 값이 아니기 때문에 에러</span></span><br></pre></td></tr></table></figure>



<h3 id="Q-String-타입과-Int-타입으로-각각-자료가-없는-상태인-빈-배열을-만들어보세요"><a href="#Q-String-타입과-Int-타입으로-각각-자료가-없는-상태인-빈-배열을-만들어보세요" class="headerlink" title="Q. String 타입과 Int 타입으로 각각 자료가 없는 상태인 빈 배열을 만들어보세요."></a>Q. String 타입과 Int 타입으로 각각 자료가 없는 상태인 빈 배열을 만들어보세요.</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> strEmpty: [<span class="type">String</span>] = []</span><br><span class="line"><span class="keyword">var</span> intEmpty: [<span class="type">Int</span>] = []</span><br></pre></td></tr></table></figure>

<h3 id="Q-Double-타입은-Type-Annotation-Bool-타입은-Type-Inference-방식으로-각각-임의의-값을-넣어-배열을-만들어보세요"><a href="#Q-Double-타입은-Type-Annotation-Bool-타입은-Type-Inference-방식으로-각각-임의의-값을-넣어-배열을-만들어보세요" class="headerlink" title="Q. Double 타입은 Type Annotation, Bool 타입은 Type Inference 방식으로 각각 임의의 값을 넣어 배열을 만들어보세요."></a>Q. Double 타입은 Type Annotation, Bool 타입은 Type Inference 방식으로 각각 임의의 값을 넣어 배열을 만들어보세요.</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> dou: [<span class="type">Double</span>] = [<span class="number">1.2</span>, <span class="number">3.4</span>, <span class="number">5.6</span>]</span><br><span class="line"><span class="keyword">var</span> boo = [<span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">true</span>]</span><br></pre></td></tr></table></figure>



<h2 id="Number-of-Elements"><a href="#Number-of-Elements" class="headerlink" title="Number of Elements"></a>Number of Elements</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> fruits = [<span class="string">"Apple"</span>, <span class="string">"Orange"</span>, <span class="string">"Banana"</span>]</span><br><span class="line"><span class="keyword">let</span> countOfFruits = fruits.<span class="built_in">count</span> <span class="comment">// 요소의 갯수를 출력</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// fruits가 비어있지 않으면, 몇 개의 요소가 있는지 출력, 비어있으면 empty array 출력</span></span><br><span class="line"><span class="keyword">if</span> !fruits.isEmpty &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"\(countOfFruits) element(s)"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"empty array"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="Retrieve-an-Element"><a href="#Retrieve-an-Element" class="headerlink" title="Retrieve an Element"></a>Retrieve an Element</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">//           0        1         2       endIndex</span></span><br><span class="line">fruits = [<span class="string">"Apple"</span>, <span class="string">"Orange"</span>, <span class="string">"Banana"</span>]</span><br><span class="line"></span><br><span class="line">fruits[<span class="number">0</span>]</span><br><span class="line">fruits[<span class="number">2</span>]</span><br><span class="line"><span class="comment">//fruits[123] =&gt; 값의 범위를 벗어난 위치를 참조하려 했기 때문에 오류</span></span><br><span class="line"></span><br><span class="line">fruits.startIndex <span class="comment">// 0</span></span><br><span class="line">fruits.endIndex <span class="comment">// 마지막 요소의 바로 다음 위치를 가리킨다. 여기서는 3이 나온다</span></span><br><span class="line"></span><br><span class="line">fruits[fruits.startIndex] <span class="comment">// Apple 참조</span></span><br><span class="line">fruits[fruits.endIndex - <span class="number">1</span>] <span class="comment">// Banana 참조</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fruits.startIndex == <span class="number">0</span></span><br><span class="line">fruits.endIndex - <span class="number">1</span> == <span class="number">2</span></span><br></pre></td></tr></table></figure>



<h2 id="Searching"><a href="#Searching" class="headerlink" title="Searching"></a>Searching</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> alphabet = [<span class="string">"A"</span>, <span class="string">"B"</span>, <span class="string">"C"</span>, <span class="string">"D"</span>, <span class="string">"E"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// A 가 있는지 검색</span></span><br><span class="line"><span class="keyword">if</span> alphabet.<span class="built_in">contains</span>(<span class="string">"A"</span>) &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"contains A"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 클로저 사용. 뭔 소린지는 아직 모르겠음</span></span><br><span class="line"><span class="keyword">if</span> alphabet.<span class="built_in">contains</span>(<span class="keyword">where</span>: &#123; str -&gt; <span class="type">Bool</span> <span class="keyword">in</span></span><br><span class="line">  <span class="comment">// code...</span></span><br><span class="line">  <span class="keyword">return</span> str == <span class="string">"A"</span></span><br><span class="line">&#125;) &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"contains A"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 특정 값의 위치를 알 고 싶을 때</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> index = alphabet.firstIndex(of: <span class="string">"D"</span>) &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"index of D: \(index)"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 이런 경우에는 옵셔널이라는 개념이 사용된다.</span></span><br><span class="line"><span class="comment">// 왜 옵셔널이라는 값이 사용될까? if로 감싼것 빼고는 차이가 없는데</span></span><br><span class="line"><span class="comment">//let idx1 = alphabet.firstIndex(of: "D")</span></span><br><span class="line"><span class="comment">//print(idx1)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 값이 아예 존재하지 않을 때는 nil을 반환한다.</span></span><br><span class="line"><span class="comment">//let idx2 = alphabet.firstIndex(of: "Q")</span></span><br><span class="line"><span class="comment">//print(idx2)</span></span><br></pre></td></tr></table></figure>



<h2 id="Add-a-new-Element"><a href="#Add-a-new-Element" class="headerlink" title="Add a new Element"></a>Add a new Element</h2><ul>
<li>append </li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> alphabetArray = [<span class="string">"A"</span>]</span><br><span class="line">alphabetArray.append(<span class="string">"B"</span>)</span><br><span class="line">alphabetArray += [<span class="string">"C"</span>]</span><br><span class="line"><span class="comment">// ["A", "B", "C"]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> alphabetArray2 = [<span class="string">"Q"</span>, <span class="string">"W"</span>, <span class="string">"E"</span>]</span><br><span class="line"><span class="comment">// ["A", "B", "C", "Q", "W", "E"]</span></span><br><span class="line">alphabetArray + alphabetArray2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 오류가 발생한다! 타입이 다르니까 </span></span><br><span class="line"><span class="comment">//alphabetArray.append(5.0)</span></span><br><span class="line"><span class="comment">//alphabetArray + 1</span></span><br></pre></td></tr></table></figure>

<ul>
<li>insert</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 0번째 위치에 S 삽입</span></span><br><span class="line">alphabetArray.insert(<span class="string">"S"</span>, at: <span class="number">0</span>)</span><br><span class="line">alphabetArray.insert(<span class="string">"F"</span>, at: <span class="number">3</span>)</span><br><span class="line">alphabetArray</span><br></pre></td></tr></table></figure>



<h2 id="Change-an-Existing-Element"><a href="#Change-an-Existing-Element" class="headerlink" title="Change an Existing Element"></a>Change an Existing Element</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">alphabetArray = [<span class="string">"A"</span>, <span class="string">"B"</span>, <span class="string">"C"</span>]</span><br><span class="line">alphabetArray[<span class="number">0</span>] = <span class="string">"Z"</span></span><br><span class="line">alphabetArray <span class="comment">// A 가 Z로 바뀜</span></span><br><span class="line"></span><br><span class="line">alphabetArray = [<span class="string">"A"</span>, <span class="string">"B"</span>, <span class="string">"C"</span>, <span class="string">"D"</span>, <span class="string">"E"</span>, <span class="string">"F"</span>]</span><br><span class="line">alphabetArray[<span class="number">2</span>...] = [<span class="string">"Q"</span>, <span class="string">"W"</span>, <span class="string">"E"</span>, <span class="string">"R"</span>]</span><br><span class="line">alphabetArray <span class="comment">// ["A", "B", "Q", "W", "E", "R"]</span></span><br><span class="line"></span><br><span class="line">lphabetArray[<span class="number">2</span>...] = [<span class="string">"Q"</span>, <span class="string">"W"</span>]</span><br><span class="line">alphabetArray   <span class="comment">// ["A", "B", "Q", "W"] 2번째 위치부터 뒤의 전부를 대체하는 뜻이기 때문에 맨뒤 e, r은 없어짐</span></span><br></pre></td></tr></table></figure>



<h2 id="Remove-an-Element"><a href="#Remove-an-Element" class="headerlink" title="Remove an Element"></a>Remove an Element</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alphabetArray = [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;, &quot;E&quot;]</span><br><span class="line"></span><br><span class="line">let removed = alphabetArray.remove(at: 0)</span><br><span class="line">alphabetArray // A 사라짐</span><br><span class="line"></span><br><span class="line">alphabetArray.removeAll() // 다 없어짐</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// index 찾아 지우기</span><br><span class="line">alphabetArray = [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;, &quot;E&quot;]</span><br><span class="line"></span><br><span class="line">// C의 위치를 찾아서 반환한 뒤, remove로 지움, 리터럴이 중복되면, 앞선 위치의 값을 지운다.</span><br><span class="line">if let indexC = alphabetArray.firstIndex(of: &quot;C&quot;) &#123;</span><br><span class="line">  alphabetArray.remove(at: indexC)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">alphabetArray</span><br></pre></td></tr></table></figure>



<h2 id="Sorting"><a href="#Sorting" class="headerlink" title="Sorting"></a>Sorting</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">alphabetArray = [<span class="string">"A"</span>, <span class="string">"B"</span>, <span class="string">"C"</span>, <span class="string">"D"</span>, <span class="string">"E"</span>]</span><br><span class="line">alphabetArray.shuffle() <span class="comment">// 순서를 섞음</span></span><br><span class="line"></span><br><span class="line">alphabetArray.<span class="built_in">sort</span>() <span class="comment">// 정렬</span></span><br><span class="line">alphabetArray</span><br><span class="line"></span><br><span class="line"><span class="comment">// shuffle vs shuffled</span></span><br><span class="line"><span class="built_in">print</span>(alphabetArray.shuffle()) <span class="comment">// 자기 자신, 즉 배열 자체가 변함, 반환 값이 없음</span></span><br><span class="line"><span class="built_in">print</span>(alphabetArray.shuffled()) <span class="comment">// 자기 자신은 변하지 않고, 바꾼 결과를 반환</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// sorted vs sort</span></span><br><span class="line"><span class="built_in">print</span>(alphabetArray.<span class="built_in">sort</span>()) <span class="comment">// 반환 값 없음</span></span><br><span class="line"><span class="built_in">print</span>(alphabetArray.sorted()) <span class="comment">// 정렬 된 상태로 반환함</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//func sorted() -&gt; [Element]</span></span><br><span class="line"><span class="comment">//mutating func sort()</span></span><br><span class="line"></span><br><span class="line">alphabetArray.shuffle()</span><br><span class="line">alphabetArray.shuffled</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sortedArray = alphabetArray.sorted()</span><br><span class="line">sortedArray</span><br><span class="line">alphabetArray</span><br><span class="line"></span><br><span class="line"><span class="comment">// sort by closure syntax</span></span><br><span class="line"><span class="comment">// 클로저 배울 때 다시 배울 거지만 이런 형태로도 사용 가능하다.</span></span><br><span class="line"><span class="comment">// 원하는 형태로 정렬할 수 있음</span></span><br><span class="line">sortedArray = alphabetArray.sorted &#123; $<span class="number">0</span> &gt; $<span class="number">1</span> &#125;</span><br><span class="line">alphabetArray.sorted(by: &gt;= )</span><br><span class="line">sortedArray</span><br></pre></td></tr></table></figure>



<h2 id="Enumerating-an-Array"><a href="#Enumerating-an-Array" class="headerlink" title="Enumerating an Array"></a>Enumerating an Array</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 배열의 인덱스와 내용을 함께 알고 싶을 때</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> array = [<span class="string">"Apple"</span>, <span class="string">"Orange"</span>, <span class="string">"Melon"</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> array &#123;</span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">let</span> index = array.firstIndex(of: value) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"\(index) - \(value)"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 0 - Apple</span></span><br><span class="line"><span class="comment">// 1 - Orange</span></span><br><span class="line"><span class="comment">// 2 - Melon</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//위와 같은 기능</span></span><br><span class="line"><span class="keyword">for</span> tuple <span class="keyword">in</span> array.enumerated() &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"\(tuple.0) - \(tuple.1)"</span>)</span><br><span class="line"><span class="comment">//  print("\(tuple.offset) - \(tuple.element)")</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 바로 위의 코드를 아래와 같이 사용할 수 있다.</span></span><br><span class="line"><span class="keyword">for</span> (index, element) <span class="keyword">in</span> array.enumerated() &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"\(index) - \(element)"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// element를 거꾸로 출력한다. </span></span><br><span class="line"><span class="keyword">for</span> (index, element) <span class="keyword">in</span> array.reversed().enumerated() &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"\(index) - \(element)"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 0 - Melon</span></span><br><span class="line"><span class="comment">// 1 - Orange</span></span><br><span class="line"><span class="comment">// 2 - Apple</span></span><br></pre></td></tr></table></figure>

<h4 id="Q"><a href="#Q" class="headerlink" title="Q."></a>Q.</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line"> [&quot;p&quot;, &quot;u&quot;, &quot;p&quot;, &quot;p&quot;, &quot;y&quot;] 라는 배열에서 마지막 &quot;p&quot; 문자 하나만 삭제하기</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">var puppy = [&quot;p&quot;, &quot;u&quot;, &quot;p&quot;, &quot;p&quot;, &quot;y&quot;]</span><br><span class="line">if let lastIndexOfP = puppy.lastIndex(of: &quot;p&quot;) &#123;</span><br><span class="line">  puppy.remove(at: lastIndexOfP)</span><br><span class="line">&#125;</span><br><span class="line">puppy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> 정수 타입의 배열을 2개 선언하고 두 배열의 값 중 겹치는 숫자들로만 이루어진 배열 만들기</span><br><span class="line"> ex) [1, 2, 4, 8, 9, 12, 13] , [2, 5, 6, 9, 13]  --&gt;  [2, 9, 13]</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">let firstArray = [1, 2, 4, 8, 9, 12, 13]</span><br><span class="line">let secondArray = [2, 5, 6, 9, 13]</span><br><span class="line"></span><br><span class="line">var result: [Int] = []</span><br><span class="line">for i in firstArray &#123;</span><br><span class="line">  for j in secondArray &#123;</span><br><span class="line">    if i == j &#123;</span><br><span class="line">      result.append(j)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> 정수 타입의 배열을 선언하고 해당 배열 요소 중 가장 큰 값을 반환하는 함수 만들기</span><br><span class="line"> ex) [50, 23, 29, 1, 45, 39, 59, 19, 15] -&gt; 59</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">// 1) Swift 에서 제공하는 기본 함수인 max() 를 이용하는 방법</span><br><span class="line">let arr = [50, 23, 29, 1, 45, 39, 59, 19, 15]</span><br><span class="line">arr.max()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 2) 두 수 중 높은 값을 반환하는 max 를 이용하거나, 3항 연산자를 이용하는 방법</span><br><span class="line">func maximumValue(in list: [Int]) -&gt; Int &#123;</span><br><span class="line">  var maxValue = Int.min</span><br><span class="line">  for number in list &#123;</span><br><span class="line">    maxValue = max(maxValue, number)</span><br><span class="line">    </span><br><span class="line">    // 위 함수는 다음의 3항 연산자와 동일</span><br><span class="line">    // maxValue = maxValue &lt; number ? number : maxValue</span><br><span class="line">  &#125;</span><br><span class="line">  return maxValue</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">maximumValue(in: [50, 23, 29, 1, 45, 39, 59, 19, 15])</span><br><span class="line">maximumValue(in: [10, 20, 30, 80, 50, 40])</span><br><span class="line">maximumValue(in: [-6, -5, -4, -3, -2, -1])</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="Dictionary"><a href="#Dictionary" class="headerlink" title="Dictionary"></a>Dictionary</h1><ul>
<li>Element = Unique Key + Value</li>
<li>Unordered Collection</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// value는 같아도 상관없지만, key는 중복되면 안됨</span></span><br><span class="line"><span class="keyword">var</span> dictFromLiteral = [<span class="string">"key 1"</span>: <span class="string">"value 1"</span>, <span class="string">"key 2"</span>: <span class="string">"value 2"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// key의 타입과 value의 타입이 같을 필요는 없다</span></span><br><span class="line"><span class="keyword">var</span> dictFromLiteral = [<span class="number">1</span>: <span class="string">"value 1"</span>, <span class="number">2</span>: <span class="string">"value 2"</span>]</span><br><span class="line"><span class="keyword">var</span> dictFromLiteral = [<span class="string">"1"</span>: <span class="number">1</span>, <span class="string">"2"</span>: <span class="number">2</span>]</span><br><span class="line">dictFromLiteral = [:]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 오류</span></span><br><span class="line"><span class="comment">//var dictFromLiteral = [:]</span></span><br></pre></td></tr></table></figure>

<h3 id="Q-키가-String이고-Int-타입인-자료가-없는-상태의-빈-딕셔너리를-만드세요"><a href="#Q-키가-String이고-Int-타입인-자료가-없는-상태의-빈-딕셔너리를-만드세요" class="headerlink" title="Q. 키가 String이고, Int 타입인, 자료가 없는 상태의 빈 딕셔너리를 만드세요"></a>Q. 키가 String이고, Int 타입인, 자료가 없는 상태의 빈 딕셔너리를 만드세요</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> emptyDic : [<span class="type">String</span>:<span class="type">Int</span>] = [:]</span><br></pre></td></tr></table></figure>

<h3 id="Type-Annotation-과-Type-Inference-방식을-모두-이용해-여러-가지-데이터를-넣어-딕셔너리를-만들어보세요"><a href="#Type-Annotation-과-Type-Inference-방식을-모두-이용해-여러-가지-데이터를-넣어-딕셔너리를-만들어보세요" class="headerlink" title="Type Annotation 과 Type Inference 방식을 모두 이용해 여러 가지 데이터를 넣어 딕셔너리를 만들어보세요."></a>Type Annotation 과 Type Inference 방식을 모두 이용해 여러 가지 데이터를 넣어 딕셔너리를 만들어보세요.</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> variousDic = [<span class="number">1</span> : <span class="string">"커피"</span>, <span class="number">2</span> : <span class="string">"고기"</span>]</span><br></pre></td></tr></table></figure>

<h2 id="Number-of-Elements-1"><a href="#Number-of-Elements-1" class="headerlink" title="Number of Elements"></a>Number of Elements</h2><p>Count 속성으로 키와 값 쌍의 갯수를 반환할 수 있다</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> words = [<span class="string">"A"</span>: <span class="string">"Apple"</span>, <span class="string">"B"</span>: <span class="string">"Banana"</span>, <span class="string">"C"</span>: <span class="string">"City"</span>]</span><br><span class="line"><span class="keyword">let</span> countOfWords = words.<span class="built_in">count</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> !words.isEmpty &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"\(countOfWords) element(s)"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"empty dictionary"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Retrieve-회수하다-an-Element"><a href="#Retrieve-회수하다-an-Element" class="headerlink" title="Retrieve(회수하다) an Element"></a>Retrieve(회수하다) an Element</h2><p>키를 이용하여 값을 조회할 수 있다.</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> words = [<span class="string">"A"</span>: <span class="string">"Apple"</span>, <span class="string">"B"</span>: <span class="string">"Banana"</span>, <span class="string">"C"</span>: <span class="string">"City"</span>]</span><br><span class="line"></span><br><span class="line">words[<span class="string">"A"</span>]</span><br><span class="line">words[<span class="string">"Q"</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> aValue = words[<span class="string">"A"</span>] &#123;</span><br><span class="line">  <span class="built_in">print</span>(aValue)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"Not found"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> zValue = words[<span class="string">"Z"</span>] &#123;</span><br><span class="line">  <span class="built_in">print</span>(zValue)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"Not found"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>키만 출력하는 것도 가능, 조회한 키들을 배열에 담는 것도 가능</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(words.keys)</span><br><span class="line"><span class="built_in">print</span>(words.values)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> keys = <span class="type">Array</span>(words.keys)</span><br><span class="line"><span class="keyword">let</span> values = <span class="type">Array</span>(words.values)</span><br></pre></td></tr></table></figure>

<h2 id="Enumerating-나열하기-an-Dictionary"><a href="#Enumerating-나열하기-an-Dictionary" class="headerlink" title="Enumerating(나열하기) an Dictionary"></a>Enumerating(나열하기) an Dictionary</h2><p>For 문을 이용하여 키와 값을 순회탐색 할 수 있다</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> dict = [<span class="string">"A"</span>: <span class="string">"Apple"</span>, <span class="string">"B"</span>: <span class="string">"Banana"</span>, <span class="string">"C"</span>: <span class="string">"City"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">//키 &amp; 값 조회</span></span><br><span class="line"><span class="keyword">for</span> (key, value) <span class="keyword">in</span> dict &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"\(key): \(value)"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//A: Apple</span></span><br><span class="line"><span class="comment">//C: City</span></span><br><span class="line"><span class="comment">//B: Banana</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 키만 조회</span></span><br><span class="line"><span class="keyword">for</span> (key, <span class="number">_</span>) <span class="keyword">in</span> dict &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"Key :"</span>, key)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Key : A</span></span><br><span class="line"><span class="comment">//Key : C</span></span><br><span class="line"><span class="comment">//Key : B</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 값만 조회</span></span><br><span class="line"><span class="keyword">for</span> (<span class="number">_</span>, value) <span class="keyword">in</span> dict &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"Value :"</span>, value)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Value : Apple</span></span><br><span class="line"><span class="comment">//Value : City</span></span><br><span class="line"><span class="comment">//Value : Banana</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// values 속성을 이용하여 값만 조회</span></span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> dict.values &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"Value :"</span>, value)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Value : Apple</span></span><br><span class="line"><span class="comment">//Value : City</span></span><br><span class="line"><span class="comment">//Value : Banana</span></span><br></pre></td></tr></table></figure>

<h2 id="Searching-1"><a href="#Searching-1" class="headerlink" title="Searching"></a>Searching</h2><p>키 값 검색</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> words = [<span class="string">"A"</span>: <span class="string">"Apple"</span>, <span class="string">"B"</span>: <span class="string">"Banana"</span>, <span class="string">"C"</span>: <span class="string">"City"</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (key, <span class="number">_</span>) <span class="keyword">in</span> words &#123;</span><br><span class="line">  <span class="keyword">if</span> key == <span class="string">"A"</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"contains A key."</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// contains A key.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> words.<span class="built_in">contains</span>(<span class="keyword">where</span>: &#123; (key, value) -&gt; <span class="type">Bool</span> <span class="keyword">in</span></span><br><span class="line">  <span class="keyword">return</span> key == <span class="string">"A"</span></span><br><span class="line">  &#125;) &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"contains A key."</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// contains A key.</span></span><br></pre></td></tr></table></figure>

<p>추가 / 변경</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">words = [<span class="string">"A"</span>: <span class="string">"A"</span>]</span><br><span class="line">words</span><br><span class="line"><span class="comment">// 키 A의 값 A로 변경</span></span><br><span class="line">words[<span class="string">"A"</span>]    <span class="comment">// Key -&gt; Unique</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 키 A의 값 Apple 로 변경</span></span><br><span class="line">words[<span class="string">"A"</span>] = <span class="string">"Apple"</span></span><br><span class="line">words</span><br><span class="line"></span><br><span class="line">words[<span class="string">"B"</span>] = <span class="string">"Banana"</span></span><br><span class="line">words</span><br><span class="line"></span><br><span class="line"><span class="comment">// 값을 변경한다.</span></span><br><span class="line">words[<span class="string">"B"</span>] = <span class="string">"Blue"</span></span><br><span class="line">words</span><br><span class="line"><span class="comment">// 키 B의 값 Banana로 변경</span></span><br></pre></td></tr></table></figure>

<h2 id="Change-an-Existing-Element-1"><a href="#Change-an-Existing-Element-1" class="headerlink" title="Change an Existing Element"></a>Change an Existing Element</h2><p>기존의 딕셔너리에 키가 이미 존재하면 value를 업데이트 한 후 기존 값을 반환한다.</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">words[<span class="string">"A"</span>] = <span class="string">"App"</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> oldValue = words.updateValue(<span class="string">"Apple"</span>, forKey: <span class="string">"A"</span>) &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"\(oldValue) =&gt; \(words["</span><span class="type">A</span><span class="string">"]!)"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"Insert \(words["</span><span class="type">A</span><span class="string">"]!)"</span>)</span><br><span class="line">&#125;</span><br><span class="line">words</span><br><span class="line"><span class="comment">// App =&gt; Apple 출력</span></span><br></pre></td></tr></table></figure>

<p>기존의 딕셔너리에 키가 없으면 value를 추가한 후 nil을 반환한다.</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> oldValue = words.updateValue(<span class="string">"Steve Jobs"</span>, forKey: <span class="string">"S"</span>) &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"\(oldValue) =&gt; \(words["</span><span class="type">S</span><span class="string">"]!)"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"Add S Key with \(words["</span><span class="type">S</span><span class="string">"]!)"</span>)</span><br><span class="line">&#125;</span><br><span class="line">words</span><br><span class="line"><span class="comment">// S는 추가 되었지만</span></span><br><span class="line"><span class="comment">// Add S Key with Steve Jobs 가 출력된다</span></span><br></pre></td></tr></table></figure>

<h2 id="Remove-an-Element-1"><a href="#Remove-an-Element-1" class="headerlink" title="Remove an Element"></a>Remove an Element</h2><p>삭제하기!</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">words = [<span class="string">"A"</span>: <span class="string">"Apple"</span>, <span class="string">"I"</span>: <span class="string">"IPhone"</span>, <span class="string">"S"</span>: <span class="string">"Steve Jobs"</span>, <span class="string">"T"</span>: <span class="string">"Timothy Cook"</span>]</span><br><span class="line">words[<span class="string">"S"</span>] = <span class="literal">nil</span></span><br><span class="line">words[<span class="string">"Z"</span>] = <span class="literal">nil</span></span><br><span class="line">words</span><br><span class="line"><span class="comment">// S와 Z의 키와 값이 모두 사라짐</span></span><br></pre></td></tr></table></figure>



<p>지우려는 키가 존재하면 데이터를 지운 후 지운 데이터 반환, 없으면 nil 반환</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> removedValue = words.removeValue(forKey: <span class="string">"T"</span>) &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"\(removedValue) removed!"</span>)</span><br><span class="line">&#125;</span><br><span class="line">words</span><br><span class="line"><span class="comment">// Timothy Cook removed! 반환</span></span><br><span class="line"></span><br><span class="line">words.removeAll() <span class="comment">// 모두 제거</span></span><br></pre></td></tr></table></figure>

<h2 id="Nested"><a href="#Nested" class="headerlink" title="Nested"></a>Nested</h2><p>딕셔너리 내부에 딕셔너리, 그 딕셔너리 내부에 딕셔너리</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> dict1 = [<span class="type">String</span>: [<span class="type">String</span>]]()</span><br><span class="line"><span class="comment">//dict1["arr"] = "A"</span></span><br><span class="line">dict1[<span class="string">"arr1"</span>] = [<span class="string">"A"</span>, <span class="string">"B"</span>, <span class="string">"C"</span>]</span><br><span class="line">dict1[<span class="string">"arr2"</span>] = [<span class="string">"D"</span>, <span class="string">"E"</span>, <span class="string">"F"</span>]</span><br><span class="line"><span class="built_in">print</span>(dict1)</span><br><span class="line"></span><br><span class="line"><span class="comment">//["arr1": ["A", "B", "C"], "arr2": ["D", "E", "F"]]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> dict2 = [<span class="type">String</span>: [<span class="type">String</span>: <span class="type">String</span>]]()</span><br><span class="line">dict2[<span class="string">"user"</span>] = [</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"나개발"</span>,</span><br><span class="line">  <span class="string">"job"</span>: <span class="string">"iOS 개발자"</span>,</span><br><span class="line">  <span class="string">"hobby"</span>: <span class="string">"코딩"</span>,</span><br><span class="line">]</span><br><span class="line"><span class="built_in">print</span>(dict2)</span><br><span class="line"><span class="comment">//["user": ["name": "나개발", "job": "iOS 개발자", "hobby": "코딩"]]</span></span><br></pre></td></tr></table></figure>

<p>값의 타입이 다양한 딕셔너리도 가능하다</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"나개발"</span>, <span class="comment">// String : String</span></span><br><span class="line">  <span class="string">"job"</span>: <span class="string">"iOS 개발자"</span>, </span><br><span class="line">  <span class="string">"age"</span>: <span class="number">20</span>, <span class="comment">// String : Int</span></span><br><span class="line">  <span class="string">"hobby"</span>: <span class="string">"코딩"</span>,</span><br><span class="line">  <span class="string">"apps"</span>: [ <span class="comment">// String : Array</span></span><br><span class="line">    <span class="string">"이런 앱"</span>,</span><br><span class="line">    <span class="string">"저런 앱"</span>,</span><br><span class="line">    <span class="string">"잘된 앱"</span>,</span><br><span class="line">    <span class="string">"망한 앱"</span>,</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"teamMember"</span>: [ <span class="comment">// String : Dictionary</span></span><br><span class="line">    <span class="string">"designer"</span>: <span class="string">"김철수"</span>,</span><br><span class="line">    <span class="string">"marketer"</span>: <span class="string">"홍길동"</span></span><br><span class="line">  ]</span><br><span class="line">] <span class="keyword">as</span> [<span class="type">String</span>: <span class="type">Any</span>]</span><br><span class="line"><span class="comment">// 이 전체가 하나의 딕셔너리!</span></span><br></pre></td></tr></table></figure>



<h3 id="Q-Dictionary-로-저장되어-있는-시험-성적의-평균-점수-구하기"><a href="#Q-Dictionary-로-저장되어-있는-시험-성적의-평균-점수-구하기" class="headerlink" title="Q. Dictionary 로 저장되어 있는 시험 성적의 평균 점수 구하기"></a>Q. Dictionary 로 저장되어 있는 시험 성적의 평균 점수 구하기</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> scores = [<span class="string">"kor"</span>: <span class="number">92</span>,<span class="string">"eng"</span>: <span class="number">88</span>, <span class="string">"math"</span>: <span class="number">96</span>, <span class="string">"science"</span>: <span class="number">89</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> score <span class="keyword">in</span> scores.values &#123;</span><br><span class="line">  sum += score</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> average = <span class="type">Double</span>(sum) / <span class="type">Double</span>(scores.values.<span class="built_in">count</span>)</span><br><span class="line"><span class="built_in">print</span>(average)</span><br></pre></td></tr></table></figure>



<h3 id="Q-Dictionary로-저장된-scores-데이터를-튜플-타입을-지닌-배열로-변환하여-저장하기"><a href="#Q-Dictionary로-저장된-scores-데이터를-튜플-타입을-지닌-배열로-변환하여-저장하기" class="headerlink" title="Q. Dictionary로 저장된 scores 데이터를 튜플 타입을 지닌 배열로 변환하여 저장하기"></a>Q. Dictionary로 저장된 scores 데이터를 튜플 타입을 지닌 배열로 변환하여 저장하기</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> scores = [<span class="string">"kor"</span>: <span class="number">92</span>,<span class="string">"eng"</span>: <span class="number">88</span>, <span class="string">"math"</span>: <span class="number">96</span>, <span class="string">"science"</span>: <span class="number">89</span>]</span><br><span class="line"><span class="keyword">var</span> scoreArr: [(<span class="type">String</span>, <span class="type">Int</span>)] = []</span><br><span class="line"></span><br><span class="line"><span class="comment">// case 1</span></span><br><span class="line"><span class="keyword">for</span> (key, value) <span class="keyword">in</span> scores &#123;</span><br><span class="line">  scoreArr.append((key, value))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// case 2</span></span><br><span class="line"><span class="keyword">for</span> dict <span class="keyword">in</span> scores &#123;</span><br><span class="line">  scoreArr.append(dict)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// case 3</span></span><br><span class="line">scoreArr = <span class="type">Array</span>(scores)</span><br></pre></td></tr></table></figure>

<h3 id="Q-주어진-자료를-보고-Dictionary-자료형에-맞게-데이터를-변수에-저장하기"><a href="#Q-주어진-자료를-보고-Dictionary-자료형에-맞게-데이터를-변수에-저장하기" class="headerlink" title="Q. 주어진 자료를 보고 Dictionary 자료형에 맞게 데이터를 변수에 저장하기"></a>Q. 주어진 자료를 보고 Dictionary 자료형에 맞게 데이터를 변수에 저장하기</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 패스트캠퍼스</span></span><br><span class="line"><span class="comment">  - 스쿨</span></span><br><span class="line"><span class="comment">    * iOS 스쿨</span></span><br><span class="line"><span class="comment">    * 백엔드 스쿨</span></span><br><span class="line"><span class="comment">    * 프론트엔드 스쿨</span></span><br><span class="line"><span class="comment">  - 캠프</span></span><br><span class="line"><span class="comment">    * A 강의</span></span><br><span class="line"><span class="comment">    * B 강의</span></span><br><span class="line"><span class="comment">  - 온라인</span></span><br><span class="line"><span class="comment">    * C 강의</span></span><br><span class="line"><span class="comment">    * D 강의</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> fastcampus = [</span><br><span class="line">  <span class="string">"패스트캠퍼스"</span>: [</span><br><span class="line">    <span class="string">"스쿨"</span>: [<span class="string">"iOS 스쿨"</span>, <span class="string">"백엔드 스쿨"</span>, <span class="string">"프론트엔드 스쿨"</span>],</span><br><span class="line">    <span class="string">"캠프"</span>: [<span class="string">"A 강의"</span>, <span class="string">"B 강의"</span>],</span><br><span class="line">    <span class="string">"온라인"</span>: [<span class="string">"C 강의"</span>, <span class="string">"D 강의"</span>],</span><br><span class="line">  ]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>



<h3 id="Q-위-문제에서-정의한-변수의-데이터-중-스쿨-배열에-저장된-첫번째-데이터를-꺼내어-출력하기-자세한-내용은-Optional-시간에"><a href="#Q-위-문제에서-정의한-변수의-데이터-중-스쿨-배열에-저장된-첫번째-데이터를-꺼내어-출력하기-자세한-내용은-Optional-시간에" class="headerlink" title="Q. 위 문제에서 정의한 변수의 데이터 중 스쿨 배열에 저장된 첫번째 데이터를 꺼내어 출력하기 (자세한 내용은 Optional 시간에!)"></a>Q. 위 문제에서 정의한 변수의 데이터 중 스쿨 배열에 저장된 첫번째 데이터를 꺼내어 출력하기 (자세한 내용은 Optional 시간에!)</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> 패캠 = fastcampus[<span class="string">"패스트캠퍼스"</span>] &#123;</span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">let</span> 스쿨 = 패캠[<span class="string">"스쿨"</span>] &#123;</span><br><span class="line">    <span class="built_in">print</span>(스쿨[<span class="number">0</span>])</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> 패캠 = fastcampus[<span class="string">"패스트캠퍼스"</span>], <span class="keyword">let</span> 스쿨 = 패캠[<span class="string">"스쿨"</span>], <span class="keyword">let</span> iOS = 스쿨.first &#123;</span><br><span class="line">  <span class="built_in">print</span>(iOS)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(fastcampus[<span class="string">"패스트캠퍼스"</span>]![<span class="string">"스쿨"</span>]![<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 결과는 모두 동일하다.</span></span><br><span class="line"><span class="comment">// iOS 스쿨</span></span><br></pre></td></tr></table></figure>



<h1 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h1><ul>
<li>정렬 되지 않은 모음</li>
<li>unique value</li>
<li>전반적으로 배열과 유사함</li>
<li>Array와 Dictionary에 비하면 사용빈도가 낮다</li>
</ul>
<p>선언</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> fruitsSet: <span class="type">Set</span>&lt;<span class="type">String</span>&gt; = [<span class="string">"Apple"</span>, <span class="string">"Orange"</span>, <span class="string">"Melon"</span>]</span><br><span class="line"><span class="keyword">let</span> numbers: <span class="type">Set</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">let</span> emptySet = <span class="type">Set</span>&lt;<span class="type">String</span>&gt;()</span><br></pre></td></tr></table></figure>



<h2 id="Number-of-Elements-2"><a href="#Number-of-Elements-2" class="headerlink" title="Number of Elements"></a>Number of Elements</h2><p>데이터의 갯수 반환하기! 배열과 같음 count 속성을 이용한다.</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> fruitsSet: <span class="type">Set</span>&lt;<span class="type">String</span>&gt; = [<span class="string">"Apple"</span>, <span class="string">"Orange"</span>, <span class="string">"Melon"</span>]</span><br><span class="line">fruitsSet.<span class="built_in">count</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> !fruitsSet.isEmpty &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"\(fruitsSet.count) element(s)"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"empty set"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3 element(s) 출력</span></span><br></pre></td></tr></table></figure>

<h2 id="Searching-2"><a href="#Searching-2" class="headerlink" title="Searching"></a>Searching</h2><p>배열과는 달리 순서가 정렬되어 있는 것이 아니기 때문에 인덱스 주소로 검색할 수 없다.</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> x: <span class="type">Set</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">let</span> y: <span class="type">Set</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">x</span><br><span class="line">y</span><br><span class="line"><span class="comment">// 출력해 보면 같은 모양의 집합이지만 순서는 엉망진창이다. 완전 다름</span></span><br><span class="line"></span><br><span class="line">fruitsSet[<span class="number">0</span>]    <span class="comment">// 오류!!!!!!</span></span><br><span class="line">x.first   <span class="comment">// 첫 번째 값만 반환한다</span></span><br></pre></td></tr></table></figure>

<p>contains 속성을 이용하여 참조 가능하다</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> fruitsSet: <span class="type">Set</span>&lt;<span class="type">String</span>&gt; = [<span class="string">"Apple"</span>, <span class="string">"Orange"</span>, <span class="string">"Melon"</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> fruitsSet.<span class="built_in">contains</span>(<span class="string">"Apple"</span>) &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"Contains Apple"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Has prefix 속성을 이용하여 첫 번째 글자를 통해 참조도 가능하다</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> productSet: <span class="type">Set</span> = [<span class="string">"iPhone"</span>, <span class="string">"iPad"</span>, <span class="string">"Mac Pro"</span>, <span class="string">"iPad Pro"</span>, <span class="string">"Macbook Pro"</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> element <span class="keyword">in</span> productSet &#123;</span><br><span class="line">  <span class="keyword">if</span> element.hasPrefix(<span class="string">"i"</span>) &#123;</span><br><span class="line">    <span class="built_in">print</span>(element)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// iPad Pro</span></span><br><span class="line"><span class="comment">// iPhone</span></span><br><span class="line"><span class="comment">// iPad</span></span><br></pre></td></tr></table></figure>

<h2 id="Add-a-New-Element"><a href="#Add-a-New-Element" class="headerlink" title="Add a New Element"></a>Add a New Element</h2><p>역시 배열과 달리 인덱싱을 통해 데이터를 추가하는 append 속성과 at 속성은 사용할 수 없다.</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].append(<span class="number">1</span>)</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].insert(<span class="number">2</span>, at: <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 둘다 에러!!!!!</span></span><br></pre></td></tr></table></figure>

<p>Insert 속성을 통해 밀어넣는다</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> stringSet: <span class="type">Set</span>&lt;<span class="type">String</span>&gt; = []</span><br><span class="line">stringSet.insert(<span class="string">"Apple"</span>)</span><br><span class="line">stringSet</span><br><span class="line"></span><br><span class="line">stringSet.insert(<span class="string">"Orange"</span>)</span><br><span class="line">stringSet</span><br><span class="line"></span><br><span class="line">stringSet.insert(<span class="string">"Orange"</span>)</span><br><span class="line">stringSet</span><br><span class="line"></span><br><span class="line"><span class="comment">// 물론 넣은 순서대로 정렬되지는 않는다.</span></span><br></pre></td></tr></table></figure>

<h2 id="Remove-an-Element-2"><a href="#Remove-an-Element-2" class="headerlink" title="Remove an Element"></a>Remove an Element</h2><p>데이터를 지울 때 역시 인덱스를 통하지 않고 직접 remove 속성을 이용하여 지운다.</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">stringSet = [<span class="string">"Apple"</span>, <span class="string">"Orange"</span>, <span class="string">"Melon"</span>]</span><br><span class="line"></span><br><span class="line">stringSet.remove(<span class="string">"Apple"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> removed = stringSet.remove(<span class="string">"Orange"</span>) &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"\(removed) has been removed!"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">stringSet</span><br><span class="line"></span><br><span class="line">stringSet.removeAll()</span><br></pre></td></tr></table></figure>



<h2 id="Compare-two-sets"><a href="#Compare-two-sets" class="headerlink" title="Compare two sets"></a>Compare two sets</h2><p>비교 연산자를 사용하여 두 개의 집합을 비교할 수 있다. bool 타입을 반환한다.</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> favoriteFruits = <span class="type">Set</span>([<span class="string">"Apple"</span>, <span class="string">"Orange"</span>, <span class="string">"Melon"</span>])</span><br><span class="line"><span class="keyword">var</span> tropicalFruits = <span class="type">Set</span>([<span class="string">"Banana"</span>, <span class="string">"Papaya"</span>, <span class="string">"Kiwi"</span>, <span class="string">"Pineapple"</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> favoriteFruits == tropicalFruits &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"favoriteFruits == tropicalFruits"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"favoriteFruits != tropicalFruits"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// favoriteFruits != tropicalFruits 출력</span></span><br></pre></td></tr></table></figure>

<p>그런데 elementsEqual 속성은 순서까지 같아야 한다.</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> favoriteFruits1 = <span class="type">Set</span>([<span class="string">"Orange"</span>, <span class="string">"Melon"</span>, <span class="string">"Apple"</span>])</span><br><span class="line"><span class="keyword">var</span> favoriteFruits2 = <span class="type">Set</span>([<span class="string">"Apple"</span>, <span class="string">"Melon"</span>, <span class="string">"Orange"</span>])</span><br><span class="line"></span><br><span class="line">favoriteFruits1 == favoriteFruits2 <span class="comment">// true 반환</span></span><br><span class="line">favoriteFruits1.elementsEqual(favoriteFruits2) <span class="comment">// false 반환</span></span><br></pre></td></tr></table></figure>



<h2 id="Fundamental-Set-Operations"><a href="#Fundamental-Set-Operations" class="headerlink" title="Fundamental Set Operations"></a>Fundamental Set Operations</h2><ul>
<li>intersection - 교집합</li>
<li>symmetricDifference - 교집합의 여집합</li>
<li>union - 합집합</li>
<li>subtracting - 차집합</li>
</ul>
<p>관련 업계 종사자가 아닌 이상 딱히 쓸 기능은 아니므로 이런게 있다고만 알고 넘어간다.</p>
<h1 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h1><h3 id="Q-배열의-크기를-‘굳이’-상수에-할당하여-순회탐색을-하는-이유가-뭔가요"><a href="#Q-배열의-크기를-‘굳이’-상수에-할당하여-순회탐색을-하는-이유가-뭔가요" class="headerlink" title="Q. 배열의 크기를 ‘굳이’ 상수에 할당하여 순회탐색을 하는 이유가 뭔가요?"></a>Q. 배열의 크기를 ‘굳이’ 상수에 할당하여 순회탐색을 하는 이유가 뭔가요?</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> cities = [<span class="string">"Seoul"</span>, <span class="string">"Newyork"</span>, <span class="string">"LA"</span>, <span class="string">"Santiago"</span>]</span><br><span class="line"><span class="keyword">let</span> length = cities.<span class="built_in">count</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;length &#123;</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">"\(i)번째 배열 원소는 \(cities[i]입니다)"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>이와 같이 상수 length에 담아서 탐색하지 않고,</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;cities.<span class="built_in">count</span> &#123;</span><br><span class="line"><span class="comment">// ~~~</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>위와 같은 식으로 직접 배열의 크기를 계산하여 사용하면 코드가 더 간결해지지만, </p>
<p>잠재적으로 문제가 될 소지가 있는 구문이 된다.</p>
<p>for~in 구문은 루프를 반복할 때마다 매번 조건식을 평가하기 때문에, 배열의 크기를 매번 다시 계산하게 된다.</p>
<p>배열의 크기가 작다면 크게 문제가 되진 않겠지만, 배열이 크다면 매번 배열의 크기를 계산하는 것은 <em>전체적으로</em></p>
<p><em>실행 속도를 떨어뜨리는 원인이 된다.</em></p>
<hr>
<h3 id="무슨-차이인건가요"><a href="#무슨-차이인건가요" class="headerlink" title="무슨 차이인건가요?"></a>무슨 차이인건가요?</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 특정 값의 위치를 알고 싶을 때</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> index = alphabet.firstIndex(of: <span class="string">"D"</span>) &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"index of D: \(index)"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> idx1 = alphabet.firstIndex(of: <span class="string">"D"</span>)</span><br><span class="line"><span class="comment">//print(idx1)</span></span><br></pre></td></tr></table></figure>

<p>위 두 가지 코드는 if로 감싼 것 외에는 별 다른 차이가 없다.</p>
<p>설명하기 위해서는 Optional 이라는 개념을 이해해야 하니 내일로 넘어간다. </p>
]]></content>
      <categories>
        <category>TIL</category>
      </categories>
      <tags>
        <tag>swift, iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo / github</title>
    <url>/2019/11/12/</url>
    <content><![CDATA[<h1 id="hexo-블로그-테마-적용하기"><a href="#hexo-블로그-테마-적용하기" class="headerlink" title="hexo 블로그 테마 적용하기"></a>hexo 블로그 테마 적용하기</h1><p>한국어 지원 안하는 테마들 지원해주는 경험도 좋음</p><p>Ghblog 디렉토리에 클론  경로 주의!</p><p>vi _config.yml</p><p>켜서 theme 수정</p><p>나와서</p><p>hexo clean &amp;&amp; hexo generate</p><p>hexo server 로 로컬 서버 돌리고</p><a id="more"></a>






<p>확인</p>
<p>성공!</p>
<p>iTerm 이런저런 설정은 ulgoon.github.io 가서 확인!</p>
<hr>
<h1 id="branch"><a href="#branch" class="headerlink" title="branch"></a>branch</h1><ul>
<li>어떤 시점에 분기점을 치는 행위 -&gt; 브랜치를 친다</li>
<li>분기점을 생성하고 독립적으로 코드를 변경할 수 있도록 도와주는 모델</li>
</ul>
<p>일단 로컬 저장소로 이동!</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd iOS-git-first</span><br></pre></td></tr></table></figure>



<p>마블 멀티 유니버스의 개념이랑 유사함</p>
<p>스파이더맨이라는 캐릭터가 있는데 유니버스마다 스파이더맨의 성향이 다르게 설정할 수 있음</p>
<p>브랜치도 이와 유사함</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure>

<p>위 명령어를 치면 현재 브랜치 목록 출력</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git branch earth123</span><br></pre></td></tr></table></figure>

<p>earth123 브랜치 생성</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git checkout earth123</span><br></pre></td></tr></table></figure>

<p>Earth123 브랜치로 이동!</p>
<ul>
<li>readme.md 수정하고 저장</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git add README.md</span><br></pre></td></tr></table></figure>

<p>git status 를 찍어서 상황을 확인해보자</p>
<p>Commit..</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git commit -m &quot;docs: remove contents from README.md&quot; branch test</span><br></pre></td></tr></table></figure>



<ul>
<li>작업한 내용이 마음에 안들면 브랜치 날려버리면 된다.</li>
<li>Earth123 브랜치의 작업 내용이 맘에 안든다! 날려버리자</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git branch -D earth123</span><br></pre></td></tr></table></figure>



<ul>
<li>연습해보자 </li>
<li>Edit-readme 브랜치 생성</li>
<li>checkout 하고 readme.md 수정</li>
<li>add, commit</li>
<li>확인</li>
</ul>
<p>master 브랜치로 이동한 상태에서 git diff edit-readme 명령어를치면 차이점을 확인 할 수 있다</p>
<hr>
<h1 id="merge"><a href="#merge" class="headerlink" title="merge"></a>merge</h1><ul>
<li>Edit-readme의 작업이 맘에 든다! Master 로 병합하자!</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git merge edit-readme</span><br></pre></td></tr></table></figure>



<hr>
<p>과제</p>
<ul>
<li>Add-profile 브랜치 생성해서 readme.md 수정 하고 병합</li>
<li>마스터에 병합이 끝나면 해당 기능 개발에 대한 작업이 완료 된 것이기 때문에 이미 완료된 브랜치들이 남아있을 필요가 없음</li>
<li>완료된 브랜치들 날려버리자</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git branch -D add-profile</span><br><span class="line">git branch -D edit-readme</span><br><span class="line">git branch // 현재 브랜치 상태 확인</span><br></pre></td></tr></table></figure>



<hr>
<h1 id="git-flow-strategy"><a href="#git-flow-strategy" class="headerlink" title="git flow strategy"></a>git flow strategy</h1><p>브랜치 목록</p>
<ol>
<li>master</li>
<li>develop</li>
<li>feature : 기능 개발 브랜치</li>
<li>feature 기능 개발 브랜치</li>
</ol>
<h2 id="version-naming"><a href="#version-naming" class="headerlink" title="version naming"></a>version naming</h2><ul>
<li>마스터 브랜치가 진행 될 수록 버전이 진행 되는 개념 매니저가 release 합시다! 하면 알아서 할것 우리가 건드릴 일은 별로 없음, 팀장급이 아니라면.</li>
<li>Ex) v1.0.1 맨 앞에 최초 상용 버전이 되었을때 1이 됨</li>
<li>맨 앞 숫자는 메이저한 변화를 반영한다.</li>
<li>완전 새로운데 앱 이름만 바뀐 경우 등</li>
<li>뭔가 기능(feature)가 추가 되면 가운데 숫자 올라감 v1.2.1, v1.3.1</li>
</ul>
<ul>
<li>Develop 을 앞에서 배운 master 브랜치 느낌으로 이해하면 됨</li>
</ul>
<h1 id="git-flow"><a href="#git-flow" class="headerlink" title="git flow"></a>git flow</h1><p>프로젝트를 시작할 때</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git flow init</span><br></pre></td></tr></table></figure>

<p>으로 시작</p>
<p>후 엔터엔터엔터엔터…</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git flow feature start flow-init</span><br></pre></td></tr></table></figure>



<p>touch main.swift</p>
<p>// 작업 끝</p>
<p>git gi</p>
<p>콜라보레이터</p>
<p>사용 잘 안함</p>
<h3 id="팀장"><a href="#팀장" class="headerlink" title="팀장"></a>팀장</h3><p>today lunch 레포를 생성하자 </p>
<p>리드미파일 수정하는 식으로 해볼거임</p>
<p>클론 하자</p>
<p>Today-lunch 들어가서 git flow init</p>
<p>git branch</p>
<p>Readme.md 수정</p>
<p>날짜 적을 것</p>
<p>git status</p>
<p>git add readme.md</p>
<p>git commit -m “docs: add date for today”</p>
<p>git push origin -u develop</p>
<h3 id="팀원"><a href="#팀원" class="headerlink" title="팀원"></a>팀원</h3><p>팀장 레포 들어가서 Fork</p>
<p>: 남의 레포에 push를 하려면 접근이 안됨,</p>
<p>그래서 사본을 만드는 거임 fork를 뜨는거다!</p>
<p>Fork를 하면 팀장꺼를 복사해서 팀원이 사용한다.</p>
<p>그리고 팀장레포에 가서 issue를 하나 만들면 된다.</p>
<p>Issue 에서는 제안, 신고 등 의견을 내는 곳임</p>
<p>실습에서는 점심메뉴를 적는 것으로 업데이트 한다.</p>
<p>이슈넘버가 생성된다. </p>
<p>복사한 레포, git clone</p>
<p> 그런데 팀장은 분명 branch를 쳤는데 반영이 안되어있다.</p>
<p>Readme도 팀장이 수정한 내용이 없음</p>
<p>그랴서 팀장의 상태를 땡겨와야함!</p>
<p>git flow init </p>
<p>git pull origin develop</p>
<p>요렇게 해서 팀장의 레포와 상태를 똑같이 만들어 놓고 팀원 본인의 기능 개발을 시작한다.</p>
<p>git flow feature start 1112-팀원명</p>
<p>이 실습은 readme.md 파일에 점심메뉴를 적는것으로 한다.</p>
<p>git add README.md</p>
<p>git commit -m “docs: blah blah”</p>
<p>git flow feature finish </p>
<p>git push origin develop</p>
<p>다 끝나면 팀장의 develop으로 pull 요청해야함. 접근권한이 없어서 사본을 떴으니깐. (master로 요청하면 안됨! 확인 주의)</p>
<p>pull request</p>
<p>solved #1 (이슈넘버)</p>
<h3 id="팀장-1"><a href="#팀장-1" class="headerlink" title="팀장"></a>팀장</h3><p>pull request를 확인한다</p>
<p>merge를 눌러주면 팀원의 작업 내용이 팀장의 레포에 반영이 됨</p>
]]></content>
      <categories>
        <category>TIL</category>
      </categories>
      <tags>
        <tag>hexo, github, blog</tag>
      </tags>
  </entry>
  <entry>
    <title>조건문 / 반복문</title>
    <url>/2019/11/11/</url>
    <content><![CDATA[<h1 id="if-statement"><a href="#if-statement" class="headerlink" title="if statement"></a>if statement</h1><p>조건문이 true이면 출력, else는 false일 때 출력, else if는 다른 조건이 true일 때 출력</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Logical And Operator</span></span><br><span class="line"><span class="keyword">if</span> (temperatureInFahrenheit &gt; <span class="number">0</span>) &amp;&amp; (temperatureInFahrenheit % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Logical And Operator</span></span><br><span class="line"><span class="keyword">if</span> temperatureInFahrenheit &gt; <span class="number">0</span>, temperatureInFahrenheit % <span class="number">2</span> == <span class="number">0</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Logical Or Operator</span></span><br><span class="line"><span class="keyword">if</span> temperatureInFahrenheit &gt; <span class="number">0</span> || temperatureInFahrenheit % <span class="number">2</span> == <span class="number">0</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a>




<p>&amp;&amp; 연산자는 자주 사용하니 , 로 대체 가능하다</p>
<h2 id="Q-if-else-if-if-문을-2개-하는-것과-차이점"><a href="#Q-if-else-if-if-문을-2개-하는-것과-차이점" class="headerlink" title="Q. if ~ else if  / if 문을 2개 하는 것과 차이점?"></a>Q. if ~ else if  / if 문을 2개 하는 것과 차이점?</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> number = <span class="number">9</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> number &lt; <span class="number">10</span> &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"10보다 작다"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> number &lt; <span class="number">20</span> &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"20보다 작다"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// if 문을 두번 사용 하면 위와 같은 경우 두 개 다 실행된다.</span></span><br></pre></td></tr></table></figure>

<h2 id="if-else-if-만-있을-때-else-없이-동일하게-처리하려면"><a href="#if-else-if-만-있을-때-else-없이-동일하게-처리하려면" class="headerlink" title="if ~ else if 만 있을 때 else 없이 동일하게 처리하려면?"></a>if ~ else if 만 있을 때 else 없이 동일하게 처리하려면?</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> = <span class="number">25</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> number &lt; <span class="number">10</span> &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"10보다 작다"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> number &lt; <span class="number">20</span> &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"20보다 작다"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> number &gt;= <span class="number">20</span> &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"20과 같거나 크다"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// else if에 해당하지 않는 모든 경우를 else가 들어갈 자리에 조건을 걸어줘야한다.</span></span><br></pre></td></tr></table></figure>



<hr>
<h1 id="Switch-statement"><a href="#Switch-statement" class="headerlink" title="Switch statement"></a>Switch statement</h1><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> switch &lt;#value#&gt; &#123;</span></span><br><span class="line"><span class="comment"> case &lt;#value 1#&gt;:</span></span><br><span class="line"><span class="comment">     &lt;#respond to value 1#&gt;</span></span><br><span class="line"><span class="comment"> case &lt;#value 2#&gt;,</span></span><br><span class="line"><span class="comment">      &lt;#value 3#&gt;:</span></span><br><span class="line"><span class="comment">     &lt;#respond to value 2 or 3#&gt;</span></span><br><span class="line"><span class="comment"> default:</span></span><br><span class="line"><span class="comment">     &lt;#otherwise, do something else#&gt;</span></span><br><span class="line"><span class="comment"> &#125;</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> - switch 문은 가능한 모든 사례를 반드시 다루어야 함 (Switch must be exhaustive) </span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>



<h2 id="Q-아래의-if-else-if-else-문을-switch-문으로-바꿔보세요"><a href="#Q-아래의-if-else-if-else-문을-switch-문으로-바꿔보세요" class="headerlink" title="Q. 아래의 if - else if - else 문을 switch 문으로 바꿔보세요."></a>Q. 아래의 if - else if - else 문을 switch 문으로 바꿔보세요.</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> temperatureInFahrenheit &lt;= <span class="number">32</span> &#123;</span><br><span class="line"> <span class="built_in">print</span>(<span class="string">"It's very cold. Consider wearing a scarf."</span>)</span><br><span class="line"> &#125; <span class="keyword">else</span> <span class="keyword">if</span> temperatureInFahrenheit &gt;= <span class="number">86</span> &#123;</span><br><span class="line"> <span class="built_in">print</span>(<span class="string">"It's really warm. Don't forget to wear sunscreen."</span>)</span><br><span class="line"> &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"> <span class="built_in">print</span>(<span class="string">"It's not that cold. Wear a t-shirt."</span>)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> temp = <span class="number">44</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> temp &#123;</span><br><span class="line"><span class="keyword">case</span> ...<span class="number">32</span> :</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"It's very cold. Consider wearing a scarf."</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="number">33</span>...<span class="number">86</span> :</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"It's really warm. Don't forget to wear sunscreen."</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"It's not that cold. Wear a t-shirt."</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<hr>
<h1 id="Compound-case"><a href="#Compound-case" class="headerlink" title="Compound case"></a>Compound case</h1><ul>
<li>if문은 콤마(,)가 And(&amp;&amp;)연산인 것과 반대로 switch문은 콤마(,)가 Or(||) 연산</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> somePoint = (<span class="number">9</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> somePoint &#123;</span><br><span class="line"><span class="keyword">case</span> (<span class="keyword">let</span> <span class="built_in">distance</span>, <span class="number">0</span>), (<span class="number">0</span>, <span class="keyword">let</span> <span class="built_in">distance</span>):</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"On an axis, \(distance) from the origin"</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"Not on an axis"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// x나 y 둘중 하나가 0이면 On an axis가 출력됨</span></span><br></pre></td></tr></table></figure>



<hr>
<h1 id="where-clause"><a href="#where-clause" class="headerlink" title="where clause"></a>where clause</h1><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> anotherPoint = (<span class="number">1</span>, -<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> anotherPoint &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="keyword">let</span> (x, y) <span class="keyword">where</span> x == y:</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"(\(x), \(y)) is on the line x == y"</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="keyword">let</span> (x, y) <span class="keyword">where</span> x == -y:</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"(\(x), \(y)) is on the line x == -y"</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="keyword">let</span> (x, y):</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"(\(x), \(y)) is just some arbitrary point"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="Q-어떤-숫자가-주어졌을-때-짝수인지-홀수인지-출력-switch의-where-절-이용"><a href="#Q-어떤-숫자가-주어졌을-때-짝수인지-홀수인지-출력-switch의-where-절-이용" class="headerlink" title="Q. 어떤 숫자가 주어졌을 때 짝수인지 홀수인지 출력 (switch의 where 절 이용)"></a>Q. 어떤 숫자가 주어졌을 때 짝수인지 홀수인지 출력 (switch의 where 절 이용)</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">89</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> num &#123;</span><br><span class="line"><span class="keyword">case</span> num <span class="keyword">where</span> num % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"짝수입니다."</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"홀수입니다."</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="Fallthrough"><a href="#Fallthrough" class="headerlink" title="Fallthrough"></a>Fallthrough</h1><ul>
<li>다른 언어들은 swith문이 계속 break를 써주어야 한다. 안쓰면 그 다음 구문도 실행됨</li>
<li>그런데 swift는 안넣어도 되는게 기본임</li>
<li>반대로 fallthrough를 넣어주어야 다음 구문도 실행 됨</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> integerToDescribe = <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> description = <span class="string">"The number \(integerToDescribe) is"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> integerToDescribe &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">19</span>:</span><br><span class="line">  description += <span class="string">" a prime number, and also"</span></span><br><span class="line">  <span class="keyword">fallthrough</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">  description += <span class="string">" an integer."</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(description)</span><br><span class="line"><span class="comment">// 위 코드에서 fallthrough를 빼면 default 부분은 실행이 안됨</span></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="Guard-statement"><a href="#Guard-statement" class="headerlink" title="Guard statement"></a>Guard statement</h1><ul>
<li>조건에 맞지 않으면 바로 종료</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">update</span><span class="params">(age: Int)</span></span> &#123;</span><br><span class="line">  <span class="keyword">if</span> <span class="number">1</span>...<span class="number">100</span> ~= age &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Update"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">update</span><span class="params">(age: Int)</span></span> &#123;</span><br><span class="line">  <span class="keyword">guard</span> <span class="number">1</span>...<span class="number">100</span> ~= age <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"Update"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<hr>
<h1 id="Tuple"><a href="#Tuple" class="headerlink" title="Tuple"></a>Tuple</h1><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> numbers = threeNumbers</span><br><span class="line">numbers</span><br><span class="line">numbers.<span class="number">0</span></span><br><span class="line">numbers.<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 위와 같이 매번 인덱스로 접근하고 싶지 않으면 아래와 같이 각각의 변수에 저장하는 것도 가능하다. </span></span><br><span class="line"><span class="keyword">let</span> (first, second, third) = threeNumbers</span><br><span class="line">first</span><br><span class="line">second</span><br><span class="line"></span><br><span class="line"><span class="comment">// wildcard pattern</span></span><br><span class="line"><span class="keyword">let</span> (<span class="number">_</span>, second1, third1) = threeNumbers</span><br><span class="line">second1</span><br><span class="line">third1</span><br></pre></td></tr></table></figure>



<h1 id="Named-Tuple"><a href="#Named-Tuple" class="headerlink" title="Named Tuple"></a>Named Tuple</h1><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> iOS = (language: <span class="string">"Swift"</span>, version: <span class="string">"4"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//let iOS: (language: String, version: String) = (language: "Swift", version: "4")</span></span><br><span class="line"><span class="comment">//let iOS: (language: String, version: String) = ("Swift", "4")</span></span><br><span class="line"><span class="comment">//let iOS = (language: "Swift", version: "4")</span></span><br><span class="line"></span><br><span class="line">iOS.<span class="number">0</span></span><br><span class="line">iOS.<span class="number">1</span></span><br><span class="line"></span><br><span class="line">iOS.language</span><br><span class="line">iOS.version</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="Comparison-Operators"><a href="#Comparison-Operators" class="headerlink" title="Comparison Operators"></a>Comparison Operators</h1><ul>
<li>Tuple 은 7개 미만 요소에 대한 비교 연산자가 포함되어 있음</li>
<li>7개 이상의 요소를 비교하기 위해서는 비교 연산자를 직접 구현해야 함</li>
</ul>
<h2 id="Q-다음의-비교-결과는"><a href="#Q-다음의-비교-결과는" class="headerlink" title="Q. 다음의 비교 결과는?"></a>Q. 다음의 비교 결과는?</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">(<span class="number">1</span>, <span class="string">"zebra"</span>) &lt; (<span class="number">2</span>, <span class="string">"apple"</span>)   <span class="comment">// true</span></span><br><span class="line">(<span class="number">3</span>, <span class="string">"apple"</span>) &gt; (<span class="number">3</span>, <span class="string">"bird"</span>)    <span class="comment">// false</span></span><br><span class="line">(<span class="string">"3.14"</span>, <span class="number">99</span>) &gt; (<span class="string">"1.99"</span>, <span class="number">1</span>)    <span class="comment">// true</span></span><br><span class="line">(<span class="string">"blue"</span>, <span class="number">1</span>) &gt; (<span class="string">"bluesky"</span>, -<span class="number">1</span>) <span class="comment">// false</span></span><br><span class="line">(<span class="number">4</span>, <span class="string">"dog"</span>) == (<span class="number">4</span>, <span class="string">"dog"</span>)      <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">(<span class="string">"일"</span>, <span class="number">1</span>) &gt; (<span class="string">"이"</span>, <span class="number">2.0</span>)</span><br><span class="line">(<span class="number">1</span>, <span class="string">"zebra"</span>) &lt; (<span class="string">"2"</span>, <span class="string">"apple"</span>) <span class="comment">// 에러남 비교하는 값들의 타입이 다르기 때문</span></span><br><span class="line">(<span class="string">"blue"</span>, <span class="literal">false</span>) &lt; (<span class="string">"purple"</span>, <span class="literal">true</span>) <span class="comment">// 에러남 불 값은 크기비교를 할 수 없어서</span></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="Loops"><a href="#Loops" class="headerlink" title="Loops"></a>Loops</h1><ul>
<li>for 문</li>
<li>while</li>
</ul>
<h1 id="for문"><a href="#for문" class="headerlink" title="for문"></a>for문</h1><h2 id="Q-for-문을-이용하여-3-의-10-제곱에-대한-결과값을-표현하는-코드-구현"><a href="#Q-for-문을-이용하여-3-의-10-제곱에-대한-결과값을-표현하는-코드-구현" class="headerlink" title="Q. for 문을 이용하여 3 의 10 제곱에 대한 결과값을 표현하는 코드 구현"></a>Q. for 문을 이용하여 3 의 10 제곱에 대한 결과값을 표현하는 코드 구현</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let base = 3</span><br><span class="line">let power = 10</span><br><span class="line">var answer = 1</span><br><span class="line">for _ in 1...power &#123;</span><br><span class="line">    answer *= base</span><br><span class="line">&#125;</span><br><span class="line">print(answer)</span><br></pre></td></tr></table></figure>



<h2 id="Q-for-문을-이용하여-10부터-1까지-내림차순으로-출력하는-코드-구현"><a href="#Q-for-문을-이용하여-10부터-1까지-내림차순으로-출력하는-코드-구현" class="headerlink" title="Q. for 문을 이용하여 10부터 1까지 내림차순으로 출력하는 코드 구현"></a>Q. for 문을 이용하여 10부터 1까지 내림차순으로 출력하는 코드 구현</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h1 id="While-문"><a href="#While-문" class="headerlink" title="While 문"></a>While 문</h1><ul>
<li>조건이 거짓이 될 때까지 일련의 명령문 수행</li>
<li>첫 번째 반복이 시작되기 전에 반복 횟수를 알지 못할 때 많이 사용</li>
<li>while / repeat-while</li>
</ul>
<h2 id="Q-자연수-하나를-입력받아-1부터-해당-숫자-사이의-모든-숫자의-합을-구해-그-합을-반환하는-함수"><a href="#Q-자연수-하나를-입력받아-1부터-해당-숫자-사이의-모든-숫자의-합을-구해-그-합을-반환하는-함수" class="headerlink" title="Q. 자연수 하나를 입력받아 1부터 해당 숫자 사이의 모든 숫자의 합을 구해 그 합을 반환하는 함수"></a>Q. 자연수 하나를 입력받아 1부터 해당 숫자 사이의 모든 숫자의 합을 구해 그 합을 반환하는 함수</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sumNumbers</span><span class="params">(<span class="built_in">max</span>: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> num = <span class="number">1</span></span><br><span class="line">  <span class="keyword">var</span> sum = <span class="number">0</span></span><br><span class="line">  <span class="keyword">repeat</span> &#123;</span><br><span class="line">    sum += num <span class="comment">//</span></span><br><span class="line">    num += <span class="number">1</span></span><br><span class="line">  &#125; <span class="keyword">while</span> num &lt;= <span class="built_in">max</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">totalNum</span><span class="params">(<span class="built_in">max</span>: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">1</span></span><br><span class="line">    <span class="keyword">var</span> sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> num &lt;= <span class="built_in">max</span> &#123;</span><br><span class="line">        sum += num</span><br><span class="line">        num += <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(totalNum(<span class="built_in">max</span>: <span class="number">3</span>))</span><br><span class="line"><span class="built_in">print</span>(sumNumbers(<span class="built_in">max</span>: <span class="number">10</span>))</span><br></pre></td></tr></table></figure>



<hr>
<h1 id="Control-Transfer-Statement"><a href="#Control-Transfer-Statement" class="headerlink" title="Control Transfer Statement"></a>Control Transfer Statement</h1><ul>
<li>continue - 현재 반복문의 작업을 중단하고 다음 반복 아이템에 대한 작업 수행</li>
<li>break - break가 포함된 해당 제어문의 흐름을 즉각 중단 (반복문, switch 문)</li>
<li>fallthrough - switch 문에서 매칭된 case 의 실행이 종료된 후 그 다음의 case 까지 실행</li>
<li>return - 함수를 즉시 종료하고, return type에 해당하는 자료를 반환</li>
</ul>
<h1 id="Practice"><a href="#Practice" class="headerlink" title="Practice"></a>Practice</h1><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// - 학점을 입력받아 각각의 등급을 반환해주는 함수 (4.5 = A+,  4.0 = A, 3.5 = B+ ...)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">returnGrade</span> <span class="params">(score : Float)</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> score &gt;= <span class="number">4.5</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"A+"</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> score &gt;= <span class="number">4.0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"A"</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> score &gt;= <span class="number">3.5</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"B+"</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> score &gt;= <span class="number">3.0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"B"</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> score &gt;= <span class="number">2.5</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"C+"</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> score &gt;= <span class="number">2.0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"C"</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"F"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">returnGrade(score: <span class="number">4.3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// - 특정 달을 숫자로 입력 받아서 문자열로 반환하는 함수 (1 = "Jan" , 2 = "Feb", ...)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">transMonth</span> <span class="params">(month: Int)</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> month &#123;</span><br><span class="line">    <span class="keyword">case</span> month <span class="keyword">where</span> month == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Jan"</span></span><br><span class="line">    <span class="keyword">case</span> month <span class="keyword">where</span> month == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Feb"</span></span><br><span class="line">    <span class="keyword">case</span> month <span class="keyword">where</span> month == <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Mar"</span></span><br><span class="line">    <span class="keyword">case</span> month <span class="keyword">where</span> month == <span class="number">4</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Apr"</span></span><br><span class="line">    <span class="keyword">case</span> month <span class="keyword">where</span> month == <span class="number">5</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"May"</span></span><br><span class="line">    <span class="keyword">case</span> month <span class="keyword">where</span> month == <span class="number">6</span>:</span><br><span class="line">           <span class="keyword">return</span> <span class="string">"Jun"</span></span><br><span class="line">    <span class="keyword">case</span> month <span class="keyword">where</span> month == <span class="number">7</span>:</span><br><span class="line">           <span class="keyword">return</span> <span class="string">"Jul"</span></span><br><span class="line">    <span class="keyword">case</span> month <span class="keyword">where</span> month == <span class="number">8</span>:</span><br><span class="line">           <span class="keyword">return</span> <span class="string">"Aug"</span></span><br><span class="line">    <span class="keyword">case</span> month <span class="keyword">where</span> month == <span class="number">9</span>:</span><br><span class="line">           <span class="keyword">return</span> <span class="string">"Sep"</span></span><br><span class="line">    <span class="keyword">case</span> month <span class="keyword">where</span> month == <span class="number">10</span>:</span><br><span class="line">           <span class="keyword">return</span> <span class="string">"Oct"</span></span><br><span class="line">    <span class="keyword">case</span> month <span class="keyword">where</span> month == <span class="number">11</span>:</span><br><span class="line">           <span class="keyword">return</span> <span class="string">"Nov"</span></span><br><span class="line">    <span class="keyword">case</span> month <span class="keyword">where</span> month == <span class="number">12</span>:</span><br><span class="line">           <span class="keyword">return</span> <span class="string">"Dec"</span></span><br><span class="line">    <span class="keyword">default</span> :</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"not month"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">transMonth(month: <span class="number">12</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// - 세 수를 입력받아 세 수의 곱이 양수이면 true, 그렇지 않으면 false 를 반환하는 함수</span></span><br><span class="line"><span class="comment">//   (switch where clause 를 이용해 풀어볼 수 있으면 해보기)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">num</span> <span class="params">(a: Int, b: Int, <span class="built_in">c</span>: Int)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> mul = a * b * <span class="built_in">c</span></span><br><span class="line">    <span class="keyword">switch</span> mul &#123;</span><br><span class="line">    <span class="keyword">case</span> mul <span class="keyword">where</span> mul &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    <span class="keyword">case</span> mul <span class="keyword">where</span> mul == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    <span class="keyword">default</span> :</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">num(a: <span class="number">2</span>, b: <span class="number">92</span>, <span class="built_in">c</span>: <span class="number">0</span>)</span><br><span class="line"><span class="comment">/*:</span></span><br><span class="line"><span class="comment"> ---</span></span><br><span class="line"><span class="comment"> ## Loops</span></span><br><span class="line"><span class="comment"> ---</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 반복문(for , while , repeat - while)을 이용해 아래 문제들을 구현해보세요.</span></span><br><span class="line"><span class="comment">// - 자연수 하나를 입력받아 그 수의 Factorial 을 구하는 함수</span></span><br><span class="line"><span class="comment">//   (Factorial 참고: 어떤 수가 주어졌을 때 그 수를 포함해 그 수보다 작은 모든 수를 곱한 것)</span></span><br><span class="line"><span class="comment">//   ex) 5! = 5 x 4 x 3 x 2 x 1</span></span><br><span class="line"> <span class="function"><span class="keyword">func</span> <span class="title">factorial</span> <span class="params">(a: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">     <span class="keyword">var</span> mul = <span class="number">1</span></span><br><span class="line">     <span class="keyword">var</span> num = <span class="number">1</span></span><br><span class="line">     <span class="keyword">while</span> num &lt;= a &#123;</span><br><span class="line">         mul *= num</span><br><span class="line">         num += <span class="number">1</span></span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> mul</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">factorial(a:<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// - 자연수 두 개를 입력받아 첫 번째 수를 두 번째 수만큼 제곱하여 반환하는 함수</span></span><br><span class="line"><span class="comment">//   (2, 5 를 입력한 경우 결과는 2의 5제곱)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">squard</span> <span class="params">(a: Int, b: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> squ = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> <span class="number">_</span> <span class="keyword">in</span> <span class="number">0</span>..&lt;b &#123;</span><br><span class="line">        squ *= a</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> squ</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">squard(a: <span class="number">2</span>, b: <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// - 자연수 하나를 입력받아 각 자리수 숫자들의 합을 반환해주는 함수</span></span><br><span class="line"><span class="comment">//   (1234 인 경우 각 자리 숫자를 합치면 10)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sumSeat</span> <span class="params">(a: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> str = <span class="type">String</span>(a)</span><br><span class="line">    <span class="keyword">var</span> sum: [<span class="type">Character</span>] = []</span><br><span class="line">    <span class="keyword">var</span> total = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> str &#123;</span><br><span class="line">        sum.append(char)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span>...sum.<span class="built_in">count</span> &#123;</span><br><span class="line">        total += i</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> total</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(sumSeat(a: <span class="number">21347</span>))</span><br><span class="line"><span class="comment">/*:</span></span><br><span class="line"><span class="comment"> ---</span></span><br><span class="line"><span class="comment"> ## Control Transfer</span></span><br><span class="line"><span class="comment"> ---</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// - 자연수 하나를 입력받아 1부터 해당 숫자 사이의 모든 숫자의 합을 구해 반환하는 함수를 만들되,</span></span><br><span class="line"><span class="comment">//   그 합이 2000 을 넘는 순간 더하기를 멈추고 바로 반환하는 함수</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">sum</span> <span class="params">(a: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> sum = <span class="number">0</span></span><br><span class="line">        <span class="keyword">var</span> num = <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> num &lt;= a &#123;</span><br><span class="line">                <span class="keyword">if</span> sum &lt;= <span class="number">2000</span> &#123;</span><br><span class="line">                    sum += num</span><br><span class="line">                    num += <span class="number">1</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> sum</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">sum(a: <span class="number">67</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// - 1 ~ 50 사이의 숫자 중에서 20 ~ 30 사이의 숫자만 제외하고 그 나머지를 모두 더해 출력하는 함수</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">remainSum</span><span class="params">()</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span>...<span class="number">50</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> i &gt;= <span class="number">20</span> &amp;&amp; i &lt;= <span class="number">30</span> &#123;</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            sum += i</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(remainSum())</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>TIL</category>
      </categories>
      <tags>
        <tag>swift, iOS</tag>
      </tags>
  </entry>
</search>
